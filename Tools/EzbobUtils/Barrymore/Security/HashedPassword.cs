namespace Ezbob.Utils.Security {
	using System.Globalization;

	/// <summary>
	/// Hashed password data that is ready for serialization (like storing in DB).
	/// </summary>
	public class HashedPassword {
		/// <summary>
		/// Creates an instance from data generated by <see cref="PasswordUtility"/>.
		/// </summary>
		/// <param name="userName">User name.</param>
		/// <param name="cycleCount">How many times password was hashed.</param>
		/// <param name="password">Hashed password.</param>
		/// <param name="salt">Salt (used for hashing algorithm).</param>
		public HashedPassword(string userName, int cycleCount, byte[] password, byte[] salt) {
			Raw = new RawValues(this);

			UserName = userName;
			this.password = password ?? new byte[0];
			this.salt = salt ?? new byte[0];
			this.cycleCount = cycleCount;
		} // constructor

		/// <summary>
		/// Creates an instance from serialized data (e.g. loaded from DB).
		/// </summary>
		/// <param name="userName">User name.</param>
		/// <param name="cycleCount">Encrypted cycle count.</param>
		/// <param name="password">Hashed password.</param>
		/// <param name="salt">Encoded salt.</param>
		public HashedPassword(string userName, string cycleCount, string password, string salt) {
			Raw = new RawValues(this);

			UserName = userName;
			this.password = Base64(password);
			this.salt = Base64(salt);

			try {
				this.cycleCount = int.Parse(Encrypted.Decrypt(cycleCount));
			} catch {
				this.cycleCount = 0;
			} // try
		} // constructor

		/// <summary>
		/// User name.
		/// </summary>
		public string UserName { get; private set; }

		/// <summary>
		/// Hashed password.
		/// </summary>
		public string Password { get { return Base64(this.password); } } // Password

		/// <summary>
		/// Encoded salt.
		/// </summary>
		public string Salt { get { return Base64(this.salt); } } // Salt

		/// <summary>
		/// Encrypted cycle count.
		/// </summary>
		public string CycleCount {
			get { return new Encrypted(this.cycleCount.ToString(CultureInfo.InvariantCulture)).ToString(); }
		} // CycleCount

		/// <summary>
		/// Gets raw values (that are not ready to be serialized).
		/// </summary>
		public RawValues Raw { get; private set; }

		/// <summary>
		/// Returns the fully qualified type name of this instance.
		/// </summary>
		/// <returns>
		/// A <see cref="T:System.String"/> containing a fully qualified type name.
		/// </returns>
		public override string ToString() {
			return string.Format("{0}:{1} (salt: '{2}', cycles: '{3}')", UserName, Password, Salt, CycleCount);
		} // ToString

		public class RawValues {
			internal RawValues(HashedPassword hp) {
				this.hp = hp;
			} // constructor

			public byte[] Password {
				get { return this.hp.password; }
			} // Password

			public byte[] Salt {
				get { return this.hp.salt; }
			} // Salt

			public int CycleCount {
				get { return this.hp.cycleCount; }
			} // CycleCount

			private readonly HashedPassword hp;
		} // RawValues

		private static string Base64(byte[] src) {
			try {
				return System.Convert.ToBase64String(src ?? new byte[0]);
			} catch {
				return string.Empty;
			} // try
		} // Base64

		private static byte[] Base64(string src) {
			try {
				return System.Convert.FromBase64String(src ?? string.Empty);
			} catch {
				return new byte[0];
			} // try
		} // Base64

		private readonly int cycleCount;
		private readonly byte[] password;
		private readonly byte[] salt;
	} // class HashedPassword
} // namespace
