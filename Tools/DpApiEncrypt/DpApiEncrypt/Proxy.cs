//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace Master {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="ScortoPatron")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CalendarBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DayBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntryBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DatasourceBase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditProduct[]))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CreditProductParam[]))]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback EncryptOperationCompleted;
        
        private SessionHeader sessionHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetCreditProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCreditProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCreditProductOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCpUsagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCreditParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodeFilesForRestoreAndSaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableStrategyTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllStatusesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckStatusNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOrUpdatesStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuItemsByStatusIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityApplicationsOfTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncreaseMenuItemsPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecreaseMenuItemsPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMenuItemsBySecAppIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMenuItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOrUpdateMenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckSecurityApplicationNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOrUpdateSecurityApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSecurityApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationsContainingMenuItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyListByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunBehavioralStrategyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunStrategyWithParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextScheduledRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduleItemsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBehavioralReportsAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBehavioralReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBehavioralReportFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBehavioralReportFullPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadBehavioralReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadBehavioralReportUncompressedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBehavioralStrategiesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplateLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodeTemplateLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTemplateLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTemplateByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEntityLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExportTemplateLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApproveLinksBySourceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLinksBySourceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyNamesForExportTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessEntitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessEntitityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessEntititiesHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBusinessEntityDescriptorByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveBusinessEntityVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfExistsInActiveStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveBusinessEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfBusinessEntityExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyNamesLinkedToBusinessEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodeNamesLinkedToBusinessEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBusinessEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfBusinessEntityIsEmptyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllAttachAccessRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllStrategiesSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveOrUpdateAttachAccessRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAttachAccessRuleOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncreaseAttachRulePriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecreaseAttachRulePriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAttachAccessRuleForUniquenessOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsWarehouseDataSourceInitializedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWarehouseDataSourceByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDataSourceParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWarehouseDataSourceParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSourceByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSourcesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExternalDataSourceSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStoredProcedureDataSourceSchemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback TryGetConstraintStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataSourceLinkedStrategyNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataProvidersListOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertExternalDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPublisherDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertWarehouseDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWarehouseDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDataSourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDictionaryByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDictionaryValuesConstraintOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountTypeFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountTypeHistoricalFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerTypeFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerTypeHistoricalFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailAccountsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyNamesForEmailAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEmailAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewEmailAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmailAccountsListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveEmailAccountByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DummyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNodesSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllNodesSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNodeSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNodeApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDigitalSignatureRequiredOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadNodeSimpleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckNodeStrategyRelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePublicNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePublishNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStrategyOperationCompleted;
        
        private System.Threading.SendOrPostCallback PublishStrategyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePublishRelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublishNamesListWithCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublishNamesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssignedStrategiesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback BeginLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseLockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTreeAttachmentsForNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindTemplateToAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindTemplatesToAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnBindTemplatesToAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnBindTemplateFromAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTreeAttachTemplateLinksOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAttachmentTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyReferencesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteStrategyOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSuspendOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStrategySettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTerminationDateSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicNamesForStrategyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCalendarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCalendarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaseCalendarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyCalendarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetStrategyCalendarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpreadSheetsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSpreadSheetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfSpreadSheetExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveSpreadSheetOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpreadSheetTemplateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpreadSheetLinkedNodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyAreasOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewStrategyAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyTasksForAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewStrategyTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAreaTaskCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddStrategyToTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStrategyTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskStrategiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskStrategyCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveStrategyFromTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTaskFromAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAreaOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAreaNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckTaskNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckStrategyLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskedStrategyParametersByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskedStrategyParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddScoringModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteScoringModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateModelOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetModelPmmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStrategyScheduleItemsOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertStrategyScheduleItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertStrategyScheduleItemDtoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateStrategyScheduleItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteStrategyScheduleItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasNewerStrategyVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateToLatestStrategyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScheduledStrategyParametersByStrategyNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveScheduledStrategyParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteScheduledStrategyParametersOperationCompleted;
        
        private System.Threading.SendOrPostCallback PauseStrategyScheduleItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthServerBaseUrlOperationCompleted;
        
        /// <remarks/>
        public Service() {
            this.Url = "http://localhost/pta/PatronServer/Service.asmx";
        }
        
        public SessionHeader SessionHeaderValue {
            get {
                return this.sessionHeaderValueField;
            }
            set {
                this.sessionHeaderValueField = value;
            }
        }
        
        /// <remarks/>
        public event EncryptCompletedEventHandler EncryptCompleted;
        
        /// <remarks/>
        public event GetCreditProductListCompletedEventHandler GetCreditProductListCompleted;
        
        /// <remarks/>
        public event UpdateCreditProductCompletedEventHandler UpdateCreditProductCompleted;
        
        /// <remarks/>
        public event DeleteCreditProductCompletedEventHandler DeleteCreditProductCompleted;
        
        /// <remarks/>
        public event GetCpUsagesCompletedEventHandler GetCpUsagesCompleted;
        
        /// <remarks/>
        public event DeleteCreditParamCompletedEventHandler DeleteCreditParamCompleted;
        
        /// <remarks/>
        public event GetNodesListCompletedEventHandler GetNodesListCompleted;
        
        /// <remarks/>
        public event GetNodeFilesForRestoreAndSaveCompletedEventHandler GetNodeFilesForRestoreAndSaveCompleted;
        
        /// <remarks/>
        public event GetAvailableStrategyTypesCompletedEventHandler GetAvailableStrategyTypesCompleted;
        
        /// <remarks/>
        public event GetAllStatusesCompletedEventHandler GetAllStatusesCompleted;
        
        /// <remarks/>
        public event CheckStatusNameCompletedEventHandler CheckStatusNameCompleted;
        
        /// <remarks/>
        public event SaveOrUpdatesStatusCompletedEventHandler SaveOrUpdatesStatusCompleted;
        
        /// <remarks/>
        public event DeleteStatusCompletedEventHandler DeleteStatusCompleted;
        
        /// <remarks/>
        public event GetMenuItemsByStatusIdCompletedEventHandler GetMenuItemsByStatusIdCompleted;
        
        /// <remarks/>
        public event GetSecurityApplicationsCompletedEventHandler GetSecurityApplicationsCompleted;
        
        /// <remarks/>
        public event GetSecurityApplicationsOfTypesCompletedEventHandler GetSecurityApplicationsOfTypesCompleted;
        
        /// <remarks/>
        public event IncreaseMenuItemsPositionCompletedEventHandler IncreaseMenuItemsPositionCompleted;
        
        /// <remarks/>
        public event DecreaseMenuItemsPositionCompletedEventHandler DecreaseMenuItemsPositionCompleted;
        
        /// <remarks/>
        public event GetMenuItemsBySecAppIdCompletedEventHandler GetMenuItemsBySecAppIdCompleted;
        
        /// <remarks/>
        public event GetAllMenuItemsCompletedEventHandler GetAllMenuItemsCompleted;
        
        /// <remarks/>
        public event CheckMenuItemCompletedEventHandler CheckMenuItemCompleted;
        
        /// <remarks/>
        public event SaveOrUpdateMenuItemCompletedEventHandler SaveOrUpdateMenuItemCompleted;
        
        /// <remarks/>
        public event DeleteMenuItemCompletedEventHandler DeleteMenuItemCompleted;
        
        /// <remarks/>
        public event CheckSecurityApplicationNameCompletedEventHandler CheckSecurityApplicationNameCompleted;
        
        /// <remarks/>
        public event SaveOrUpdateSecurityApplicationCompletedEventHandler SaveOrUpdateSecurityApplicationCompleted;
        
        /// <remarks/>
        public event DeleteSecurityApplicationCompletedEventHandler DeleteSecurityApplicationCompleted;
        
        /// <remarks/>
        public event GetApplicationsContainingMenuItemsCompletedEventHandler GetApplicationsContainingMenuItemsCompleted;
        
        /// <remarks/>
        public event GetStrategyListByTypeCompletedEventHandler GetStrategyListByTypeCompleted;
        
        /// <remarks/>
        public event RunBehavioralStrategyCompletedEventHandler RunBehavioralStrategyCompleted;
        
        /// <remarks/>
        public event RunStrategyWithParamsCompletedEventHandler RunStrategyWithParamsCompleted;
        
        /// <remarks/>
        public event GetNextScheduledRunCompletedEventHandler GetNextScheduledRunCompleted;
        
        /// <remarks/>
        public event GetScheduleItemsCountCompletedEventHandler GetScheduleItemsCountCompleted;
        
        /// <remarks/>
        public event GetBehavioralReportsAllCompletedEventHandler GetBehavioralReportsAllCompleted;
        
        /// <remarks/>
        public event GetBehavioralReportsCompletedEventHandler GetBehavioralReportsCompleted;
        
        /// <remarks/>
        public event GetReportTypesCompletedEventHandler GetReportTypesCompleted;
        
        /// <remarks/>
        public event GetBehavioralReportFileNameCompletedEventHandler GetBehavioralReportFileNameCompleted;
        
        /// <remarks/>
        public event GetBehavioralReportFullPathCompletedEventHandler GetBehavioralReportFullPathCompleted;
        
        /// <remarks/>
        public event DownloadBehavioralReportCompletedEventHandler DownloadBehavioralReportCompleted;
        
        /// <remarks/>
        public event DownloadBehavioralReportUncompressedCompletedEventHandler DownloadBehavioralReportUncompressedCompleted;
        
        /// <remarks/>
        public event GetBehavioralStrategiesListCompletedEventHandler GetBehavioralStrategiesListCompleted;
        
        /// <remarks/>
        public event GetTemplatesCompletedEventHandler GetTemplatesCompleted;
        
        /// <remarks/>
        public event UpdateTemplateCompletedEventHandler UpdateTemplateCompleted;
        
        /// <remarks/>
        public event DeleteTemplateCompletedEventHandler DeleteTemplateCompleted;
        
        /// <remarks/>
        public event GetTemplateLinksCompletedEventHandler GetTemplateLinksCompleted;
        
        /// <remarks/>
        public event GetNodeTemplateLinksCompletedEventHandler GetNodeTemplateLinksCompleted;
        
        /// <remarks/>
        public event UpdateTemplateLinksCompletedEventHandler UpdateTemplateLinksCompleted;
        
        /// <remarks/>
        public event DownloadTemplateCompletedEventHandler DownloadTemplateCompleted;
        
        /// <remarks/>
        public event DownloadTemplateByNameCompletedEventHandler DownloadTemplateByNameCompleted;
        
        /// <remarks/>
        public event GetEntityLinksCompletedEventHandler GetEntityLinksCompleted;
        
        /// <remarks/>
        public event GetExportTemplateLinkCompletedEventHandler GetExportTemplateLinkCompleted;
        
        /// <remarks/>
        public event ApproveLinksBySourceIdCompletedEventHandler ApproveLinksBySourceIdCompleted;
        
        /// <remarks/>
        public event DeleteLinksBySourceIdCompletedEventHandler DeleteLinksBySourceIdCompleted;
        
        /// <remarks/>
        public event AddLinkCompletedEventHandler AddLinkCompleted;
        
        /// <remarks/>
        public event GetStrategyNamesForExportTemplateCompletedEventHandler GetStrategyNamesForExportTemplateCompleted;
        
        /// <remarks/>
        public event GetBusinessEntitiesCompletedEventHandler GetBusinessEntitiesCompleted;
        
        /// <remarks/>
        public event GetBusinessEntitityCompletedEventHandler GetBusinessEntitityCompleted;
        
        /// <remarks/>
        public event GetBusinessEntititiesHistoryCompletedEventHandler GetBusinessEntititiesHistoryCompleted;
        
        /// <remarks/>
        public event GetBusinessEntityDescriptorByNameCompletedEventHandler GetBusinessEntityDescriptorByNameCompleted;
        
        /// <remarks/>
        public event GetActiveBusinessEntityVersionCompletedEventHandler GetActiveBusinessEntityVersionCompleted;
        
        /// <remarks/>
        public event CheckIfExistsInActiveStateCompletedEventHandler CheckIfExistsInActiveStateCompleted;
        
        /// <remarks/>
        public event SaveBusinessEntityCompletedEventHandler SaveBusinessEntityCompleted;
        
        /// <remarks/>
        public event CheckIfBusinessEntityExistsCompletedEventHandler CheckIfBusinessEntityExistsCompleted;
        
        /// <remarks/>
        public event GetStrategyNamesLinkedToBusinessEntityCompletedEventHandler GetStrategyNamesLinkedToBusinessEntityCompleted;
        
        /// <remarks/>
        public event GetNodeNamesLinkedToBusinessEntityCompletedEventHandler GetNodeNamesLinkedToBusinessEntityCompleted;
        
        /// <remarks/>
        public event DeleteBusinessEntityCompletedEventHandler DeleteBusinessEntityCompleted;
        
        /// <remarks/>
        public event CheckIfBusinessEntityIsEmptyCompletedEventHandler CheckIfBusinessEntityIsEmptyCompleted;
        
        /// <remarks/>
        public event GetAllAttachAccessRulesCompletedEventHandler GetAllAttachAccessRulesCompleted;
        
        /// <remarks/>
        public event GetAllStrategiesSimpleCompletedEventHandler GetAllStrategiesSimpleCompleted;
        
        /// <remarks/>
        public event GetAllRolesCompletedEventHandler GetAllRolesCompleted;
        
        /// <remarks/>
        public event SaveOrUpdateAttachAccessRuleCompletedEventHandler SaveOrUpdateAttachAccessRuleCompleted;
        
        /// <remarks/>
        public event DeleteAttachAccessRuleCompletedEventHandler DeleteAttachAccessRuleCompleted;
        
        /// <remarks/>
        public event IncreaseAttachRulePriorityCompletedEventHandler IncreaseAttachRulePriorityCompleted;
        
        /// <remarks/>
        public event DecreaseAttachRulePriorityCompletedEventHandler DecreaseAttachRulePriorityCompleted;
        
        /// <remarks/>
        public event CheckAttachAccessRuleForUniquenessCompletedEventHandler CheckAttachAccessRuleForUniquenessCompleted;
        
        /// <remarks/>
        public event IsWarehouseDataSourceInitializedCompletedEventHandler IsWarehouseDataSourceInitializedCompleted;
        
        /// <remarks/>
        public event GetWarehouseDataSourceByNameCompletedEventHandler GetWarehouseDataSourceByNameCompleted;
        
        /// <remarks/>
        public event CreateDataSourceParamCompletedEventHandler CreateDataSourceParamCompleted;
        
        /// <remarks/>
        public event CreateWarehouseDataSourceParamCompletedEventHandler CreateWarehouseDataSourceParamCompleted;
        
        /// <remarks/>
        public event GetDataSourceByNameCompletedEventHandler GetDataSourceByNameCompleted;
        
        /// <remarks/>
        public event GetDataSourcesCompletedEventHandler GetDataSourcesCompleted;
        
        /// <remarks/>
        public event CheckConnectionCompletedEventHandler CheckConnectionCompleted;
        
        /// <remarks/>
        public event GetExternalDataSourceSchemaCompletedEventHandler GetExternalDataSourceSchemaCompleted;
        
        /// <remarks/>
        public event GetStoredProcedureDataSourceSchemaCompletedEventHandler GetStoredProcedureDataSourceSchemaCompleted;
        
        /// <remarks/>
        public event TryGetConstraintStringCompletedEventHandler TryGetConstraintStringCompleted;
        
        /// <remarks/>
        public event GetDataSourceLinkedStrategyNamesCompletedEventHandler GetDataSourceLinkedStrategyNamesCompleted;
        
        /// <remarks/>
        public event GetDataProvidersListCompletedEventHandler GetDataProvidersListCompleted;
        
        /// <remarks/>
        public event InsertExternalDataSourceCompletedEventHandler InsertExternalDataSourceCompleted;
        
        /// <remarks/>
        public event InsertPublisherDataSourceCompletedEventHandler InsertPublisherDataSourceCompleted;
        
        /// <remarks/>
        public event InsertWarehouseDataSourceCompletedEventHandler InsertWarehouseDataSourceCompleted;
        
        /// <remarks/>
        public event DeleteWarehouseDataSourceCompletedEventHandler DeleteWarehouseDataSourceCompleted;
        
        /// <remarks/>
        public event DeleteDataSourceCompletedEventHandler DeleteDataSourceCompleted;
        
        /// <remarks/>
        public event GetDictionaryByIdCompletedEventHandler GetDictionaryByIdCompleted;
        
        /// <remarks/>
        public event GetDictionaryValuesConstraintCompletedEventHandler GetDictionaryValuesConstraintCompleted;
        
        /// <remarks/>
        public event GetAccountTypesCompletedEventHandler GetAccountTypesCompleted;
        
        /// <remarks/>
        public event GetAccountTypeFieldsCompletedEventHandler GetAccountTypeFieldsCompleted;
        
        /// <remarks/>
        public event GetAccountTypeHistoricalFieldsCompletedEventHandler GetAccountTypeHistoricalFieldsCompleted;
        
        /// <remarks/>
        public event GetCustomerTypesCompletedEventHandler GetCustomerTypesCompleted;
        
        /// <remarks/>
        public event GetCustomerTypeFieldsCompletedEventHandler GetCustomerTypeFieldsCompleted;
        
        /// <remarks/>
        public event GetCustomerTypeHistoricalFieldsCompletedEventHandler GetCustomerTypeHistoricalFieldsCompleted;
        
        /// <remarks/>
        public event GetEmailAccountsListCompletedEventHandler GetEmailAccountsListCompleted;
        
        /// <remarks/>
        public event GetStrategyNamesForEmailAccountCompletedEventHandler GetStrategyNamesForEmailAccountCompleted;
        
        /// <remarks/>
        public event DeleteEmailAccountCompletedEventHandler DeleteEmailAccountCompleted;
        
        /// <remarks/>
        public event AddNewEmailAccountCompletedEventHandler AddNewEmailAccountCompleted;
        
        /// <remarks/>
        public event GetEmailAccountsListByNameCompletedEventHandler GetEmailAccountsListByNameCompleted;
        
        /// <remarks/>
        public event GetActiveEmailAccountByNameCompletedEventHandler GetActiveEmailAccountByNameCompleted;
        
        /// <remarks/>
        public event CheckNameCompletedEventHandler CheckNameCompleted;
        
        /// <remarks/>
        public event DummyCompletedEventHandler DummyCompleted;
        
        /// <remarks/>
        public event GetNodeListCompletedEventHandler GetNodeListCompleted;
        
        /// <remarks/>
        public event GetNodesSimpleCompletedEventHandler GetNodesSimpleCompleted;
        
        /// <remarks/>
        public event GetAllNodesSimpleCompletedEventHandler GetAllNodesSimpleCompleted;
        
        /// <remarks/>
        public event UpdateNodeSettingsCompletedEventHandler UpdateNodeSettingsCompleted;
        
        /// <remarks/>
        public event UpdateNodeApplicationCompletedEventHandler UpdateNodeApplicationCompleted;
        
        /// <remarks/>
        public event ExecuteSqlCompletedEventHandler ExecuteSqlCompleted;
        
        /// <remarks/>
        public event IsDigitalSignatureRequiredCompletedEventHandler IsDigitalSignatureRequiredCompleted;
        
        /// <remarks/>
        public event UploadNodeCompletedEventHandler UploadNodeCompleted;
        
        /// <remarks/>
        public event UploadNodeSimpleCompletedEventHandler UploadNodeSimpleCompleted;
        
        /// <remarks/>
        public event DeleteNodeCompletedEventHandler DeleteNodeCompleted;
        
        /// <remarks/>
        public event CheckNodeStrategyRelCompletedEventHandler CheckNodeStrategyRelCompleted;
        
        /// <remarks/>
        public event UpdatePublicNameCompletedEventHandler UpdatePublicNameCompleted;
        
        /// <remarks/>
        public event DeletePublishNameCompletedEventHandler DeletePublishNameCompleted;
        
        /// <remarks/>
        public event UpdateStrategyCompletedEventHandler UpdateStrategyCompleted;
        
        /// <remarks/>
        public event PublishStrategyCompletedEventHandler PublishStrategyCompleted;
        
        /// <remarks/>
        public event DeletePublishRelCompletedEventHandler DeletePublishRelCompleted;
        
        /// <remarks/>
        public event GetPublishNamesListWithCountCompletedEventHandler GetPublishNamesListWithCountCompleted;
        
        /// <remarks/>
        public event GetPublishNamesListCompletedEventHandler GetPublishNamesListCompleted;
        
        /// <remarks/>
        public event GetAssignedStrategiesListCompletedEventHandler GetAssignedStrategiesListCompleted;
        
        /// <remarks/>
        public event BeginLockCompletedEventHandler BeginLockCompleted;
        
        /// <remarks/>
        public event CheckStatusCompletedEventHandler CheckStatusCompleted;
        
        /// <remarks/>
        public event ReleaseLockCompletedEventHandler ReleaseLockCompleted;
        
        /// <remarks/>
        public event GetTreeAttachmentsForNodeCompletedEventHandler GetTreeAttachmentsForNodeCompleted;
        
        /// <remarks/>
        public event BindTemplateToAttachCompletedEventHandler BindTemplateToAttachCompleted;
        
        /// <remarks/>
        public event BindTemplatesToAttachmentsCompletedEventHandler BindTemplatesToAttachmentsCompleted;
        
        /// <remarks/>
        public event UnBindTemplatesToAttachmentsCompletedEventHandler UnBindTemplatesToAttachmentsCompleted;
        
        /// <remarks/>
        public event UnBindTemplateFromAttachCompletedEventHandler UnBindTemplateFromAttachCompleted;
        
        /// <remarks/>
        public event GetTreeAttachTemplateLinksCompletedEventHandler GetTreeAttachTemplateLinksCompleted;
        
        /// <remarks/>
        public event UpdateAttachmentTemplatesCompletedEventHandler UpdateAttachmentTemplatesCompleted;
        
        /// <remarks/>
        public event GetStrategyListCompletedEventHandler GetStrategyListCompleted;
        
        /// <remarks/>
        public event GetStrategyDetailsCompletedEventHandler GetStrategyDetailsCompleted;
        
        /// <remarks/>
        public event GetStrategyReferencesCountCompletedEventHandler GetStrategyReferencesCountCompleted;
        
        /// <remarks/>
        public event DeleteStrategyCompletedEventHandler DeleteStrategyCompleted;
        
        /// <remarks/>
        public event IsSuspendCompletedEventHandler IsSuspendCompleted;
        
        /// <remarks/>
        public event UpdateStrategySettingsCompletedEventHandler UpdateStrategySettingsCompleted;
        
        /// <remarks/>
        public event UpdateTerminationDateSqlCompletedEventHandler UpdateTerminationDateSqlCompleted;
        
        /// <remarks/>
        public event GetPublicNamesForStrategyCompletedEventHandler GetPublicNamesForStrategyCompleted;
        
        /// <remarks/>
        public event GetAllCalendarsCompletedEventHandler GetAllCalendarsCompleted;
        
        /// <remarks/>
        public event GetUserCalendarsCompletedEventHandler GetUserCalendarsCompleted;
        
        /// <remarks/>
        public event GetBaseCalendarsCompletedEventHandler GetBaseCalendarsCompleted;
        
        /// <remarks/>
        public event SaveCalendarCompletedEventHandler SaveCalendarCompleted;
        
        /// <remarks/>
        public event DeleteCalendarCompletedEventHandler DeleteCalendarCompleted;
        
        /// <remarks/>
        public event GetStrategyCalendarsCompletedEventHandler GetStrategyCalendarsCompleted;
        
        /// <remarks/>
        public event SetStrategyCalendarsCompletedEventHandler SetStrategyCalendarsCompleted;
        
        /// <remarks/>
        public event GetSpreadSheetsListCompletedEventHandler GetSpreadSheetsListCompleted;
        
        /// <remarks/>
        public event DeleteSpreadSheetCompletedEventHandler DeleteSpreadSheetCompleted;
        
        /// <remarks/>
        public event CheckIfSpreadSheetExistsCompletedEventHandler CheckIfSpreadSheetExistsCompleted;
        
        /// <remarks/>
        public event SaveSpreadSheetCompletedEventHandler SaveSpreadSheetCompleted;
        
        /// <remarks/>
        public event GetSpreadSheetTemplateCompletedEventHandler GetSpreadSheetTemplateCompleted;
        
        /// <remarks/>
        public event GetSpreadSheetLinkedNodeCompletedEventHandler GetSpreadSheetLinkedNodeCompleted;
        
        /// <remarks/>
        public event GetStrategyAreasCompletedEventHandler GetStrategyAreasCompleted;
        
        /// <remarks/>
        public event CreateNewStrategyAreaCompletedEventHandler CreateNewStrategyAreaCompleted;
        
        /// <remarks/>
        public event GetStrategyTasksForAreaCompletedEventHandler GetStrategyTasksForAreaCompleted;
        
        /// <remarks/>
        public event CreateNewStrategyTaskCompletedEventHandler CreateNewStrategyTaskCompleted;
        
        /// <remarks/>
        public event GetAreaTaskCountCompletedEventHandler GetAreaTaskCountCompleted;
        
        /// <remarks/>
        public event AddStrategyToTaskCompletedEventHandler AddStrategyToTaskCompleted;
        
        /// <remarks/>
        public event UpdateStrategyTaskCompletedEventHandler UpdateStrategyTaskCompleted;
        
        /// <remarks/>
        public event GetTaskStrategiesCompletedEventHandler GetTaskStrategiesCompleted;
        
        /// <remarks/>
        public event GetTaskStrategyCountCompletedEventHandler GetTaskStrategyCountCompleted;
        
        /// <remarks/>
        public event RemoveStrategyFromTaskCompletedEventHandler RemoveStrategyFromTaskCompleted;
        
        /// <remarks/>
        public event RemoveTaskFromAreaCompletedEventHandler RemoveTaskFromAreaCompleted;
        
        /// <remarks/>
        public event RemoveAreaCompletedEventHandler RemoveAreaCompleted;
        
        /// <remarks/>
        public event CheckAreaNameCompletedEventHandler CheckAreaNameCompleted;
        
        /// <remarks/>
        public event CheckTaskNameCompletedEventHandler CheckTaskNameCompleted;
        
        /// <remarks/>
        public event CheckStrategyLabelCompletedEventHandler CheckStrategyLabelCompleted;
        
        /// <remarks/>
        public event GetTaskedStrategyParametersByNameCompletedEventHandler GetTaskedStrategyParametersByNameCompleted;
        
        /// <remarks/>
        public event GetTaskedStrategyParametersCompletedEventHandler GetTaskedStrategyParametersCompleted;
        
        /// <remarks/>
        public event GetModelsCompletedEventHandler GetModelsCompleted;
        
        /// <remarks/>
        public event AddScoringModelCompletedEventHandler AddScoringModelCompleted;
        
        /// <remarks/>
        public event DeleteScoringModelCompletedEventHandler DeleteScoringModelCompleted;
        
        /// <remarks/>
        public event UpdateModelCompletedEventHandler UpdateModelCompleted;
        
        /// <remarks/>
        public event GetModelPmmlCompletedEventHandler GetModelPmmlCompleted;
        
        /// <remarks/>
        public event GetStrategyScheduleItemsCompletedEventHandler GetStrategyScheduleItemsCompleted;
        
        /// <remarks/>
        public event InsertStrategyScheduleItemCompletedEventHandler InsertStrategyScheduleItemCompleted;
        
        /// <remarks/>
        public event InsertStrategyScheduleItemDtoCompletedEventHandler InsertStrategyScheduleItemDtoCompleted;
        
        /// <remarks/>
        public event UpdateStrategyScheduleItemCompletedEventHandler UpdateStrategyScheduleItemCompleted;
        
        /// <remarks/>
        public event DeleteStrategyScheduleItemCompletedEventHandler DeleteStrategyScheduleItemCompleted;
        
        /// <remarks/>
        public event HasNewerStrategyVersionCompletedEventHandler HasNewerStrategyVersionCompleted;
        
        /// <remarks/>
        public event UpdateToLatestStrategyCompletedEventHandler UpdateToLatestStrategyCompleted;
        
        /// <remarks/>
        public event GetScheduledStrategyParametersByStrategyNameCompletedEventHandler GetScheduledStrategyParametersByStrategyNameCompleted;
        
        /// <remarks/>
        public event SaveScheduledStrategyParametersCompletedEventHandler SaveScheduledStrategyParametersCompleted;
        
        /// <remarks/>
        public event DeleteScheduledStrategyParametersCompletedEventHandler DeleteScheduledStrategyParametersCompleted;
        
        /// <remarks/>
        public event PauseStrategyScheduleItemCompletedEventHandler PauseStrategyScheduleItemCompleted;
        
        /// <remarks/>
        public event AppIdCompletedEventHandler AppIdCompleted;
        
        /// <remarks/>
        public event AuthServerBaseUrlCompletedEventHandler AuthServerBaseUrlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/Encrypt", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Encrypt(string data) {
            object[] results = this.Invoke("Encrypt", new object[] {
                        data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEncrypt(string data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Encrypt", new object[] {
                        data}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEncrypt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptAsync(string data) {
            this.EncryptAsync(data, null);
        }
        
        /// <remarks/>
        public void EncryptAsync(string data, object userState) {
            if ((this.EncryptOperationCompleted == null)) {
                this.EncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptOperationCompleted);
            }
            this.InvokeAsync("Encrypt", new object[] {
                        data}, this.EncryptOperationCompleted, userState);
        }
        
        private void OnEncryptOperationCompleted(object arg) {
            if ((this.EncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptCompleted(this, new EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetCreditProductList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CreditProduct[] GetCreditProductList() {
            object[] results = this.Invoke("GetCreditProductList", new object[0]);
            return ((CreditProduct[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCreditProductList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCreditProductList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CreditProduct[] EndGetCreditProductList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CreditProduct[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditProductListAsync() {
            this.GetCreditProductListAsync(null);
        }
        
        /// <remarks/>
        public void GetCreditProductListAsync(object userState) {
            if ((this.GetCreditProductListOperationCompleted == null)) {
                this.GetCreditProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditProductListOperationCompleted);
            }
            this.InvokeAsync("GetCreditProductList", new object[0], this.GetCreditProductListOperationCompleted, userState);
        }
        
        private void OnGetCreditProductListOperationCompleted(object arg) {
            if ((this.GetCreditProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditProductListCompleted(this, new GetCreditProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateCreditProduct", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> UpdateCreditProduct(CreditProduct product, string signedDocument) {
            object[] results = this.Invoke("UpdateCreditProduct", new object[] {
                        product,
                        signedDocument});
            return ((System.Nullable<decimal>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCreditProduct(CreditProduct product, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCreditProduct", new object[] {
                        product,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<decimal> EndUpdateCreditProduct(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<decimal>)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCreditProductAsync(CreditProduct product, string signedDocument) {
            this.UpdateCreditProductAsync(product, signedDocument, null);
        }
        
        /// <remarks/>
        public void UpdateCreditProductAsync(CreditProduct product, string signedDocument, object userState) {
            if ((this.UpdateCreditProductOperationCompleted == null)) {
                this.UpdateCreditProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCreditProductOperationCompleted);
            }
            this.InvokeAsync("UpdateCreditProduct", new object[] {
                        product,
                        signedDocument}, this.UpdateCreditProductOperationCompleted, userState);
        }
        
        private void OnUpdateCreditProductOperationCompleted(object arg) {
            if ((this.UpdateCreditProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCreditProductCompleted(this, new UpdateCreditProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteCreditProduct", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCreditProduct(CreditProduct product, string signedDocument) {
            this.Invoke("DeleteCreditProduct", new object[] {
                        product,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCreditProduct(CreditProduct product, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCreditProduct", new object[] {
                        product,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCreditProduct(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCreditProductAsync(CreditProduct product, string signedDocument) {
            this.DeleteCreditProductAsync(product, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteCreditProductAsync(CreditProduct product, string signedDocument, object userState) {
            if ((this.DeleteCreditProductOperationCompleted == null)) {
                this.DeleteCreditProductOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCreditProductOperationCompleted);
            }
            this.InvokeAsync("DeleteCreditProduct", new object[] {
                        product,
                        signedDocument}, this.DeleteCreditProductOperationCompleted, userState);
        }
        
        private void OnDeleteCreditProductOperationCompleted(object arg) {
            if ((this.DeleteCreditProductCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCreditProductCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetCpUsages", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetCpUsages(int creditProductId) {
            object[] results = this.Invoke("GetCpUsages", new object[] {
                        creditProductId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCpUsages(int creditProductId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCpUsages", new object[] {
                        creditProductId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetCpUsages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCpUsagesAsync(int creditProductId) {
            this.GetCpUsagesAsync(creditProductId, null);
        }
        
        /// <remarks/>
        public void GetCpUsagesAsync(int creditProductId, object userState) {
            if ((this.GetCpUsagesOperationCompleted == null)) {
                this.GetCpUsagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCpUsagesOperationCompleted);
            }
            this.InvokeAsync("GetCpUsages", new object[] {
                        creditProductId}, this.GetCpUsagesOperationCompleted, userState);
        }
        
        private void OnGetCpUsagesOperationCompleted(object arg) {
            if ((this.GetCpUsagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCpUsagesCompleted(this, new GetCpUsagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteCreditParam", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCreditParam(CreditProductParam param) {
            this.Invoke("DeleteCreditParam", new object[] {
                        param});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCreditParam(CreditProductParam param, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCreditParam", new object[] {
                        param}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCreditParam(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCreditParamAsync(CreditProductParam param) {
            this.DeleteCreditParamAsync(param, null);
        }
        
        /// <remarks/>
        public void DeleteCreditParamAsync(CreditProductParam param, object userState) {
            if ((this.DeleteCreditParamOperationCompleted == null)) {
                this.DeleteCreditParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCreditParamOperationCompleted);
            }
            this.InvokeAsync("DeleteCreditParam", new object[] {
                        param}, this.DeleteCreditParamOperationCompleted, userState);
        }
        
        private void OnDeleteCreditParamOperationCompleted(object arg) {
            if ((this.DeleteCreditParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCreditParamCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNodesList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExternalNode[] GetNodesList() {
            object[] results = this.Invoke("GetNodesList", new object[0]);
            return ((ExternalNode[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodesList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodesList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ExternalNode[] EndGetNodesList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExternalNode[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNodesListAsync() {
            this.GetNodesListAsync(null);
        }
        
        /// <remarks/>
        public void GetNodesListAsync(object userState) {
            if ((this.GetNodesListOperationCompleted == null)) {
                this.GetNodesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodesListOperationCompleted);
            }
            this.InvokeAsync("GetNodesList", new object[0], this.GetNodesListOperationCompleted, userState);
        }
        
        private void OnGetNodesListOperationCompleted(object arg) {
            if ((this.GetNodesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodesListCompleted(this, new GetNodesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNodeFilesForRestoreAndSave", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExternalNode GetNodeFilesForRestoreAndSave(int id) {
            object[] results = this.Invoke("GetNodeFilesForRestoreAndSave", new object[] {
                        id});
            return ((ExternalNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodeFilesForRestoreAndSave(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodeFilesForRestoreAndSave", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExternalNode EndGetNodeFilesForRestoreAndSave(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExternalNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetNodeFilesForRestoreAndSaveAsync(int id) {
            this.GetNodeFilesForRestoreAndSaveAsync(id, null);
        }
        
        /// <remarks/>
        public void GetNodeFilesForRestoreAndSaveAsync(int id, object userState) {
            if ((this.GetNodeFilesForRestoreAndSaveOperationCompleted == null)) {
                this.GetNodeFilesForRestoreAndSaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodeFilesForRestoreAndSaveOperationCompleted);
            }
            this.InvokeAsync("GetNodeFilesForRestoreAndSave", new object[] {
                        id}, this.GetNodeFilesForRestoreAndSaveOperationCompleted, userState);
        }
        
        private void OnGetNodeFilesForRestoreAndSaveOperationCompleted(object arg) {
            if ((this.GetNodeFilesForRestoreAndSaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodeFilesForRestoreAndSaveCompleted(this, new GetNodeFilesForRestoreAndSaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAvailableStrategyTypes", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAvailableStrategyTypes() {
            object[] results = this.Invoke("GetAvailableStrategyTypes", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableStrategyTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAvailableStrategyTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetAvailableStrategyTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableStrategyTypesAsync() {
            this.GetAvailableStrategyTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetAvailableStrategyTypesAsync(object userState) {
            if ((this.GetAvailableStrategyTypesOperationCompleted == null)) {
                this.GetAvailableStrategyTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableStrategyTypesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableStrategyTypes", new object[0], this.GetAvailableStrategyTypesOperationCompleted, userState);
        }
        
        private void OnGetAvailableStrategyTypesOperationCompleted(object arg) {
            if ((this.GetAvailableStrategyTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableStrategyTypesCompleted(this, new GetAvailableStrategyTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllStatuses", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Status[] GetAllStatuses() {
            object[] results = this.Invoke("GetAllStatuses", new object[0]);
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllStatuses(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllStatuses", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Status[] EndGetAllStatuses(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Status[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllStatusesAsync() {
            this.GetAllStatusesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllStatusesAsync(object userState) {
            if ((this.GetAllStatusesOperationCompleted == null)) {
                this.GetAllStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllStatusesOperationCompleted);
            }
            this.InvokeAsync("GetAllStatuses", new object[0], this.GetAllStatusesOperationCompleted, userState);
        }
        
        private void OnGetAllStatusesOperationCompleted(object arg) {
            if ((this.GetAllStatusesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllStatusesCompleted(this, new GetAllStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckStatusName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckStatusName(Status status) {
            object[] results = this.Invoke("CheckStatusName", new object[] {
                        status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckStatusName(Status status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckStatusName", new object[] {
                        status}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckStatusName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckStatusNameAsync(Status status) {
            this.CheckStatusNameAsync(status, null);
        }
        
        /// <remarks/>
        public void CheckStatusNameAsync(Status status, object userState) {
            if ((this.CheckStatusNameOperationCompleted == null)) {
                this.CheckStatusNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckStatusNameOperationCompleted);
            }
            this.InvokeAsync("CheckStatusName", new object[] {
                        status}, this.CheckStatusNameOperationCompleted, userState);
        }
        
        private void OnCheckStatusNameOperationCompleted(object arg) {
            if ((this.CheckStatusNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckStatusNameCompleted(this, new CheckStatusNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveOrUpdatesStatus", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveOrUpdatesStatus(Status status) {
            this.Invoke("SaveOrUpdatesStatus", new object[] {
                        status});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveOrUpdatesStatus(Status status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveOrUpdatesStatus", new object[] {
                        status}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveOrUpdatesStatus(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveOrUpdatesStatusAsync(Status status) {
            this.SaveOrUpdatesStatusAsync(status, null);
        }
        
        /// <remarks/>
        public void SaveOrUpdatesStatusAsync(Status status, object userState) {
            if ((this.SaveOrUpdatesStatusOperationCompleted == null)) {
                this.SaveOrUpdatesStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOrUpdatesStatusOperationCompleted);
            }
            this.InvokeAsync("SaveOrUpdatesStatus", new object[] {
                        status}, this.SaveOrUpdatesStatusOperationCompleted, userState);
        }
        
        private void OnSaveOrUpdatesStatusOperationCompleted(object arg) {
            if ((this.SaveOrUpdatesStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveOrUpdatesStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteStatus", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteStatus(int id) {
            this.Invoke("DeleteStatus", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteStatus(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteStatus", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteStatus(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteStatusAsync(int id) {
            this.DeleteStatusAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteStatusAsync(int id, object userState) {
            if ((this.DeleteStatusOperationCompleted == null)) {
                this.DeleteStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteStatusOperationCompleted);
            }
            this.InvokeAsync("DeleteStatus", new object[] {
                        id}, this.DeleteStatusOperationCompleted, userState);
        }
        
        private void OnDeleteStatusOperationCompleted(object arg) {
            if ((this.DeleteStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetMenuItemsByStatusId", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuItem[] GetMenuItemsByStatusId(int id) {
            object[] results = this.Invoke("GetMenuItemsByStatusId", new object[] {
                        id});
            return ((MenuItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMenuItemsByStatusId(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMenuItemsByStatusId", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public MenuItem[] EndGetMenuItemsByStatusId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MenuItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMenuItemsByStatusIdAsync(int id) {
            this.GetMenuItemsByStatusIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetMenuItemsByStatusIdAsync(int id, object userState) {
            if ((this.GetMenuItemsByStatusIdOperationCompleted == null)) {
                this.GetMenuItemsByStatusIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuItemsByStatusIdOperationCompleted);
            }
            this.InvokeAsync("GetMenuItemsByStatusId", new object[] {
                        id}, this.GetMenuItemsByStatusIdOperationCompleted, userState);
        }
        
        private void OnGetMenuItemsByStatusIdOperationCompleted(object arg) {
            if ((this.GetMenuItemsByStatusIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuItemsByStatusIdCompleted(this, new GetMenuItemsByStatusIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetSecurityApplications", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SecurityApplication[] GetSecurityApplications() {
            object[] results = this.Invoke("GetSecurityApplications", new object[0]);
            return ((SecurityApplication[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityApplications(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityApplications", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public SecurityApplication[] EndGetSecurityApplications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SecurityApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSecurityApplicationsAsync() {
            this.GetSecurityApplicationsAsync(null);
        }
        
        /// <remarks/>
        public void GetSecurityApplicationsAsync(object userState) {
            if ((this.GetSecurityApplicationsOperationCompleted == null)) {
                this.GetSecurityApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetSecurityApplications", new object[0], this.GetSecurityApplicationsOperationCompleted, userState);
        }
        
        private void OnGetSecurityApplicationsOperationCompleted(object arg) {
            if ((this.GetSecurityApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityApplicationsCompleted(this, new GetSecurityApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetSecurityApplicationsOfTypes", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SecurityApplication[] GetSecurityApplicationsOfTypes(SecurityApplicationType[] types) {
            object[] results = this.Invoke("GetSecurityApplicationsOfTypes", new object[] {
                        types});
            return ((SecurityApplication[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityApplicationsOfTypes(SecurityApplicationType[] types, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityApplicationsOfTypes", new object[] {
                        types}, callback, asyncState);
        }
        
        /// <remarks/>
        public SecurityApplication[] EndGetSecurityApplicationsOfTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SecurityApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSecurityApplicationsOfTypesAsync(SecurityApplicationType[] types) {
            this.GetSecurityApplicationsOfTypesAsync(types, null);
        }
        
        /// <remarks/>
        public void GetSecurityApplicationsOfTypesAsync(SecurityApplicationType[] types, object userState) {
            if ((this.GetSecurityApplicationsOfTypesOperationCompleted == null)) {
                this.GetSecurityApplicationsOfTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityApplicationsOfTypesOperationCompleted);
            }
            this.InvokeAsync("GetSecurityApplicationsOfTypes", new object[] {
                        types}, this.GetSecurityApplicationsOfTypesOperationCompleted, userState);
        }
        
        private void OnGetSecurityApplicationsOfTypesOperationCompleted(object arg) {
            if ((this.GetSecurityApplicationsOfTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityApplicationsOfTypesCompleted(this, new GetSecurityApplicationsOfTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/IncreaseMenuItemsPosition", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IncreaseMenuItemsPosition(int id) {
            this.Invoke("IncreaseMenuItemsPosition", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIncreaseMenuItemsPosition(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IncreaseMenuItemsPosition", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndIncreaseMenuItemsPosition(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void IncreaseMenuItemsPositionAsync(int id) {
            this.IncreaseMenuItemsPositionAsync(id, null);
        }
        
        /// <remarks/>
        public void IncreaseMenuItemsPositionAsync(int id, object userState) {
            if ((this.IncreaseMenuItemsPositionOperationCompleted == null)) {
                this.IncreaseMenuItemsPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncreaseMenuItemsPositionOperationCompleted);
            }
            this.InvokeAsync("IncreaseMenuItemsPosition", new object[] {
                        id}, this.IncreaseMenuItemsPositionOperationCompleted, userState);
        }
        
        private void OnIncreaseMenuItemsPositionOperationCompleted(object arg) {
            if ((this.IncreaseMenuItemsPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncreaseMenuItemsPositionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DecreaseMenuItemsPosition", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DecreaseMenuItemsPosition(int id) {
            this.Invoke("DecreaseMenuItemsPosition", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDecreaseMenuItemsPosition(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DecreaseMenuItemsPosition", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDecreaseMenuItemsPosition(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DecreaseMenuItemsPositionAsync(int id) {
            this.DecreaseMenuItemsPositionAsync(id, null);
        }
        
        /// <remarks/>
        public void DecreaseMenuItemsPositionAsync(int id, object userState) {
            if ((this.DecreaseMenuItemsPositionOperationCompleted == null)) {
                this.DecreaseMenuItemsPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecreaseMenuItemsPositionOperationCompleted);
            }
            this.InvokeAsync("DecreaseMenuItemsPosition", new object[] {
                        id}, this.DecreaseMenuItemsPositionOperationCompleted, userState);
        }
        
        private void OnDecreaseMenuItemsPositionOperationCompleted(object arg) {
            if ((this.DecreaseMenuItemsPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecreaseMenuItemsPositionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetMenuItemsBySecAppId", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuItem[] GetMenuItemsBySecAppId(int id) {
            object[] results = this.Invoke("GetMenuItemsBySecAppId", new object[] {
                        id});
            return ((MenuItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMenuItemsBySecAppId(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMenuItemsBySecAppId", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public MenuItem[] EndGetMenuItemsBySecAppId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MenuItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMenuItemsBySecAppIdAsync(int id) {
            this.GetMenuItemsBySecAppIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetMenuItemsBySecAppIdAsync(int id, object userState) {
            if ((this.GetMenuItemsBySecAppIdOperationCompleted == null)) {
                this.GetMenuItemsBySecAppIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMenuItemsBySecAppIdOperationCompleted);
            }
            this.InvokeAsync("GetMenuItemsBySecAppId", new object[] {
                        id}, this.GetMenuItemsBySecAppIdOperationCompleted, userState);
        }
        
        private void OnGetMenuItemsBySecAppIdOperationCompleted(object arg) {
            if ((this.GetMenuItemsBySecAppIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMenuItemsBySecAppIdCompleted(this, new GetMenuItemsBySecAppIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllMenuItems", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MenuItem[] GetAllMenuItems() {
            object[] results = this.Invoke("GetAllMenuItems", new object[0]);
            return ((MenuItem[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllMenuItems(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllMenuItems", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public MenuItem[] EndGetAllMenuItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MenuItem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMenuItemsAsync() {
            this.GetAllMenuItemsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllMenuItemsAsync(object userState) {
            if ((this.GetAllMenuItemsOperationCompleted == null)) {
                this.GetAllMenuItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMenuItemsOperationCompleted);
            }
            this.InvokeAsync("GetAllMenuItems", new object[0], this.GetAllMenuItemsOperationCompleted, userState);
        }
        
        private void OnGetAllMenuItemsOperationCompleted(object arg) {
            if ((this.GetAllMenuItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMenuItemsCompleted(this, new GetAllMenuItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckMenuItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckMenuItem(MenuItem mi) {
            object[] results = this.Invoke("CheckMenuItem", new object[] {
                        mi});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckMenuItem(MenuItem mi, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckMenuItem", new object[] {
                        mi}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckMenuItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckMenuItemAsync(MenuItem mi) {
            this.CheckMenuItemAsync(mi, null);
        }
        
        /// <remarks/>
        public void CheckMenuItemAsync(MenuItem mi, object userState) {
            if ((this.CheckMenuItemOperationCompleted == null)) {
                this.CheckMenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMenuItemOperationCompleted);
            }
            this.InvokeAsync("CheckMenuItem", new object[] {
                        mi}, this.CheckMenuItemOperationCompleted, userState);
        }
        
        private void OnCheckMenuItemOperationCompleted(object arg) {
            if ((this.CheckMenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMenuItemCompleted(this, new CheckMenuItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveOrUpdateMenuItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveOrUpdateMenuItem(MenuItem mi) {
            this.Invoke("SaveOrUpdateMenuItem", new object[] {
                        mi});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveOrUpdateMenuItem(MenuItem mi, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveOrUpdateMenuItem", new object[] {
                        mi}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveOrUpdateMenuItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveOrUpdateMenuItemAsync(MenuItem mi) {
            this.SaveOrUpdateMenuItemAsync(mi, null);
        }
        
        /// <remarks/>
        public void SaveOrUpdateMenuItemAsync(MenuItem mi, object userState) {
            if ((this.SaveOrUpdateMenuItemOperationCompleted == null)) {
                this.SaveOrUpdateMenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOrUpdateMenuItemOperationCompleted);
            }
            this.InvokeAsync("SaveOrUpdateMenuItem", new object[] {
                        mi}, this.SaveOrUpdateMenuItemOperationCompleted, userState);
        }
        
        private void OnSaveOrUpdateMenuItemOperationCompleted(object arg) {
            if ((this.SaveOrUpdateMenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveOrUpdateMenuItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteMenuItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMenuItem(int id) {
            this.Invoke("DeleteMenuItem", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMenuItem(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMenuItem", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteMenuItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteMenuItemAsync(int id) {
            this.DeleteMenuItemAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteMenuItemAsync(int id, object userState) {
            if ((this.DeleteMenuItemOperationCompleted == null)) {
                this.DeleteMenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMenuItemOperationCompleted);
            }
            this.InvokeAsync("DeleteMenuItem", new object[] {
                        id}, this.DeleteMenuItemOperationCompleted, userState);
        }
        
        private void OnDeleteMenuItemOperationCompleted(object arg) {
            if ((this.DeleteMenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMenuItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckSecurityApplicationName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckSecurityApplicationName(SecurityApplication app) {
            object[] results = this.Invoke("CheckSecurityApplicationName", new object[] {
                        app});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckSecurityApplicationName(SecurityApplication app, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckSecurityApplicationName", new object[] {
                        app}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckSecurityApplicationName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckSecurityApplicationNameAsync(SecurityApplication app) {
            this.CheckSecurityApplicationNameAsync(app, null);
        }
        
        /// <remarks/>
        public void CheckSecurityApplicationNameAsync(SecurityApplication app, object userState) {
            if ((this.CheckSecurityApplicationNameOperationCompleted == null)) {
                this.CheckSecurityApplicationNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSecurityApplicationNameOperationCompleted);
            }
            this.InvokeAsync("CheckSecurityApplicationName", new object[] {
                        app}, this.CheckSecurityApplicationNameOperationCompleted, userState);
        }
        
        private void OnCheckSecurityApplicationNameOperationCompleted(object arg) {
            if ((this.CheckSecurityApplicationNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSecurityApplicationNameCompleted(this, new CheckSecurityApplicationNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveOrUpdateSecurityApplication", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveOrUpdateSecurityApplication(SecurityApplication app) {
            this.Invoke("SaveOrUpdateSecurityApplication", new object[] {
                        app});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveOrUpdateSecurityApplication(SecurityApplication app, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveOrUpdateSecurityApplication", new object[] {
                        app}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveOrUpdateSecurityApplication(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveOrUpdateSecurityApplicationAsync(SecurityApplication app) {
            this.SaveOrUpdateSecurityApplicationAsync(app, null);
        }
        
        /// <remarks/>
        public void SaveOrUpdateSecurityApplicationAsync(SecurityApplication app, object userState) {
            if ((this.SaveOrUpdateSecurityApplicationOperationCompleted == null)) {
                this.SaveOrUpdateSecurityApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOrUpdateSecurityApplicationOperationCompleted);
            }
            this.InvokeAsync("SaveOrUpdateSecurityApplication", new object[] {
                        app}, this.SaveOrUpdateSecurityApplicationOperationCompleted, userState);
        }
        
        private void OnSaveOrUpdateSecurityApplicationOperationCompleted(object arg) {
            if ((this.SaveOrUpdateSecurityApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveOrUpdateSecurityApplicationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteSecurityApplication", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSecurityApplication(int id) {
            this.Invoke("DeleteSecurityApplication", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecurityApplication(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSecurityApplication", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteSecurityApplication(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteSecurityApplicationAsync(int id) {
            this.DeleteSecurityApplicationAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteSecurityApplicationAsync(int id, object userState) {
            if ((this.DeleteSecurityApplicationOperationCompleted == null)) {
                this.DeleteSecurityApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecurityApplicationOperationCompleted);
            }
            this.InvokeAsync("DeleteSecurityApplication", new object[] {
                        id}, this.DeleteSecurityApplicationOperationCompleted, userState);
        }
        
        private void OnDeleteSecurityApplicationOperationCompleted(object arg) {
            if ((this.DeleteSecurityApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecurityApplicationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetApplicationsContainingMenuItems", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SecurityApplication[] GetApplicationsContainingMenuItems(int[] ids) {
            object[] results = this.Invoke("GetApplicationsContainingMenuItems", new object[] {
                        ids});
            return ((SecurityApplication[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationsContainingMenuItems(int[] ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetApplicationsContainingMenuItems", new object[] {
                        ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public SecurityApplication[] EndGetApplicationsContainingMenuItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SecurityApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationsContainingMenuItemsAsync(int[] ids) {
            this.GetApplicationsContainingMenuItemsAsync(ids, null);
        }
        
        /// <remarks/>
        public void GetApplicationsContainingMenuItemsAsync(int[] ids, object userState) {
            if ((this.GetApplicationsContainingMenuItemsOperationCompleted == null)) {
                this.GetApplicationsContainingMenuItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationsContainingMenuItemsOperationCompleted);
            }
            this.InvokeAsync("GetApplicationsContainingMenuItems", new object[] {
                        ids}, this.GetApplicationsContainingMenuItemsOperationCompleted, userState);
        }
        
        private void OnGetApplicationsContainingMenuItemsOperationCompleted(object arg) {
            if ((this.GetApplicationsContainingMenuItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationsContainingMenuItemsCompleted(this, new GetApplicationsContainingMenuItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyListByType", RequestNamespace = "ScortoPatron", ResponseNamespace = "ScortoPatron", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExtStrategy[] GetStrategyListByType(string strategyType, bool distinct) {
            object[] results = this.Invoke("GetStrategyListByType", new object[] {
                        strategyType,
                        distinct});
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyListByType(string strategyType, bool distinct, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyListByType", new object[] {
                        strategyType,
                        distinct}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExtStrategy[] EndGetStrategyListByType(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyListByTypeAsync(string strategyType, bool distinct) {
            this.GetStrategyListByTypeAsync(strategyType, distinct, null);
        }
        
        /// <remarks/>
        public void GetStrategyListByTypeAsync(string strategyType, bool distinct, object userState) {
            if ((this.GetStrategyListByTypeOperationCompleted == null)) {
                this.GetStrategyListByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyListByTypeOperationCompleted);
            }
            this.InvokeAsync("GetStrategyListByType", new object[] {
                        strategyType,
                        distinct}, this.GetStrategyListByTypeOperationCompleted, userState);
        }
        
        private void OnGetStrategyListByTypeOperationCompleted(object arg) {
            if ((this.GetStrategyListByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyListByTypeCompleted(this, new GetStrategyListByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/RunBehavioralStrategy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long RunBehavioralStrategy(int strategyId) {
            object[] results = this.Invoke("RunBehavioralStrategy", new object[] {
                        strategyId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRunBehavioralStrategy(int strategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RunBehavioralStrategy", new object[] {
                        strategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndRunBehavioralStrategy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void RunBehavioralStrategyAsync(int strategyId) {
            this.RunBehavioralStrategyAsync(strategyId, null);
        }
        
        /// <remarks/>
        public void RunBehavioralStrategyAsync(int strategyId, object userState) {
            if ((this.RunBehavioralStrategyOperationCompleted == null)) {
                this.RunBehavioralStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunBehavioralStrategyOperationCompleted);
            }
            this.InvokeAsync("RunBehavioralStrategy", new object[] {
                        strategyId}, this.RunBehavioralStrategyOperationCompleted, userState);
        }
        
        private void OnRunBehavioralStrategyOperationCompleted(object arg) {
            if ((this.RunBehavioralStrategyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunBehavioralStrategyCompleted(this, new RunBehavioralStrategyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/RunStrategyWithParams", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long RunStrategyWithParams(int strategyId, StrategyParameterStub[] parameters) {
            object[] results = this.Invoke("RunStrategyWithParams", new object[] {
                        strategyId,
                        parameters});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRunStrategyWithParams(int strategyId, StrategyParameterStub[] parameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RunStrategyWithParams", new object[] {
                        strategyId,
                        parameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndRunStrategyWithParams(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void RunStrategyWithParamsAsync(int strategyId, StrategyParameterStub[] parameters) {
            this.RunStrategyWithParamsAsync(strategyId, parameters, null);
        }
        
        /// <remarks/>
        public void RunStrategyWithParamsAsync(int strategyId, StrategyParameterStub[] parameters, object userState) {
            if ((this.RunStrategyWithParamsOperationCompleted == null)) {
                this.RunStrategyWithParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunStrategyWithParamsOperationCompleted);
            }
            this.InvokeAsync("RunStrategyWithParams", new object[] {
                        strategyId,
                        parameters}, this.RunStrategyWithParamsOperationCompleted, userState);
        }
        
        private void OnRunStrategyWithParamsOperationCompleted(object arg) {
            if ((this.RunStrategyWithParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunStrategyWithParamsCompleted(this, new RunStrategyWithParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNextScheduledRun", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetNextScheduledRun(int strategyId) {
            object[] results = this.Invoke("GetNextScheduledRun", new object[] {
                        strategyId});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNextScheduledRun(int strategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNextScheduledRun", new object[] {
                        strategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetNextScheduledRun(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextScheduledRunAsync(int strategyId) {
            this.GetNextScheduledRunAsync(strategyId, null);
        }
        
        /// <remarks/>
        public void GetNextScheduledRunAsync(int strategyId, object userState) {
            if ((this.GetNextScheduledRunOperationCompleted == null)) {
                this.GetNextScheduledRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextScheduledRunOperationCompleted);
            }
            this.InvokeAsync("GetNextScheduledRun", new object[] {
                        strategyId}, this.GetNextScheduledRunOperationCompleted, userState);
        }
        
        private void OnGetNextScheduledRunOperationCompleted(object arg) {
            if ((this.GetNextScheduledRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextScheduledRunCompleted(this, new GetNextScheduledRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetScheduleItemsCount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetScheduleItemsCount(int strategyId) {
            object[] results = this.Invoke("GetScheduleItemsCount", new object[] {
                        strategyId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScheduleItemsCount(int strategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScheduleItemsCount", new object[] {
                        strategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetScheduleItemsCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetScheduleItemsCountAsync(int strategyId) {
            this.GetScheduleItemsCountAsync(strategyId, null);
        }
        
        /// <remarks/>
        public void GetScheduleItemsCountAsync(int strategyId, object userState) {
            if ((this.GetScheduleItemsCountOperationCompleted == null)) {
                this.GetScheduleItemsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduleItemsCountOperationCompleted);
            }
            this.InvokeAsync("GetScheduleItemsCount", new object[] {
                        strategyId}, this.GetScheduleItemsCountOperationCompleted, userState);
        }
        
        private void OnGetScheduleItemsCountOperationCompleted(object arg) {
            if ((this.GetScheduleItemsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduleItemsCountCompleted(this, new GetScheduleItemsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBehavioralReportsAll", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BehavioralReport[] GetBehavioralReportsAll() {
            object[] results = this.Invoke("GetBehavioralReportsAll", new object[0]);
            return ((BehavioralReport[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBehavioralReportsAll(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBehavioralReportsAll", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public BehavioralReport[] EndGetBehavioralReportsAll(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BehavioralReport[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBehavioralReportsAllAsync() {
            this.GetBehavioralReportsAllAsync(null);
        }
        
        /// <remarks/>
        public void GetBehavioralReportsAllAsync(object userState) {
            if ((this.GetBehavioralReportsAllOperationCompleted == null)) {
                this.GetBehavioralReportsAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBehavioralReportsAllOperationCompleted);
            }
            this.InvokeAsync("GetBehavioralReportsAll", new object[0], this.GetBehavioralReportsAllOperationCompleted, userState);
        }
        
        private void OnGetBehavioralReportsAllOperationCompleted(object arg) {
            if ((this.GetBehavioralReportsAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBehavioralReportsAllCompleted(this, new GetBehavioralReportsAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBehavioralReports", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BehavioralReport[] GetBehavioralReports(System.DateTime startDate, System.DateTime endDate, long reportTypeId, string strategyName, long strategyRunMode) {
            object[] results = this.Invoke("GetBehavioralReports", new object[] {
                        startDate,
                        endDate,
                        reportTypeId,
                        strategyName,
                        strategyRunMode});
            return ((BehavioralReport[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBehavioralReports(System.DateTime startDate, System.DateTime endDate, long reportTypeId, string strategyName, long strategyRunMode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBehavioralReports", new object[] {
                        startDate,
                        endDate,
                        reportTypeId,
                        strategyName,
                        strategyRunMode}, callback, asyncState);
        }
        
        /// <remarks/>
        public BehavioralReport[] EndGetBehavioralReports(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BehavioralReport[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBehavioralReportsAsync(System.DateTime startDate, System.DateTime endDate, long reportTypeId, string strategyName, long strategyRunMode) {
            this.GetBehavioralReportsAsync(startDate, endDate, reportTypeId, strategyName, strategyRunMode, null);
        }
        
        /// <remarks/>
        public void GetBehavioralReportsAsync(System.DateTime startDate, System.DateTime endDate, long reportTypeId, string strategyName, long strategyRunMode, object userState) {
            if ((this.GetBehavioralReportsOperationCompleted == null)) {
                this.GetBehavioralReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBehavioralReportsOperationCompleted);
            }
            this.InvokeAsync("GetBehavioralReports", new object[] {
                        startDate,
                        endDate,
                        reportTypeId,
                        strategyName,
                        strategyRunMode}, this.GetBehavioralReportsOperationCompleted, userState);
        }
        
        private void OnGetBehavioralReportsOperationCompleted(object arg) {
            if ((this.GetBehavioralReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBehavioralReportsCompleted(this, new GetBehavioralReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetReportTypes", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BehavioralReportType[] GetReportTypes() {
            object[] results = this.Invoke("GetReportTypes", new object[0]);
            return ((BehavioralReportType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReportTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReportTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public BehavioralReportType[] EndGetReportTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BehavioralReportType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReportTypesAsync() {
            this.GetReportTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetReportTypesAsync(object userState) {
            if ((this.GetReportTypesOperationCompleted == null)) {
                this.GetReportTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportTypesOperationCompleted);
            }
            this.InvokeAsync("GetReportTypes", new object[0], this.GetReportTypesOperationCompleted, userState);
        }
        
        private void OnGetReportTypesOperationCompleted(object arg) {
            if ((this.GetReportTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportTypesCompleted(this, new GetReportTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBehavioralReportFileName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBehavioralReportFileName(long reportId, out long fileSize) {
            object[] results = this.Invoke("GetBehavioralReportFileName", new object[] {
                        reportId});
            fileSize = ((long)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBehavioralReportFileName(long reportId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBehavioralReportFileName", new object[] {
                        reportId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetBehavioralReportFileName(System.IAsyncResult asyncResult, out long fileSize) {
            object[] results = this.EndInvoke(asyncResult);
            fileSize = ((long)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBehavioralReportFileNameAsync(long reportId) {
            this.GetBehavioralReportFileNameAsync(reportId, null);
        }
        
        /// <remarks/>
        public void GetBehavioralReportFileNameAsync(long reportId, object userState) {
            if ((this.GetBehavioralReportFileNameOperationCompleted == null)) {
                this.GetBehavioralReportFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBehavioralReportFileNameOperationCompleted);
            }
            this.InvokeAsync("GetBehavioralReportFileName", new object[] {
                        reportId}, this.GetBehavioralReportFileNameOperationCompleted, userState);
        }
        
        private void OnGetBehavioralReportFileNameOperationCompleted(object arg) {
            if ((this.GetBehavioralReportFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBehavioralReportFileNameCompleted(this, new GetBehavioralReportFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBehavioralReportFullPath", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBehavioralReportFullPath(long reportId, out long fileSize) {
            object[] results = this.Invoke("GetBehavioralReportFullPath", new object[] {
                        reportId});
            fileSize = ((long)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBehavioralReportFullPath(long reportId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBehavioralReportFullPath", new object[] {
                        reportId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetBehavioralReportFullPath(System.IAsyncResult asyncResult, out long fileSize) {
            object[] results = this.EndInvoke(asyncResult);
            fileSize = ((long)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBehavioralReportFullPathAsync(long reportId) {
            this.GetBehavioralReportFullPathAsync(reportId, null);
        }
        
        /// <remarks/>
        public void GetBehavioralReportFullPathAsync(long reportId, object userState) {
            if ((this.GetBehavioralReportFullPathOperationCompleted == null)) {
                this.GetBehavioralReportFullPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBehavioralReportFullPathOperationCompleted);
            }
            this.InvokeAsync("GetBehavioralReportFullPath", new object[] {
                        reportId}, this.GetBehavioralReportFullPathOperationCompleted, userState);
        }
        
        private void OnGetBehavioralReportFullPathOperationCompleted(object arg) {
            if ((this.GetBehavioralReportFullPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBehavioralReportFullPathCompleted(this, new GetBehavioralReportFullPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DownloadBehavioralReport", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadBehavioralReport(long reportId) {
            object[] results = this.Invoke("DownloadBehavioralReport", new object[] {
                        reportId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownloadBehavioralReport(long reportId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadBehavioralReport", new object[] {
                        reportId}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndDownloadBehavioralReport(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadBehavioralReportAsync(long reportId) {
            this.DownloadBehavioralReportAsync(reportId, null);
        }
        
        /// <remarks/>
        public void DownloadBehavioralReportAsync(long reportId, object userState) {
            if ((this.DownloadBehavioralReportOperationCompleted == null)) {
                this.DownloadBehavioralReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadBehavioralReportOperationCompleted);
            }
            this.InvokeAsync("DownloadBehavioralReport", new object[] {
                        reportId}, this.DownloadBehavioralReportOperationCompleted, userState);
        }
        
        private void OnDownloadBehavioralReportOperationCompleted(object arg) {
            if ((this.DownloadBehavioralReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadBehavioralReportCompleted(this, new DownloadBehavioralReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DownloadBehavioralReportUncompressed", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadBehavioralReportUncompressed(long reportId) {
            object[] results = this.Invoke("DownloadBehavioralReportUncompressed", new object[] {
                        reportId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownloadBehavioralReportUncompressed(long reportId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadBehavioralReportUncompressed", new object[] {
                        reportId}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndDownloadBehavioralReportUncompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadBehavioralReportUncompressedAsync(long reportId) {
            this.DownloadBehavioralReportUncompressedAsync(reportId, null);
        }
        
        /// <remarks/>
        public void DownloadBehavioralReportUncompressedAsync(long reportId, object userState) {
            if ((this.DownloadBehavioralReportUncompressedOperationCompleted == null)) {
                this.DownloadBehavioralReportUncompressedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadBehavioralReportUncompressedOperationCompleted);
            }
            this.InvokeAsync("DownloadBehavioralReportUncompressed", new object[] {
                        reportId}, this.DownloadBehavioralReportUncompressedOperationCompleted, userState);
        }
        
        private void OnDownloadBehavioralReportUncompressedOperationCompleted(object arg) {
            if ((this.DownloadBehavioralReportUncompressedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadBehavioralReportUncompressedCompleted(this, new DownloadBehavioralReportUncompressedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBehavioralStrategiesList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExtStrategy[] GetBehavioralStrategiesList() {
            object[] results = this.Invoke("GetBehavioralStrategiesList", new object[0]);
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBehavioralStrategiesList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBehavioralStrategiesList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ExtStrategy[] EndGetBehavioralStrategiesList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBehavioralStrategiesListAsync() {
            this.GetBehavioralStrategiesListAsync(null);
        }
        
        /// <remarks/>
        public void GetBehavioralStrategiesListAsync(object userState) {
            if ((this.GetBehavioralStrategiesListOperationCompleted == null)) {
                this.GetBehavioralStrategiesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBehavioralStrategiesListOperationCompleted);
            }
            this.InvokeAsync("GetBehavioralStrategiesList", new object[0], this.GetBehavioralStrategiesListOperationCompleted, userState);
        }
        
        private void OnGetBehavioralStrategiesListOperationCompleted(object arg) {
            if ((this.GetBehavioralStrategiesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBehavioralStrategiesListCompleted(this, new GetBehavioralStrategiesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTemplates", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Template[] GetTemplates() {
            object[] results = this.Invoke("GetTemplates", new object[0]);
            return ((Template[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTemplates(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTemplates", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Template[] EndGetTemplates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Template[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplatesAsync() {
            this.GetTemplatesAsync(null);
        }
        
        /// <remarks/>
        public void GetTemplatesAsync(object userState) {
            if ((this.GetTemplatesOperationCompleted == null)) {
                this.GetTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplatesOperationCompleted);
            }
            this.InvokeAsync("GetTemplates", new object[0], this.GetTemplatesOperationCompleted, userState);
        }
        
        private void OnGetTemplatesOperationCompleted(object arg) {
            if ((this.GetTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplatesCompleted(this, new GetTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateTemplate", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Template UpdateTemplate(Template template, string signedDocument, long transactionId) {
            object[] results = this.Invoke("UpdateTemplate", new object[] {
                        template,
                        signedDocument,
                        transactionId});
            return ((Template)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateTemplate(Template template, string signedDocument, long transactionId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateTemplate", new object[] {
                        template,
                        signedDocument,
                        transactionId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Template EndUpdateTemplate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Template)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTemplateAsync(Template template, string signedDocument, long transactionId) {
            this.UpdateTemplateAsync(template, signedDocument, transactionId, null);
        }
        
        /// <remarks/>
        public void UpdateTemplateAsync(Template template, string signedDocument, long transactionId, object userState) {
            if ((this.UpdateTemplateOperationCompleted == null)) {
                this.UpdateTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTemplateOperationCompleted);
            }
            this.InvokeAsync("UpdateTemplate", new object[] {
                        template,
                        signedDocument,
                        transactionId}, this.UpdateTemplateOperationCompleted, userState);
        }
        
        private void OnUpdateTemplateOperationCompleted(object arg) {
            if ((this.UpdateTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTemplateCompleted(this, new UpdateTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteTemplate", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTemplate(Template template, string signedDocument) {
            this.Invoke("DeleteTemplate", new object[] {
                        template,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteTemplate(Template template, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteTemplate", new object[] {
                        template,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteTemplate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteTemplateAsync(Template template, string signedDocument) {
            this.DeleteTemplateAsync(template, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteTemplateAsync(Template template, string signedDocument, object userState) {
            if ((this.DeleteTemplateOperationCompleted == null)) {
                this.DeleteTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTemplateOperationCompleted);
            }
            this.InvokeAsync("DeleteTemplate", new object[] {
                        template,
                        signedDocument}, this.DeleteTemplateOperationCompleted, userState);
        }
        
        private void OnDeleteTemplateOperationCompleted(object arg) {
            if ((this.DeleteTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTemplateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTemplateLinks", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TemplateLink[] GetTemplateLinks(int nodeId, bool isShowHistory) {
            object[] results = this.Invoke("GetTemplateLinks", new object[] {
                        nodeId,
                        isShowHistory});
            return ((TemplateLink[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTemplateLinks(int nodeId, bool isShowHistory, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTemplateLinks", new object[] {
                        nodeId,
                        isShowHistory}, callback, asyncState);
        }
        
        /// <remarks/>
        public TemplateLink[] EndGetTemplateLinks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TemplateLink[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplateLinksAsync(int nodeId, bool isShowHistory) {
            this.GetTemplateLinksAsync(nodeId, isShowHistory, null);
        }
        
        /// <remarks/>
        public void GetTemplateLinksAsync(int nodeId, bool isShowHistory, object userState) {
            if ((this.GetTemplateLinksOperationCompleted == null)) {
                this.GetTemplateLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplateLinksOperationCompleted);
            }
            this.InvokeAsync("GetTemplateLinks", new object[] {
                        nodeId,
                        isShowHistory}, this.GetTemplateLinksOperationCompleted, userState);
        }
        
        private void OnGetTemplateLinksOperationCompleted(object arg) {
            if ((this.GetTemplateLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplateLinksCompleted(this, new GetTemplateLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNodeTemplateLinks", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TemplateLink[] GetNodeTemplateLinks(int templateId) {
            object[] results = this.Invoke("GetNodeTemplateLinks", new object[] {
                        templateId});
            return ((TemplateLink[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodeTemplateLinks(int templateId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodeTemplateLinks", new object[] {
                        templateId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TemplateLink[] EndGetNodeTemplateLinks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TemplateLink[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNodeTemplateLinksAsync(int templateId) {
            this.GetNodeTemplateLinksAsync(templateId, null);
        }
        
        /// <remarks/>
        public void GetNodeTemplateLinksAsync(int templateId, object userState) {
            if ((this.GetNodeTemplateLinksOperationCompleted == null)) {
                this.GetNodeTemplateLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodeTemplateLinksOperationCompleted);
            }
            this.InvokeAsync("GetNodeTemplateLinks", new object[] {
                        templateId}, this.GetNodeTemplateLinksOperationCompleted, userState);
        }
        
        private void OnGetNodeTemplateLinksOperationCompleted(object arg) {
            if ((this.GetNodeTemplateLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodeTemplateLinksCompleted(this, new GetNodeTemplateLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateTemplateLinks", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTemplateLinks(TemplateLink[] links) {
            this.Invoke("UpdateTemplateLinks", new object[] {
                        links});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateTemplateLinks(TemplateLink[] links, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateTemplateLinks", new object[] {
                        links}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateTemplateLinks(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateTemplateLinksAsync(TemplateLink[] links) {
            this.UpdateTemplateLinksAsync(links, null);
        }
        
        /// <remarks/>
        public void UpdateTemplateLinksAsync(TemplateLink[] links, object userState) {
            if ((this.UpdateTemplateLinksOperationCompleted == null)) {
                this.UpdateTemplateLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTemplateLinksOperationCompleted);
            }
            this.InvokeAsync("UpdateTemplateLinks", new object[] {
                        links}, this.UpdateTemplateLinksOperationCompleted, userState);
        }
        
        private void OnUpdateTemplateLinksOperationCompleted(object arg) {
            if ((this.UpdateTemplateLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTemplateLinksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DownloadTemplate", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Template DownloadTemplate(Template source) {
            object[] results = this.Invoke("DownloadTemplate", new object[] {
                        source});
            return ((Template)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownloadTemplate(Template source, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadTemplate", new object[] {
                        source}, callback, asyncState);
        }
        
        /// <remarks/>
        public Template EndDownloadTemplate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Template)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTemplateAsync(Template source) {
            this.DownloadTemplateAsync(source, null);
        }
        
        /// <remarks/>
        public void DownloadTemplateAsync(Template source, object userState) {
            if ((this.DownloadTemplateOperationCompleted == null)) {
                this.DownloadTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTemplateOperationCompleted);
            }
            this.InvokeAsync("DownloadTemplate", new object[] {
                        source}, this.DownloadTemplateOperationCompleted, userState);
        }
        
        private void OnDownloadTemplateOperationCompleted(object arg) {
            if ((this.DownloadTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTemplateCompleted(this, new DownloadTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DownloadTemplateByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Template DownloadTemplateByName(string name) {
            object[] results = this.Invoke("DownloadTemplateByName", new object[] {
                        name});
            return ((Template)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDownloadTemplateByName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DownloadTemplateByName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public Template EndDownloadTemplateByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Template)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTemplateByNameAsync(string name) {
            this.DownloadTemplateByNameAsync(name, null);
        }
        
        /// <remarks/>
        public void DownloadTemplateByNameAsync(string name, object userState) {
            if ((this.DownloadTemplateByNameOperationCompleted == null)) {
                this.DownloadTemplateByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTemplateByNameOperationCompleted);
            }
            this.InvokeAsync("DownloadTemplateByName", new object[] {
                        name}, this.DownloadTemplateByNameOperationCompleted, userState);
        }
        
        private void OnDownloadTemplateByNameOperationCompleted(object arg) {
            if ((this.DownloadTemplateByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTemplateByNameCompleted(this, new DownloadTemplateByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetEntityLinks", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetEntityLinks([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> entitySeriaId, string entityType) {
            object[] results = this.Invoke("GetEntityLinks", new object[] {
                        entitySeriaId,
                        entityType});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntityLinks(System.Nullable<int> entitySeriaId, string entityType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntityLinks", new object[] {
                        entitySeriaId,
                        entityType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetEntityLinks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEntityLinksAsync(System.Nullable<int> entitySeriaId, string entityType) {
            this.GetEntityLinksAsync(entitySeriaId, entityType, null);
        }
        
        /// <remarks/>
        public void GetEntityLinksAsync(System.Nullable<int> entitySeriaId, string entityType, object userState) {
            if ((this.GetEntityLinksOperationCompleted == null)) {
                this.GetEntityLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEntityLinksOperationCompleted);
            }
            this.InvokeAsync("GetEntityLinks", new object[] {
                        entitySeriaId,
                        entityType}, this.GetEntityLinksOperationCompleted, userState);
        }
        
        private void OnGetEntityLinksOperationCompleted(object arg) {
            if ((this.GetEntityLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEntityLinksCompleted(this, new GetEntityLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetExportTemplateLink", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExportTemplateLink(int entityId, string entityType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<bool> isApproved) {
            object[] results = this.Invoke("GetExportTemplateLink", new object[] {
                        entityId,
                        entityType,
                        isApproved});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExportTemplateLink(int entityId, string entityType, System.Nullable<bool> isApproved, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExportTemplateLink", new object[] {
                        entityId,
                        entityType,
                        isApproved}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetExportTemplateLink(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExportTemplateLinkAsync(int entityId, string entityType, System.Nullable<bool> isApproved) {
            this.GetExportTemplateLinkAsync(entityId, entityType, isApproved, null);
        }
        
        /// <remarks/>
        public void GetExportTemplateLinkAsync(int entityId, string entityType, System.Nullable<bool> isApproved, object userState) {
            if ((this.GetExportTemplateLinkOperationCompleted == null)) {
                this.GetExportTemplateLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExportTemplateLinkOperationCompleted);
            }
            this.InvokeAsync("GetExportTemplateLink", new object[] {
                        entityId,
                        entityType,
                        isApproved}, this.GetExportTemplateLinkOperationCompleted, userState);
        }
        
        private void OnGetExportTemplateLinkOperationCompleted(object arg) {
            if ((this.GetExportTemplateLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExportTemplateLinkCompleted(this, new GetExportTemplateLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/ApproveLinksBySourceId", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ApproveLinksBySourceId(int entityId, string entityType, bool isApproved) {
            this.Invoke("ApproveLinksBySourceId", new object[] {
                        entityId,
                        entityType,
                        isApproved});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginApproveLinksBySourceId(int entityId, string entityType, bool isApproved, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ApproveLinksBySourceId", new object[] {
                        entityId,
                        entityType,
                        isApproved}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndApproveLinksBySourceId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ApproveLinksBySourceIdAsync(int entityId, string entityType, bool isApproved) {
            this.ApproveLinksBySourceIdAsync(entityId, entityType, isApproved, null);
        }
        
        /// <remarks/>
        public void ApproveLinksBySourceIdAsync(int entityId, string entityType, bool isApproved, object userState) {
            if ((this.ApproveLinksBySourceIdOperationCompleted == null)) {
                this.ApproveLinksBySourceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApproveLinksBySourceIdOperationCompleted);
            }
            this.InvokeAsync("ApproveLinksBySourceId", new object[] {
                        entityId,
                        entityType,
                        isApproved}, this.ApproveLinksBySourceIdOperationCompleted, userState);
        }
        
        private void OnApproveLinksBySourceIdOperationCompleted(object arg) {
            if ((this.ApproveLinksBySourceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApproveLinksBySourceIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteLinksBySourceId", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLinksBySourceId(int linkedFrom, string entityType) {
            this.Invoke("DeleteLinksBySourceId", new object[] {
                        linkedFrom,
                        entityType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteLinksBySourceId(int linkedFrom, string entityType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteLinksBySourceId", new object[] {
                        linkedFrom,
                        entityType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteLinksBySourceId(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteLinksBySourceIdAsync(int linkedFrom, string entityType) {
            this.DeleteLinksBySourceIdAsync(linkedFrom, entityType, null);
        }
        
        /// <remarks/>
        public void DeleteLinksBySourceIdAsync(int linkedFrom, string entityType, object userState) {
            if ((this.DeleteLinksBySourceIdOperationCompleted == null)) {
                this.DeleteLinksBySourceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLinksBySourceIdOperationCompleted);
            }
            this.InvokeAsync("DeleteLinksBySourceId", new object[] {
                        linkedFrom,
                        entityType}, this.DeleteLinksBySourceIdOperationCompleted, userState);
        }
        
        private void OnDeleteLinksBySourceIdOperationCompleted(object arg) {
            if ((this.DeleteLinksBySourceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLinksBySourceIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/AddLink", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddLink(int templateId, string entityType, int linkedFrom, string body, string sign) {
            this.Invoke("AddLink", new object[] {
                        templateId,
                        entityType,
                        linkedFrom,
                        body,
                        sign});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLink(int templateId, string entityType, int linkedFrom, string body, string sign, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLink", new object[] {
                        templateId,
                        entityType,
                        linkedFrom,
                        body,
                        sign}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddLink(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddLinkAsync(int templateId, string entityType, int linkedFrom, string body, string sign) {
            this.AddLinkAsync(templateId, entityType, linkedFrom, body, sign, null);
        }
        
        /// <remarks/>
        public void AddLinkAsync(int templateId, string entityType, int linkedFrom, string body, string sign, object userState) {
            if ((this.AddLinkOperationCompleted == null)) {
                this.AddLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLinkOperationCompleted);
            }
            this.InvokeAsync("AddLink", new object[] {
                        templateId,
                        entityType,
                        linkedFrom,
                        body,
                        sign}, this.AddLinkOperationCompleted, userState);
        }
        
        private void OnAddLinkOperationCompleted(object arg) {
            if ((this.AddLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLinkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyNamesForExportTemplate", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStrategyNamesForExportTemplate(int id) {
            object[] results = this.Invoke("GetStrategyNamesForExportTemplate", new object[] {
                        id});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyNamesForExportTemplate(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyNamesForExportTemplate", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetStrategyNamesForExportTemplate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyNamesForExportTemplateAsync(int id) {
            this.GetStrategyNamesForExportTemplateAsync(id, null);
        }
        
        /// <remarks/>
        public void GetStrategyNamesForExportTemplateAsync(int id, object userState) {
            if ((this.GetStrategyNamesForExportTemplateOperationCompleted == null)) {
                this.GetStrategyNamesForExportTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyNamesForExportTemplateOperationCompleted);
            }
            this.InvokeAsync("GetStrategyNamesForExportTemplate", new object[] {
                        id}, this.GetStrategyNamesForExportTemplateOperationCompleted, userState);
        }
        
        private void OnGetStrategyNamesForExportTemplateOperationCompleted(object arg) {
            if ((this.GetStrategyNamesForExportTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyNamesForExportTemplateCompleted(this, new GetStrategyNamesForExportTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBusinessEntities", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BusinessEntityDto[] GetBusinessEntities() {
            object[] results = this.Invoke("GetBusinessEntities", new object[0]);
            return ((BusinessEntityDto[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessEntities(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessEntities", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public BusinessEntityDto[] EndGetBusinessEntities(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BusinessEntityDto[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessEntitiesAsync() {
            this.GetBusinessEntitiesAsync(null);
        }
        
        /// <remarks/>
        public void GetBusinessEntitiesAsync(object userState) {
            if ((this.GetBusinessEntitiesOperationCompleted == null)) {
                this.GetBusinessEntitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessEntitiesOperationCompleted);
            }
            this.InvokeAsync("GetBusinessEntities", new object[0], this.GetBusinessEntitiesOperationCompleted, userState);
        }
        
        private void OnGetBusinessEntitiesOperationCompleted(object arg) {
            if ((this.GetBusinessEntitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessEntitiesCompleted(this, new GetBusinessEntitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBusinessEntitity", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BusinessEntityDto GetBusinessEntitity(string name) {
            object[] results = this.Invoke("GetBusinessEntitity", new object[] {
                        name});
            return ((BusinessEntityDto)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessEntitity(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessEntitity", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public BusinessEntityDto EndGetBusinessEntitity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BusinessEntityDto)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessEntitityAsync(string name) {
            this.GetBusinessEntitityAsync(name, null);
        }
        
        /// <remarks/>
        public void GetBusinessEntitityAsync(string name, object userState) {
            if ((this.GetBusinessEntitityOperationCompleted == null)) {
                this.GetBusinessEntitityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessEntitityOperationCompleted);
            }
            this.InvokeAsync("GetBusinessEntitity", new object[] {
                        name}, this.GetBusinessEntitityOperationCompleted, userState);
        }
        
        private void OnGetBusinessEntitityOperationCompleted(object arg) {
            if ((this.GetBusinessEntitityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessEntitityCompleted(this, new GetBusinessEntitityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBusinessEntititiesHistory", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BusinessEntityHistoryItemDto[] GetBusinessEntititiesHistory(string name) {
            object[] results = this.Invoke("GetBusinessEntititiesHistory", new object[] {
                        name});
            return ((BusinessEntityHistoryItemDto[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessEntititiesHistory(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessEntititiesHistory", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public BusinessEntityHistoryItemDto[] EndGetBusinessEntititiesHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((BusinessEntityHistoryItemDto[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessEntititiesHistoryAsync(string name) {
            this.GetBusinessEntititiesHistoryAsync(name, null);
        }
        
        /// <remarks/>
        public void GetBusinessEntititiesHistoryAsync(string name, object userState) {
            if ((this.GetBusinessEntititiesHistoryOperationCompleted == null)) {
                this.GetBusinessEntititiesHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessEntititiesHistoryOperationCompleted);
            }
            this.InvokeAsync("GetBusinessEntititiesHistory", new object[] {
                        name}, this.GetBusinessEntititiesHistoryOperationCompleted, userState);
        }
        
        private void OnGetBusinessEntititiesHistoryOperationCompleted(object arg) {
            if ((this.GetBusinessEntititiesHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessEntititiesHistoryCompleted(this, new GetBusinessEntititiesHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBusinessEntityDescriptorByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBusinessEntityDescriptorByName(string name) {
            object[] results = this.Invoke("GetBusinessEntityDescriptorByName", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBusinessEntityDescriptorByName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBusinessEntityDescriptorByName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetBusinessEntityDescriptorByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBusinessEntityDescriptorByNameAsync(string name) {
            this.GetBusinessEntityDescriptorByNameAsync(name, null);
        }
        
        /// <remarks/>
        public void GetBusinessEntityDescriptorByNameAsync(string name, object userState) {
            if ((this.GetBusinessEntityDescriptorByNameOperationCompleted == null)) {
                this.GetBusinessEntityDescriptorByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBusinessEntityDescriptorByNameOperationCompleted);
            }
            this.InvokeAsync("GetBusinessEntityDescriptorByName", new object[] {
                        name}, this.GetBusinessEntityDescriptorByNameOperationCompleted, userState);
        }
        
        private void OnGetBusinessEntityDescriptorByNameOperationCompleted(object arg) {
            if ((this.GetBusinessEntityDescriptorByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBusinessEntityDescriptorByNameCompleted(this, new GetBusinessEntityDescriptorByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetActiveBusinessEntityVersion", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActiveBusinessEntityVersion(string name) {
            object[] results = this.Invoke("GetActiveBusinessEntityVersion", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActiveBusinessEntityVersion(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActiveBusinessEntityVersion", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetActiveBusinessEntityVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveBusinessEntityVersionAsync(string name) {
            this.GetActiveBusinessEntityVersionAsync(name, null);
        }
        
        /// <remarks/>
        public void GetActiveBusinessEntityVersionAsync(string name, object userState) {
            if ((this.GetActiveBusinessEntityVersionOperationCompleted == null)) {
                this.GetActiveBusinessEntityVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveBusinessEntityVersionOperationCompleted);
            }
            this.InvokeAsync("GetActiveBusinessEntityVersion", new object[] {
                        name}, this.GetActiveBusinessEntityVersionOperationCompleted, userState);
        }
        
        private void OnGetActiveBusinessEntityVersionOperationCompleted(object arg) {
            if ((this.GetActiveBusinessEntityVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveBusinessEntityVersionCompleted(this, new GetActiveBusinessEntityVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckIfExistsInActiveState", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIfExistsInActiveState([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data) {
            object[] results = this.Invoke("CheckIfExistsInActiveState", new object[] {
                        data});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckIfExistsInActiveState(byte[] data, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckIfExistsInActiveState", new object[] {
                        data}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckIfExistsInActiveState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfExistsInActiveStateAsync(byte[] data) {
            this.CheckIfExistsInActiveStateAsync(data, null);
        }
        
        /// <remarks/>
        public void CheckIfExistsInActiveStateAsync(byte[] data, object userState) {
            if ((this.CheckIfExistsInActiveStateOperationCompleted == null)) {
                this.CheckIfExistsInActiveStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfExistsInActiveStateOperationCompleted);
            }
            this.InvokeAsync("CheckIfExistsInActiveState", new object[] {
                        data}, this.CheckIfExistsInActiveStateOperationCompleted, userState);
        }
        
        private void OnCheckIfExistsInActiveStateOperationCompleted(object arg) {
            if ((this.CheckIfExistsInActiveStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfExistsInActiveStateCompleted(this, new CheckIfExistsInActiveStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveBusinessEntity", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] SaveBusinessEntity([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string signedDocument, ColumnsMigrationItem[] columnsMigration, string comment, string deleteVersion, string deleteSignedDocument) {
            object[] results = this.Invoke("SaveBusinessEntity", new object[] {
                        data,
                        signedDocument,
                        columnsMigration,
                        comment,
                        deleteVersion,
                        deleteSignedDocument});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveBusinessEntity(byte[] data, string signedDocument, ColumnsMigrationItem[] columnsMigration, string comment, string deleteVersion, string deleteSignedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveBusinessEntity", new object[] {
                        data,
                        signedDocument,
                        columnsMigration,
                        comment,
                        deleteVersion,
                        deleteSignedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndSaveBusinessEntity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void SaveBusinessEntityAsync(byte[] data, string signedDocument, ColumnsMigrationItem[] columnsMigration, string comment, string deleteVersion, string deleteSignedDocument) {
            this.SaveBusinessEntityAsync(data, signedDocument, columnsMigration, comment, deleteVersion, deleteSignedDocument, null);
        }
        
        /// <remarks/>
        public void SaveBusinessEntityAsync(byte[] data, string signedDocument, ColumnsMigrationItem[] columnsMigration, string comment, string deleteVersion, string deleteSignedDocument, object userState) {
            if ((this.SaveBusinessEntityOperationCompleted == null)) {
                this.SaveBusinessEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveBusinessEntityOperationCompleted);
            }
            this.InvokeAsync("SaveBusinessEntity", new object[] {
                        data,
                        signedDocument,
                        columnsMigration,
                        comment,
                        deleteVersion,
                        deleteSignedDocument}, this.SaveBusinessEntityOperationCompleted, userState);
        }
        
        private void OnSaveBusinessEntityOperationCompleted(object arg) {
            if ((this.SaveBusinessEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveBusinessEntityCompleted(this, new SaveBusinessEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckIfBusinessEntityExists", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIfBusinessEntityExists(string version) {
            object[] results = this.Invoke("CheckIfBusinessEntityExists", new object[] {
                        version});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckIfBusinessEntityExists(string version, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckIfBusinessEntityExists", new object[] {
                        version}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckIfBusinessEntityExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfBusinessEntityExistsAsync(string version) {
            this.CheckIfBusinessEntityExistsAsync(version, null);
        }
        
        /// <remarks/>
        public void CheckIfBusinessEntityExistsAsync(string version, object userState) {
            if ((this.CheckIfBusinessEntityExistsOperationCompleted == null)) {
                this.CheckIfBusinessEntityExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfBusinessEntityExistsOperationCompleted);
            }
            this.InvokeAsync("CheckIfBusinessEntityExists", new object[] {
                        version}, this.CheckIfBusinessEntityExistsOperationCompleted, userState);
        }
        
        private void OnCheckIfBusinessEntityExistsOperationCompleted(object arg) {
            if ((this.CheckIfBusinessEntityExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfBusinessEntityExistsCompleted(this, new CheckIfBusinessEntityExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyNamesLinkedToBusinessEntity", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStrategyNamesLinkedToBusinessEntity(string version) {
            object[] results = this.Invoke("GetStrategyNamesLinkedToBusinessEntity", new object[] {
                        version});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyNamesLinkedToBusinessEntity(string version, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyNamesLinkedToBusinessEntity", new object[] {
                        version}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetStrategyNamesLinkedToBusinessEntity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyNamesLinkedToBusinessEntityAsync(string version) {
            this.GetStrategyNamesLinkedToBusinessEntityAsync(version, null);
        }
        
        /// <remarks/>
        public void GetStrategyNamesLinkedToBusinessEntityAsync(string version, object userState) {
            if ((this.GetStrategyNamesLinkedToBusinessEntityOperationCompleted == null)) {
                this.GetStrategyNamesLinkedToBusinessEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyNamesLinkedToBusinessEntityOperationCompleted);
            }
            this.InvokeAsync("GetStrategyNamesLinkedToBusinessEntity", new object[] {
                        version}, this.GetStrategyNamesLinkedToBusinessEntityOperationCompleted, userState);
        }
        
        private void OnGetStrategyNamesLinkedToBusinessEntityOperationCompleted(object arg) {
            if ((this.GetStrategyNamesLinkedToBusinessEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyNamesLinkedToBusinessEntityCompleted(this, new GetStrategyNamesLinkedToBusinessEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNodeNamesLinkedToBusinessEntity", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetNodeNamesLinkedToBusinessEntity(string version) {
            object[] results = this.Invoke("GetNodeNamesLinkedToBusinessEntity", new object[] {
                        version});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodeNamesLinkedToBusinessEntity(string version, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodeNamesLinkedToBusinessEntity", new object[] {
                        version}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetNodeNamesLinkedToBusinessEntity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNodeNamesLinkedToBusinessEntityAsync(string version) {
            this.GetNodeNamesLinkedToBusinessEntityAsync(version, null);
        }
        
        /// <remarks/>
        public void GetNodeNamesLinkedToBusinessEntityAsync(string version, object userState) {
            if ((this.GetNodeNamesLinkedToBusinessEntityOperationCompleted == null)) {
                this.GetNodeNamesLinkedToBusinessEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodeNamesLinkedToBusinessEntityOperationCompleted);
            }
            this.InvokeAsync("GetNodeNamesLinkedToBusinessEntity", new object[] {
                        version}, this.GetNodeNamesLinkedToBusinessEntityOperationCompleted, userState);
        }
        
        private void OnGetNodeNamesLinkedToBusinessEntityOperationCompleted(object arg) {
            if ((this.GetNodeNamesLinkedToBusinessEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodeNamesLinkedToBusinessEntityCompleted(this, new GetNodeNamesLinkedToBusinessEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteBusinessEntity", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteBusinessEntity(string version, string signedDocument) {
            this.Invoke("DeleteBusinessEntity", new object[] {
                        version,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteBusinessEntity(string version, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteBusinessEntity", new object[] {
                        version,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteBusinessEntity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteBusinessEntityAsync(string version, string signedDocument) {
            this.DeleteBusinessEntityAsync(version, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteBusinessEntityAsync(string version, string signedDocument, object userState) {
            if ((this.DeleteBusinessEntityOperationCompleted == null)) {
                this.DeleteBusinessEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBusinessEntityOperationCompleted);
            }
            this.InvokeAsync("DeleteBusinessEntity", new object[] {
                        version,
                        signedDocument}, this.DeleteBusinessEntityOperationCompleted, userState);
        }
        
        private void OnDeleteBusinessEntityOperationCompleted(object arg) {
            if ((this.DeleteBusinessEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBusinessEntityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckIfBusinessEntityIsEmpty", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIfBusinessEntityIsEmpty(string name) {
            object[] results = this.Invoke("CheckIfBusinessEntityIsEmpty", new object[] {
                        name});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckIfBusinessEntityIsEmpty(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckIfBusinessEntityIsEmpty", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckIfBusinessEntityIsEmpty(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfBusinessEntityIsEmptyAsync(string name) {
            this.CheckIfBusinessEntityIsEmptyAsync(name, null);
        }
        
        /// <remarks/>
        public void CheckIfBusinessEntityIsEmptyAsync(string name, object userState) {
            if ((this.CheckIfBusinessEntityIsEmptyOperationCompleted == null)) {
                this.CheckIfBusinessEntityIsEmptyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfBusinessEntityIsEmptyOperationCompleted);
            }
            this.InvokeAsync("CheckIfBusinessEntityIsEmpty", new object[] {
                        name}, this.CheckIfBusinessEntityIsEmptyOperationCompleted, userState);
        }
        
        private void OnCheckIfBusinessEntityIsEmptyOperationCompleted(object arg) {
            if ((this.CheckIfBusinessEntityIsEmptyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfBusinessEntityIsEmptyCompleted(this, new CheckIfBusinessEntityIsEmptyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllAttachAccessRules", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AttachAccessRuleDTO[] GetAllAttachAccessRules() {
            object[] results = this.Invoke("GetAllAttachAccessRules", new object[0]);
            return ((AttachAccessRuleDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllAttachAccessRules(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllAttachAccessRules", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public AttachAccessRuleDTO[] EndGetAllAttachAccessRules(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AttachAccessRuleDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllAttachAccessRulesAsync() {
            this.GetAllAttachAccessRulesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllAttachAccessRulesAsync(object userState) {
            if ((this.GetAllAttachAccessRulesOperationCompleted == null)) {
                this.GetAllAttachAccessRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllAttachAccessRulesOperationCompleted);
            }
            this.InvokeAsync("GetAllAttachAccessRules", new object[0], this.GetAllAttachAccessRulesOperationCompleted, userState);
        }
        
        private void OnGetAllAttachAccessRulesOperationCompleted(object arg) {
            if ((this.GetAllAttachAccessRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllAttachAccessRulesCompleted(this, new GetAllAttachAccessRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllStrategiesSimple", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StrategySimpleDTO[] GetAllStrategiesSimple() {
            object[] results = this.Invoke("GetAllStrategiesSimple", new object[0]);
            return ((StrategySimpleDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllStrategiesSimple(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllStrategiesSimple", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public StrategySimpleDTO[] EndGetAllStrategiesSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StrategySimpleDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllStrategiesSimpleAsync() {
            this.GetAllStrategiesSimpleAsync(null);
        }
        
        /// <remarks/>
        public void GetAllStrategiesSimpleAsync(object userState) {
            if ((this.GetAllStrategiesSimpleOperationCompleted == null)) {
                this.GetAllStrategiesSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllStrategiesSimpleOperationCompleted);
            }
            this.InvokeAsync("GetAllStrategiesSimple", new object[0], this.GetAllStrategiesSimpleOperationCompleted, userState);
        }
        
        private void OnGetAllStrategiesSimpleOperationCompleted(object arg) {
            if ((this.GetAllStrategiesSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllStrategiesSimpleCompleted(this, new GetAllStrategiesSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllRoles", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RoleSimpleDTO[] GetAllRoles() {
            object[] results = this.Invoke("GetAllRoles", new object[0]);
            return ((RoleSimpleDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllRoles(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllRoles", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public RoleSimpleDTO[] EndGetAllRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((RoleSimpleDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRolesAsync() {
            this.GetAllRolesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllRolesAsync(object userState) {
            if ((this.GetAllRolesOperationCompleted == null)) {
                this.GetAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRolesOperationCompleted);
            }
            this.InvokeAsync("GetAllRoles", new object[0], this.GetAllRolesOperationCompleted, userState);
        }
        
        private void OnGetAllRolesOperationCompleted(object arg) {
            if ((this.GetAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRolesCompleted(this, new GetAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveOrUpdateAttachAccessRule", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveOrUpdateAttachAccessRule(AttachAccessRuleDTO rule) {
            this.Invoke("SaveOrUpdateAttachAccessRule", new object[] {
                        rule});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveOrUpdateAttachAccessRule(AttachAccessRuleDTO rule, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveOrUpdateAttachAccessRule", new object[] {
                        rule}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSaveOrUpdateAttachAccessRule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SaveOrUpdateAttachAccessRuleAsync(AttachAccessRuleDTO rule) {
            this.SaveOrUpdateAttachAccessRuleAsync(rule, null);
        }
        
        /// <remarks/>
        public void SaveOrUpdateAttachAccessRuleAsync(AttachAccessRuleDTO rule, object userState) {
            if ((this.SaveOrUpdateAttachAccessRuleOperationCompleted == null)) {
                this.SaveOrUpdateAttachAccessRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveOrUpdateAttachAccessRuleOperationCompleted);
            }
            this.InvokeAsync("SaveOrUpdateAttachAccessRule", new object[] {
                        rule}, this.SaveOrUpdateAttachAccessRuleOperationCompleted, userState);
        }
        
        private void OnSaveOrUpdateAttachAccessRuleOperationCompleted(object arg) {
            if ((this.SaveOrUpdateAttachAccessRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveOrUpdateAttachAccessRuleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteAttachAccessRule", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAttachAccessRule(int id) {
            this.Invoke("DeleteAttachAccessRule", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAttachAccessRule(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAttachAccessRule", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteAttachAccessRule(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAttachAccessRuleAsync(int id) {
            this.DeleteAttachAccessRuleAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteAttachAccessRuleAsync(int id, object userState) {
            if ((this.DeleteAttachAccessRuleOperationCompleted == null)) {
                this.DeleteAttachAccessRuleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAttachAccessRuleOperationCompleted);
            }
            this.InvokeAsync("DeleteAttachAccessRule", new object[] {
                        id}, this.DeleteAttachAccessRuleOperationCompleted, userState);
        }
        
        private void OnDeleteAttachAccessRuleOperationCompleted(object arg) {
            if ((this.DeleteAttachAccessRuleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAttachAccessRuleCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/IncreaseAttachRulePriority", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IncreaseAttachRulePriority(int id) {
            this.Invoke("IncreaseAttachRulePriority", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIncreaseAttachRulePriority(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IncreaseAttachRulePriority", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndIncreaseAttachRulePriority(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void IncreaseAttachRulePriorityAsync(int id) {
            this.IncreaseAttachRulePriorityAsync(id, null);
        }
        
        /// <remarks/>
        public void IncreaseAttachRulePriorityAsync(int id, object userState) {
            if ((this.IncreaseAttachRulePriorityOperationCompleted == null)) {
                this.IncreaseAttachRulePriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncreaseAttachRulePriorityOperationCompleted);
            }
            this.InvokeAsync("IncreaseAttachRulePriority", new object[] {
                        id}, this.IncreaseAttachRulePriorityOperationCompleted, userState);
        }
        
        private void OnIncreaseAttachRulePriorityOperationCompleted(object arg) {
            if ((this.IncreaseAttachRulePriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncreaseAttachRulePriorityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DecreaseAttachRulePriority", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DecreaseAttachRulePriority(int id) {
            this.Invoke("DecreaseAttachRulePriority", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDecreaseAttachRulePriority(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DecreaseAttachRulePriority", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDecreaseAttachRulePriority(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DecreaseAttachRulePriorityAsync(int id) {
            this.DecreaseAttachRulePriorityAsync(id, null);
        }
        
        /// <remarks/>
        public void DecreaseAttachRulePriorityAsync(int id, object userState) {
            if ((this.DecreaseAttachRulePriorityOperationCompleted == null)) {
                this.DecreaseAttachRulePriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecreaseAttachRulePriorityOperationCompleted);
            }
            this.InvokeAsync("DecreaseAttachRulePriority", new object[] {
                        id}, this.DecreaseAttachRulePriorityOperationCompleted, userState);
        }
        
        private void OnDecreaseAttachRulePriorityOperationCompleted(object arg) {
            if ((this.DecreaseAttachRulePriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecreaseAttachRulePriorityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckAttachAccessRuleForUniqueness", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAttachAccessRuleForUniqueness(AttachAccessRuleDTO rule) {
            object[] results = this.Invoke("CheckAttachAccessRuleForUniqueness", new object[] {
                        rule});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckAttachAccessRuleForUniqueness(AttachAccessRuleDTO rule, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckAttachAccessRuleForUniqueness", new object[] {
                        rule}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckAttachAccessRuleForUniqueness(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAttachAccessRuleForUniquenessAsync(AttachAccessRuleDTO rule) {
            this.CheckAttachAccessRuleForUniquenessAsync(rule, null);
        }
        
        /// <remarks/>
        public void CheckAttachAccessRuleForUniquenessAsync(AttachAccessRuleDTO rule, object userState) {
            if ((this.CheckAttachAccessRuleForUniquenessOperationCompleted == null)) {
                this.CheckAttachAccessRuleForUniquenessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAttachAccessRuleForUniquenessOperationCompleted);
            }
            this.InvokeAsync("CheckAttachAccessRuleForUniqueness", new object[] {
                        rule}, this.CheckAttachAccessRuleForUniquenessOperationCompleted, userState);
        }
        
        private void OnCheckAttachAccessRuleForUniquenessOperationCompleted(object arg) {
            if ((this.CheckAttachAccessRuleForUniquenessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAttachAccessRuleForUniquenessCompleted(this, new CheckAttachAccessRuleForUniquenessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/IsWarehouseDataSourceInitialized", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsWarehouseDataSourceInitialized() {
            object[] results = this.Invoke("IsWarehouseDataSourceInitialized", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsWarehouseDataSourceInitialized(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsWarehouseDataSourceInitialized", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsWarehouseDataSourceInitialized(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsWarehouseDataSourceInitializedAsync() {
            this.IsWarehouseDataSourceInitializedAsync(null);
        }
        
        /// <remarks/>
        public void IsWarehouseDataSourceInitializedAsync(object userState) {
            if ((this.IsWarehouseDataSourceInitializedOperationCompleted == null)) {
                this.IsWarehouseDataSourceInitializedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsWarehouseDataSourceInitializedOperationCompleted);
            }
            this.InvokeAsync("IsWarehouseDataSourceInitialized", new object[0], this.IsWarehouseDataSourceInitializedOperationCompleted, userState);
        }
        
        private void OnIsWarehouseDataSourceInitializedOperationCompleted(object arg) {
            if ((this.IsWarehouseDataSourceInitializedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsWarehouseDataSourceInitializedCompleted(this, new IsWarehouseDataSourceInitializedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetWarehouseDataSourceByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseDataSource GetWarehouseDataSourceByName(string name) {
            object[] results = this.Invoke("GetWarehouseDataSourceByName", new object[] {
                        name});
            return ((WarehouseDataSource)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWarehouseDataSourceByName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWarehouseDataSourceByName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseDataSource EndGetWarehouseDataSourceByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseDataSource)(results[0]));
        }
        
        /// <remarks/>
        public void GetWarehouseDataSourceByNameAsync(string name) {
            this.GetWarehouseDataSourceByNameAsync(name, null);
        }
        
        /// <remarks/>
        public void GetWarehouseDataSourceByNameAsync(string name, object userState) {
            if ((this.GetWarehouseDataSourceByNameOperationCompleted == null)) {
                this.GetWarehouseDataSourceByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWarehouseDataSourceByNameOperationCompleted);
            }
            this.InvokeAsync("GetWarehouseDataSourceByName", new object[] {
                        name}, this.GetWarehouseDataSourceByNameOperationCompleted, userState);
        }
        
        private void OnGetWarehouseDataSourceByNameOperationCompleted(object arg) {
            if ((this.GetWarehouseDataSourceByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWarehouseDataSourceByNameCompleted(this, new GetWarehouseDataSourceByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CreateDataSourceParam", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataSourceParam CreateDataSourceParam() {
            object[] results = this.Invoke("CreateDataSourceParam", new object[0]);
            return ((DataSourceParam)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateDataSourceParam(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateDataSourceParam", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public DataSourceParam EndCreateDataSourceParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSourceParam)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDataSourceParamAsync() {
            this.CreateDataSourceParamAsync(null);
        }
        
        /// <remarks/>
        public void CreateDataSourceParamAsync(object userState) {
            if ((this.CreateDataSourceParamOperationCompleted == null)) {
                this.CreateDataSourceParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDataSourceParamOperationCompleted);
            }
            this.InvokeAsync("CreateDataSourceParam", new object[0], this.CreateDataSourceParamOperationCompleted, userState);
        }
        
        private void OnCreateDataSourceParamOperationCompleted(object arg) {
            if ((this.CreateDataSourceParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDataSourceParamCompleted(this, new CreateDataSourceParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CreateWarehouseDataSourceParam", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseDataSourceParameter CreateWarehouseDataSourceParam() {
            object[] results = this.Invoke("CreateWarehouseDataSourceParam", new object[0]);
            return ((WarehouseDataSourceParameter)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateWarehouseDataSourceParam(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateWarehouseDataSourceParam", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseDataSourceParameter EndCreateWarehouseDataSourceParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseDataSourceParameter)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWarehouseDataSourceParamAsync() {
            this.CreateWarehouseDataSourceParamAsync(null);
        }
        
        /// <remarks/>
        public void CreateWarehouseDataSourceParamAsync(object userState) {
            if ((this.CreateWarehouseDataSourceParamOperationCompleted == null)) {
                this.CreateWarehouseDataSourceParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWarehouseDataSourceParamOperationCompleted);
            }
            this.InvokeAsync("CreateWarehouseDataSourceParam", new object[0], this.CreateWarehouseDataSourceParamOperationCompleted, userState);
        }
        
        private void OnCreateWarehouseDataSourceParamOperationCompleted(object arg) {
            if ((this.CreateWarehouseDataSourceParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWarehouseDataSourceParamCompleted(this, new CreateWarehouseDataSourceParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetDataSourceByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DatasourceStub GetDataSourceByName(string name) {
            object[] results = this.Invoke("GetDataSourceByName", new object[] {
                        name});
            return ((DatasourceStub)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSourceByName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSourceByName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public DatasourceStub EndGetDataSourceByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DatasourceStub)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSourceByNameAsync(string name) {
            this.GetDataSourceByNameAsync(name, null);
        }
        
        /// <remarks/>
        public void GetDataSourceByNameAsync(string name, object userState) {
            if ((this.GetDataSourceByNameOperationCompleted == null)) {
                this.GetDataSourceByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSourceByNameOperationCompleted);
            }
            this.InvokeAsync("GetDataSourceByName", new object[] {
                        name}, this.GetDataSourceByNameOperationCompleted, userState);
        }
        
        private void OnGetDataSourceByNameOperationCompleted(object arg) {
            if ((this.GetDataSourceByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSourceByNameCompleted(this, new GetDataSourceByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetDataSources", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DatasourceListItemDescriptor[] GetDataSources(DatasourceType datasourceType) {
            object[] results = this.Invoke("GetDataSources", new object[] {
                        datasourceType});
            return ((DatasourceListItemDescriptor[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSources(DatasourceType datasourceType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSources", new object[] {
                        datasourceType}, callback, asyncState);
        }
        
        /// <remarks/>
        public DatasourceListItemDescriptor[] EndGetDataSources(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DatasourceListItemDescriptor[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSourcesAsync(DatasourceType datasourceType) {
            this.GetDataSourcesAsync(datasourceType, null);
        }
        
        /// <remarks/>
        public void GetDataSourcesAsync(DatasourceType datasourceType, object userState) {
            if ((this.GetDataSourcesOperationCompleted == null)) {
                this.GetDataSourcesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSourcesOperationCompleted);
            }
            this.InvokeAsync("GetDataSources", new object[] {
                        datasourceType}, this.GetDataSourcesOperationCompleted, userState);
        }
        
        private void OnGetDataSourcesOperationCompleted(object arg) {
            if ((this.GetDataSourcesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSourcesCompleted(this, new GetDataSourcesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckConnection", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckConnection(string connectionString, string providerName, bool useMainConnection) {
            object[] results = this.Invoke("CheckConnection", new object[] {
                        connectionString,
                        providerName,
                        useMainConnection});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckConnection(string connectionString, string providerName, bool useMainConnection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckConnection", new object[] {
                        connectionString,
                        providerName,
                        useMainConnection}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckConnection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckConnectionAsync(string connectionString, string providerName, bool useMainConnection) {
            this.CheckConnectionAsync(connectionString, providerName, useMainConnection, null);
        }
        
        /// <remarks/>
        public void CheckConnectionAsync(string connectionString, string providerName, bool useMainConnection, object userState) {
            if ((this.CheckConnectionOperationCompleted == null)) {
                this.CheckConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckConnectionOperationCompleted);
            }
            this.InvokeAsync("CheckConnection", new object[] {
                        connectionString,
                        providerName,
                        useMainConnection}, this.CheckConnectionOperationCompleted, userState);
        }
        
        private void OnCheckConnectionOperationCompleted(object arg) {
            if ((this.CheckConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckConnectionCompleted(this, new CheckConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetExternalDataSourceSchema", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetExternalDataSourceSchema(string connectionString, string commandText, string providerName, DataParameterBase[] queryParameters, bool useMainConnection) {
            object[] results = this.Invoke("GetExternalDataSourceSchema", new object[] {
                        connectionString,
                        commandText,
                        providerName,
                        queryParameters,
                        useMainConnection});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExternalDataSourceSchema(string connectionString, string commandText, string providerName, DataParameterBase[] queryParameters, bool useMainConnection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExternalDataSourceSchema", new object[] {
                        connectionString,
                        commandText,
                        providerName,
                        queryParameters,
                        useMainConnection}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetExternalDataSourceSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetExternalDataSourceSchemaAsync(string connectionString, string commandText, string providerName, DataParameterBase[] queryParameters, bool useMainConnection) {
            this.GetExternalDataSourceSchemaAsync(connectionString, commandText, providerName, queryParameters, useMainConnection, null);
        }
        
        /// <remarks/>
        public void GetExternalDataSourceSchemaAsync(string connectionString, string commandText, string providerName, DataParameterBase[] queryParameters, bool useMainConnection, object userState) {
            if ((this.GetExternalDataSourceSchemaOperationCompleted == null)) {
                this.GetExternalDataSourceSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExternalDataSourceSchemaOperationCompleted);
            }
            this.InvokeAsync("GetExternalDataSourceSchema", new object[] {
                        connectionString,
                        commandText,
                        providerName,
                        queryParameters,
                        useMainConnection}, this.GetExternalDataSourceSchemaOperationCompleted, userState);
        }
        
        private void OnGetExternalDataSourceSchemaOperationCompleted(object arg) {
            if ((this.GetExternalDataSourceSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExternalDataSourceSchemaCompleted(this, new GetExternalDataSourceSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStoredProcedureDataSourceSchema", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetStoredProcedureDataSourceSchema(string connectionString, string storedProcedureName, string providerName, bool useMainConnection) {
            object[] results = this.Invoke("GetStoredProcedureDataSourceSchema", new object[] {
                        connectionString,
                        storedProcedureName,
                        providerName,
                        useMainConnection});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStoredProcedureDataSourceSchema(string connectionString, string storedProcedureName, string providerName, bool useMainConnection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStoredProcedureDataSourceSchema", new object[] {
                        connectionString,
                        storedProcedureName,
                        providerName,
                        useMainConnection}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetStoredProcedureDataSourceSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetStoredProcedureDataSourceSchemaAsync(string connectionString, string storedProcedureName, string providerName, bool useMainConnection) {
            this.GetStoredProcedureDataSourceSchemaAsync(connectionString, storedProcedureName, providerName, useMainConnection, null);
        }
        
        /// <remarks/>
        public void GetStoredProcedureDataSourceSchemaAsync(string connectionString, string storedProcedureName, string providerName, bool useMainConnection, object userState) {
            if ((this.GetStoredProcedureDataSourceSchemaOperationCompleted == null)) {
                this.GetStoredProcedureDataSourceSchemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStoredProcedureDataSourceSchemaOperationCompleted);
            }
            this.InvokeAsync("GetStoredProcedureDataSourceSchema", new object[] {
                        connectionString,
                        storedProcedureName,
                        providerName,
                        useMainConnection}, this.GetStoredProcedureDataSourceSchemaOperationCompleted, userState);
        }
        
        private void OnGetStoredProcedureDataSourceSchemaOperationCompleted(object arg) {
            if ((this.GetStoredProcedureDataSourceSchemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStoredProcedureDataSourceSchemaCompleted(this, new GetStoredProcedureDataSourceSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/TryGetConstraintString", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TryGetConstraintString(string connectionString, string commandText, string providerName, string columnName, DataParameterBase[] queryParameters, bool useMainConnection) {
            object[] results = this.Invoke("TryGetConstraintString", new object[] {
                        connectionString,
                        commandText,
                        providerName,
                        columnName,
                        queryParameters,
                        useMainConnection});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTryGetConstraintString(string connectionString, string commandText, string providerName, string columnName, DataParameterBase[] queryParameters, bool useMainConnection, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TryGetConstraintString", new object[] {
                        connectionString,
                        commandText,
                        providerName,
                        columnName,
                        queryParameters,
                        useMainConnection}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTryGetConstraintString(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TryGetConstraintStringAsync(string connectionString, string commandText, string providerName, string columnName, DataParameterBase[] queryParameters, bool useMainConnection) {
            this.TryGetConstraintStringAsync(connectionString, commandText, providerName, columnName, queryParameters, useMainConnection, null);
        }
        
        /// <remarks/>
        public void TryGetConstraintStringAsync(string connectionString, string commandText, string providerName, string columnName, DataParameterBase[] queryParameters, bool useMainConnection, object userState) {
            if ((this.TryGetConstraintStringOperationCompleted == null)) {
                this.TryGetConstraintStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTryGetConstraintStringOperationCompleted);
            }
            this.InvokeAsync("TryGetConstraintString", new object[] {
                        connectionString,
                        commandText,
                        providerName,
                        columnName,
                        queryParameters,
                        useMainConnection}, this.TryGetConstraintStringOperationCompleted, userState);
        }
        
        private void OnTryGetConstraintStringOperationCompleted(object arg) {
            if ((this.TryGetConstraintStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TryGetConstraintStringCompleted(this, new TryGetConstraintStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetDataSourceLinkedStrategyNames", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDataSourceLinkedStrategyNames(string dataSourceName, DatasourceType type) {
            object[] results = this.Invoke("GetDataSourceLinkedStrategyNames", new object[] {
                        dataSourceName,
                        type});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSourceLinkedStrategyNames(string dataSourceName, DatasourceType type, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSourceLinkedStrategyNames", new object[] {
                        dataSourceName,
                        type}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetDataSourceLinkedStrategyNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataSourceLinkedStrategyNamesAsync(string dataSourceName, DatasourceType type) {
            this.GetDataSourceLinkedStrategyNamesAsync(dataSourceName, type, null);
        }
        
        /// <remarks/>
        public void GetDataSourceLinkedStrategyNamesAsync(string dataSourceName, DatasourceType type, object userState) {
            if ((this.GetDataSourceLinkedStrategyNamesOperationCompleted == null)) {
                this.GetDataSourceLinkedStrategyNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataSourceLinkedStrategyNamesOperationCompleted);
            }
            this.InvokeAsync("GetDataSourceLinkedStrategyNames", new object[] {
                        dataSourceName,
                        type}, this.GetDataSourceLinkedStrategyNamesOperationCompleted, userState);
        }
        
        private void OnGetDataSourceLinkedStrategyNamesOperationCompleted(object arg) {
            if ((this.GetDataSourceLinkedStrategyNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataSourceLinkedStrategyNamesCompleted(this, new GetDataSourceLinkedStrategyNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetDataProvidersList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetDataProvidersList() {
            object[] results = this.Invoke("GetDataProvidersList", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataProvidersList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataProvidersList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetDataProvidersList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDataProvidersListAsync() {
            this.GetDataProvidersListAsync(null);
        }
        
        /// <remarks/>
        public void GetDataProvidersListAsync(object userState) {
            if ((this.GetDataProvidersListOperationCompleted == null)) {
                this.GetDataProvidersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataProvidersListOperationCompleted);
            }
            this.InvokeAsync("GetDataProvidersList", new object[0], this.GetDataProvidersListOperationCompleted, userState);
        }
        
        private void OnGetDataProvidersListOperationCompleted(object arg) {
            if ((this.GetDataProvidersListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataProvidersListCompleted(this, new GetDataProvidersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/InsertExternalDataSource", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long InsertExternalDataSource(string name, string description, string dataSourceSerialized, string[] keyNames, DatasourceType datasourceType, string versionedDoc, string signedData) {
            object[] results = this.Invoke("InsertExternalDataSource", new object[] {
                        name,
                        description,
                        dataSourceSerialized,
                        keyNames,
                        datasourceType,
                        versionedDoc,
                        signedData});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertExternalDataSource(string name, string description, string dataSourceSerialized, string[] keyNames, DatasourceType datasourceType, string versionedDoc, string signedData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertExternalDataSource", new object[] {
                        name,
                        description,
                        dataSourceSerialized,
                        keyNames,
                        datasourceType,
                        versionedDoc,
                        signedData}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndInsertExternalDataSource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void InsertExternalDataSourceAsync(string name, string description, string dataSourceSerialized, string[] keyNames, DatasourceType datasourceType, string versionedDoc, string signedData) {
            this.InsertExternalDataSourceAsync(name, description, dataSourceSerialized, keyNames, datasourceType, versionedDoc, signedData, null);
        }
        
        /// <remarks/>
        public void InsertExternalDataSourceAsync(string name, string description, string dataSourceSerialized, string[] keyNames, DatasourceType datasourceType, string versionedDoc, string signedData, object userState) {
            if ((this.InsertExternalDataSourceOperationCompleted == null)) {
                this.InsertExternalDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertExternalDataSourceOperationCompleted);
            }
            this.InvokeAsync("InsertExternalDataSource", new object[] {
                        name,
                        description,
                        dataSourceSerialized,
                        keyNames,
                        datasourceType,
                        versionedDoc,
                        signedData}, this.InsertExternalDataSourceOperationCompleted, userState);
        }
        
        private void OnInsertExternalDataSourceOperationCompleted(object arg) {
            if ((this.InsertExternalDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertExternalDataSourceCompleted(this, new InsertExternalDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/InsertPublisherDataSource", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long InsertPublisherDataSource(string name, string dsXml, DatasourceType dsType, string connectionObject, bool testUrl, int fixedTimeout, string[] keyNames, string versionedDocument, string signedData) {
            object[] results = this.Invoke("InsertPublisherDataSource", new object[] {
                        name,
                        dsXml,
                        dsType,
                        connectionObject,
                        testUrl,
                        fixedTimeout,
                        keyNames,
                        versionedDocument,
                        signedData});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertPublisherDataSource(string name, string dsXml, DatasourceType dsType, string connectionObject, bool testUrl, int fixedTimeout, string[] keyNames, string versionedDocument, string signedData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertPublisherDataSource", new object[] {
                        name,
                        dsXml,
                        dsType,
                        connectionObject,
                        testUrl,
                        fixedTimeout,
                        keyNames,
                        versionedDocument,
                        signedData}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndInsertPublisherDataSource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void InsertPublisherDataSourceAsync(string name, string dsXml, DatasourceType dsType, string connectionObject, bool testUrl, int fixedTimeout, string[] keyNames, string versionedDocument, string signedData) {
            this.InsertPublisherDataSourceAsync(name, dsXml, dsType, connectionObject, testUrl, fixedTimeout, keyNames, versionedDocument, signedData, null);
        }
        
        /// <remarks/>
        public void InsertPublisherDataSourceAsync(string name, string dsXml, DatasourceType dsType, string connectionObject, bool testUrl, int fixedTimeout, string[] keyNames, string versionedDocument, string signedData, object userState) {
            if ((this.InsertPublisherDataSourceOperationCompleted == null)) {
                this.InsertPublisherDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPublisherDataSourceOperationCompleted);
            }
            this.InvokeAsync("InsertPublisherDataSource", new object[] {
                        name,
                        dsXml,
                        dsType,
                        connectionObject,
                        testUrl,
                        fixedTimeout,
                        keyNames,
                        versionedDocument,
                        signedData}, this.InsertPublisherDataSourceOperationCompleted, userState);
        }
        
        private void OnInsertPublisherDataSourceOperationCompleted(object arg) {
            if ((this.InsertPublisherDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPublisherDataSourceCompleted(this, new InsertPublisherDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/InsertWarehouseDataSource", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> InsertWarehouseDataSource(string name, string description, WarehouseDataSourceType dsType, long baseTypeId, string[] parameterNames, string[] parameterTypes, string[] parameterConstraints, bool[] isHistorical, string[] dictionaryNames, [System.Xml.Serialization.XmlArrayItemAttribute()] System.Nullable<long>[] dictionaryIDs, bool allowSave, DataSourceWhereFilter whereFilter) {
            object[] results = this.Invoke("InsertWarehouseDataSource", new object[] {
                        name,
                        description,
                        dsType,
                        baseTypeId,
                        parameterNames,
                        parameterTypes,
                        parameterConstraints,
                        isHistorical,
                        dictionaryNames,
                        dictionaryIDs,
                        allowSave,
                        whereFilter});
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertWarehouseDataSource(string name, string description, WarehouseDataSourceType dsType, long baseTypeId, string[] parameterNames, string[] parameterTypes, string[] parameterConstraints, bool[] isHistorical, string[] dictionaryNames, System.Nullable<long>[] dictionaryIDs, bool allowSave, DataSourceWhereFilter whereFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertWarehouseDataSource", new object[] {
                        name,
                        description,
                        dsType,
                        baseTypeId,
                        parameterNames,
                        parameterTypes,
                        parameterConstraints,
                        isHistorical,
                        dictionaryNames,
                        dictionaryIDs,
                        allowSave,
                        whereFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<long> EndInsertWarehouseDataSource(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public void InsertWarehouseDataSourceAsync(string name, string description, WarehouseDataSourceType dsType, long baseTypeId, string[] parameterNames, string[] parameterTypes, string[] parameterConstraints, bool[] isHistorical, string[] dictionaryNames, System.Nullable<long>[] dictionaryIDs, bool allowSave, DataSourceWhereFilter whereFilter) {
            this.InsertWarehouseDataSourceAsync(name, description, dsType, baseTypeId, parameterNames, parameterTypes, parameterConstraints, isHistorical, dictionaryNames, dictionaryIDs, allowSave, whereFilter, null);
        }
        
        /// <remarks/>
        public void InsertWarehouseDataSourceAsync(string name, string description, WarehouseDataSourceType dsType, long baseTypeId, string[] parameterNames, string[] parameterTypes, string[] parameterConstraints, bool[] isHistorical, string[] dictionaryNames, System.Nullable<long>[] dictionaryIDs, bool allowSave, DataSourceWhereFilter whereFilter, object userState) {
            if ((this.InsertWarehouseDataSourceOperationCompleted == null)) {
                this.InsertWarehouseDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertWarehouseDataSourceOperationCompleted);
            }
            this.InvokeAsync("InsertWarehouseDataSource", new object[] {
                        name,
                        description,
                        dsType,
                        baseTypeId,
                        parameterNames,
                        parameterTypes,
                        parameterConstraints,
                        isHistorical,
                        dictionaryNames,
                        dictionaryIDs,
                        allowSave,
                        whereFilter}, this.InsertWarehouseDataSourceOperationCompleted, userState);
        }
        
        private void OnInsertWarehouseDataSourceOperationCompleted(object arg) {
            if ((this.InsertWarehouseDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertWarehouseDataSourceCompleted(this, new InsertWarehouseDataSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteWarehouseDataSource", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWarehouseDataSource(string dataSourceName) {
            this.Invoke("DeleteWarehouseDataSource", new object[] {
                        dataSourceName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteWarehouseDataSource(string dataSourceName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteWarehouseDataSource", new object[] {
                        dataSourceName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteWarehouseDataSource(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteWarehouseDataSourceAsync(string dataSourceName) {
            this.DeleteWarehouseDataSourceAsync(dataSourceName, null);
        }
        
        /// <remarks/>
        public void DeleteWarehouseDataSourceAsync(string dataSourceName, object userState) {
            if ((this.DeleteWarehouseDataSourceOperationCompleted == null)) {
                this.DeleteWarehouseDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWarehouseDataSourceOperationCompleted);
            }
            this.InvokeAsync("DeleteWarehouseDataSource", new object[] {
                        dataSourceName}, this.DeleteWarehouseDataSourceOperationCompleted, userState);
        }
        
        private void OnDeleteWarehouseDataSourceOperationCompleted(object arg) {
            if ((this.DeleteWarehouseDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWarehouseDataSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteDataSource", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDataSource(string dataSourceName, string signedData) {
            this.Invoke("DeleteDataSource", new object[] {
                        dataSourceName,
                        signedData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDataSource(string dataSourceName, string signedData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDataSource", new object[] {
                        dataSourceName,
                        signedData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteDataSource(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteDataSourceAsync(string dataSourceName, string signedData) {
            this.DeleteDataSourceAsync(dataSourceName, signedData, null);
        }
        
        /// <remarks/>
        public void DeleteDataSourceAsync(string dataSourceName, string signedData, object userState) {
            if ((this.DeleteDataSourceOperationCompleted == null)) {
                this.DeleteDataSourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDataSourceOperationCompleted);
            }
            this.InvokeAsync("DeleteDataSource", new object[] {
                        dataSourceName,
                        signedData}, this.DeleteDataSourceOperationCompleted, userState);
        }
        
        private void OnDeleteDataSourceOperationCompleted(object arg) {
            if ((this.DeleteDataSourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDataSourceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetDictionaryById", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseDictionary GetDictionaryById(long id) {
            object[] results = this.Invoke("GetDictionaryById", new object[] {
                        id});
            return ((WarehouseDictionary)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDictionaryById(long id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDictionaryById", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseDictionary EndGetDictionaryById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseDictionary)(results[0]));
        }
        
        /// <remarks/>
        public void GetDictionaryByIdAsync(long id) {
            this.GetDictionaryByIdAsync(id, null);
        }
        
        /// <remarks/>
        public void GetDictionaryByIdAsync(long id, object userState) {
            if ((this.GetDictionaryByIdOperationCompleted == null)) {
                this.GetDictionaryByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDictionaryByIdOperationCompleted);
            }
            this.InvokeAsync("GetDictionaryById", new object[] {
                        id}, this.GetDictionaryByIdOperationCompleted, userState);
        }
        
        private void OnGetDictionaryByIdOperationCompleted(object arg) {
            if ((this.GetDictionaryByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDictionaryByIdCompleted(this, new GetDictionaryByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetDictionaryValuesConstraint", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDictionaryValuesConstraint(long dictionaryId) {
            object[] results = this.Invoke("GetDictionaryValuesConstraint", new object[] {
                        dictionaryId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDictionaryValuesConstraint(long dictionaryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDictionaryValuesConstraint", new object[] {
                        dictionaryId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDictionaryValuesConstraint(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDictionaryValuesConstraintAsync(long dictionaryId) {
            this.GetDictionaryValuesConstraintAsync(dictionaryId, null);
        }
        
        /// <remarks/>
        public void GetDictionaryValuesConstraintAsync(long dictionaryId, object userState) {
            if ((this.GetDictionaryValuesConstraintOperationCompleted == null)) {
                this.GetDictionaryValuesConstraintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDictionaryValuesConstraintOperationCompleted);
            }
            this.InvokeAsync("GetDictionaryValuesConstraint", new object[] {
                        dictionaryId}, this.GetDictionaryValuesConstraintOperationCompleted, userState);
        }
        
        private void OnGetDictionaryValuesConstraintOperationCompleted(object arg) {
            if ((this.GetDictionaryValuesConstraintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDictionaryValuesConstraintCompleted(this, new GetDictionaryValuesConstraintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAccountTypes", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseAccountType[] GetAccountTypes() {
            object[] results = this.Invoke("GetAccountTypes", new object[0]);
            return ((WarehouseAccountType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseAccountType[] EndGetAccountTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseAccountType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountTypesAsync() {
            this.GetAccountTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetAccountTypesAsync(object userState) {
            if ((this.GetAccountTypesOperationCompleted == null)) {
                this.GetAccountTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountTypesOperationCompleted);
            }
            this.InvokeAsync("GetAccountTypes", new object[0], this.GetAccountTypesOperationCompleted, userState);
        }
        
        private void OnGetAccountTypesOperationCompleted(object arg) {
            if ((this.GetAccountTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountTypesCompleted(this, new GetAccountTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAccountTypeFields", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseAccountTypeField[] GetAccountTypeFields(long accountTypeId) {
            object[] results = this.Invoke("GetAccountTypeFields", new object[] {
                        accountTypeId});
            return ((WarehouseAccountTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountTypeFields(long accountTypeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountTypeFields", new object[] {
                        accountTypeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseAccountTypeField[] EndGetAccountTypeFields(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseAccountTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountTypeFieldsAsync(long accountTypeId) {
            this.GetAccountTypeFieldsAsync(accountTypeId, null);
        }
        
        /// <remarks/>
        public void GetAccountTypeFieldsAsync(long accountTypeId, object userState) {
            if ((this.GetAccountTypeFieldsOperationCompleted == null)) {
                this.GetAccountTypeFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountTypeFieldsOperationCompleted);
            }
            this.InvokeAsync("GetAccountTypeFields", new object[] {
                        accountTypeId}, this.GetAccountTypeFieldsOperationCompleted, userState);
        }
        
        private void OnGetAccountTypeFieldsOperationCompleted(object arg) {
            if ((this.GetAccountTypeFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountTypeFieldsCompleted(this, new GetAccountTypeFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAccountTypeHistoricalFields", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseAccountTypeField[] GetAccountTypeHistoricalFields(long accountTypeId) {
            object[] results = this.Invoke("GetAccountTypeHistoricalFields", new object[] {
                        accountTypeId});
            return ((WarehouseAccountTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountTypeHistoricalFields(long accountTypeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountTypeHistoricalFields", new object[] {
                        accountTypeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseAccountTypeField[] EndGetAccountTypeHistoricalFields(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseAccountTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountTypeHistoricalFieldsAsync(long accountTypeId) {
            this.GetAccountTypeHistoricalFieldsAsync(accountTypeId, null);
        }
        
        /// <remarks/>
        public void GetAccountTypeHistoricalFieldsAsync(long accountTypeId, object userState) {
            if ((this.GetAccountTypeHistoricalFieldsOperationCompleted == null)) {
                this.GetAccountTypeHistoricalFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountTypeHistoricalFieldsOperationCompleted);
            }
            this.InvokeAsync("GetAccountTypeHistoricalFields", new object[] {
                        accountTypeId}, this.GetAccountTypeHistoricalFieldsOperationCompleted, userState);
        }
        
        private void OnGetAccountTypeHistoricalFieldsOperationCompleted(object arg) {
            if ((this.GetAccountTypeHistoricalFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountTypeHistoricalFieldsCompleted(this, new GetAccountTypeHistoricalFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetCustomerTypes", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseCustomerType[] GetCustomerTypes() {
            object[] results = this.Invoke("GetCustomerTypes", new object[0]);
            return ((WarehouseCustomerType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerTypes(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCustomerTypes", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseCustomerType[] EndGetCustomerTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseCustomerType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerTypesAsync() {
            this.GetCustomerTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetCustomerTypesAsync(object userState) {
            if ((this.GetCustomerTypesOperationCompleted == null)) {
                this.GetCustomerTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerTypesOperationCompleted);
            }
            this.InvokeAsync("GetCustomerTypes", new object[0], this.GetCustomerTypesOperationCompleted, userState);
        }
        
        private void OnGetCustomerTypesOperationCompleted(object arg) {
            if ((this.GetCustomerTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerTypesCompleted(this, new GetCustomerTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetCustomerTypeFields", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseCustomerTypeField[] GetCustomerTypeFields(long customerTypeId) {
            object[] results = this.Invoke("GetCustomerTypeFields", new object[] {
                        customerTypeId});
            return ((WarehouseCustomerTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerTypeFields(long customerTypeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCustomerTypeFields", new object[] {
                        customerTypeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseCustomerTypeField[] EndGetCustomerTypeFields(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseCustomerTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerTypeFieldsAsync(long customerTypeId) {
            this.GetCustomerTypeFieldsAsync(customerTypeId, null);
        }
        
        /// <remarks/>
        public void GetCustomerTypeFieldsAsync(long customerTypeId, object userState) {
            if ((this.GetCustomerTypeFieldsOperationCompleted == null)) {
                this.GetCustomerTypeFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerTypeFieldsOperationCompleted);
            }
            this.InvokeAsync("GetCustomerTypeFields", new object[] {
                        customerTypeId}, this.GetCustomerTypeFieldsOperationCompleted, userState);
        }
        
        private void OnGetCustomerTypeFieldsOperationCompleted(object arg) {
            if ((this.GetCustomerTypeFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerTypeFieldsCompleted(this, new GetCustomerTypeFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetCustomerTypeHistoricalFields", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WarehouseCustomerTypeField[] GetCustomerTypeHistoricalFields(long customerTypeId) {
            object[] results = this.Invoke("GetCustomerTypeHistoricalFields", new object[] {
                        customerTypeId});
            return ((WarehouseCustomerTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCustomerTypeHistoricalFields(long customerTypeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCustomerTypeHistoricalFields", new object[] {
                        customerTypeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WarehouseCustomerTypeField[] EndGetCustomerTypeHistoricalFields(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WarehouseCustomerTypeField[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerTypeHistoricalFieldsAsync(long customerTypeId) {
            this.GetCustomerTypeHistoricalFieldsAsync(customerTypeId, null);
        }
        
        /// <remarks/>
        public void GetCustomerTypeHistoricalFieldsAsync(long customerTypeId, object userState) {
            if ((this.GetCustomerTypeHistoricalFieldsOperationCompleted == null)) {
                this.GetCustomerTypeHistoricalFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerTypeHistoricalFieldsOperationCompleted);
            }
            this.InvokeAsync("GetCustomerTypeHistoricalFields", new object[] {
                        customerTypeId}, this.GetCustomerTypeHistoricalFieldsOperationCompleted, userState);
        }
        
        private void OnGetCustomerTypeHistoricalFieldsOperationCompleted(object arg) {
            if ((this.GetCustomerTypeHistoricalFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerTypeHistoricalFieldsCompleted(this, new GetCustomerTypeHistoricalFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetEmailAccountsList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AccountBaseDTO[] GetEmailAccountsList() {
            object[] results = this.Invoke("GetEmailAccountsList", new object[0]);
            return ((AccountBaseDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEmailAccountsList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEmailAccountsList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public AccountBaseDTO[] EndGetEmailAccountsList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AccountBaseDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailAccountsListAsync() {
            this.GetEmailAccountsListAsync(null);
        }
        
        /// <remarks/>
        public void GetEmailAccountsListAsync(object userState) {
            if ((this.GetEmailAccountsListOperationCompleted == null)) {
                this.GetEmailAccountsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailAccountsListOperationCompleted);
            }
            this.InvokeAsync("GetEmailAccountsList", new object[0], this.GetEmailAccountsListOperationCompleted, userState);
        }
        
        private void OnGetEmailAccountsListOperationCompleted(object arg) {
            if ((this.GetEmailAccountsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailAccountsListCompleted(this, new GetEmailAccountsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyNamesForEmailAccount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStrategyNamesForEmailAccount(int id) {
            object[] results = this.Invoke("GetStrategyNamesForEmailAccount", new object[] {
                        id});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyNamesForEmailAccount(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyNamesForEmailAccount", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetStrategyNamesForEmailAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyNamesForEmailAccountAsync(int id) {
            this.GetStrategyNamesForEmailAccountAsync(id, null);
        }
        
        /// <remarks/>
        public void GetStrategyNamesForEmailAccountAsync(int id, object userState) {
            if ((this.GetStrategyNamesForEmailAccountOperationCompleted == null)) {
                this.GetStrategyNamesForEmailAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyNamesForEmailAccountOperationCompleted);
            }
            this.InvokeAsync("GetStrategyNamesForEmailAccount", new object[] {
                        id}, this.GetStrategyNamesForEmailAccountOperationCompleted, userState);
        }
        
        private void OnGetStrategyNamesForEmailAccountOperationCompleted(object arg) {
            if ((this.GetStrategyNamesForEmailAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyNamesForEmailAccountCompleted(this, new GetStrategyNamesForEmailAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteEmailAccount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteEmailAccount(int id, string signedDocument) {
            this.Invoke("DeleteEmailAccount", new object[] {
                        id,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteEmailAccount(int id, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteEmailAccount", new object[] {
                        id,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteEmailAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteEmailAccountAsync(int id, string signedDocument) {
            this.DeleteEmailAccountAsync(id, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteEmailAccountAsync(int id, string signedDocument, object userState) {
            if ((this.DeleteEmailAccountOperationCompleted == null)) {
                this.DeleteEmailAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEmailAccountOperationCompleted);
            }
            this.InvokeAsync("DeleteEmailAccount", new object[] {
                        id,
                        signedDocument}, this.DeleteEmailAccountOperationCompleted, userState);
        }
        
        private void OnDeleteEmailAccountOperationCompleted(object arg) {
            if ((this.DeleteEmailAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEmailAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/AddNewEmailAccount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EmailAccountsErrorCodes AddNewEmailAccount(AccountBaseDTO account, string signedDocument) {
            object[] results = this.Invoke("AddNewEmailAccount", new object[] {
                        account,
                        signedDocument});
            return ((EmailAccountsErrorCodes)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddNewEmailAccount(AccountBaseDTO account, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddNewEmailAccount", new object[] {
                        account,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public EmailAccountsErrorCodes EndAddNewEmailAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EmailAccountsErrorCodes)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewEmailAccountAsync(AccountBaseDTO account, string signedDocument) {
            this.AddNewEmailAccountAsync(account, signedDocument, null);
        }
        
        /// <remarks/>
        public void AddNewEmailAccountAsync(AccountBaseDTO account, string signedDocument, object userState) {
            if ((this.AddNewEmailAccountOperationCompleted == null)) {
                this.AddNewEmailAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewEmailAccountOperationCompleted);
            }
            this.InvokeAsync("AddNewEmailAccount", new object[] {
                        account,
                        signedDocument}, this.AddNewEmailAccountOperationCompleted, userState);
        }
        
        private void OnAddNewEmailAccountOperationCompleted(object arg) {
            if ((this.AddNewEmailAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewEmailAccountCompleted(this, new AddNewEmailAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetEmailAccountsListByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AccountBaseDTO[] GetEmailAccountsListByName(string name) {
            object[] results = this.Invoke("GetEmailAccountsListByName", new object[] {
                        name});
            return ((AccountBaseDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEmailAccountsListByName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEmailAccountsListByName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public AccountBaseDTO[] EndGetEmailAccountsListByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AccountBaseDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEmailAccountsListByNameAsync(string name) {
            this.GetEmailAccountsListByNameAsync(name, null);
        }
        
        /// <remarks/>
        public void GetEmailAccountsListByNameAsync(string name, object userState) {
            if ((this.GetEmailAccountsListByNameOperationCompleted == null)) {
                this.GetEmailAccountsListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmailAccountsListByNameOperationCompleted);
            }
            this.InvokeAsync("GetEmailAccountsListByName", new object[] {
                        name}, this.GetEmailAccountsListByNameOperationCompleted, userState);
        }
        
        private void OnGetEmailAccountsListByNameOperationCompleted(object arg) {
            if ((this.GetEmailAccountsListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmailAccountsListByNameCompleted(this, new GetEmailAccountsListByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetActiveEmailAccountByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AccountBaseDTO GetActiveEmailAccountByName(string name) {
            object[] results = this.Invoke("GetActiveEmailAccountByName", new object[] {
                        name});
            return ((AccountBaseDTO)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActiveEmailAccountByName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActiveEmailAccountByName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public AccountBaseDTO EndGetActiveEmailAccountByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AccountBaseDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveEmailAccountByNameAsync(string name) {
            this.GetActiveEmailAccountByNameAsync(name, null);
        }
        
        /// <remarks/>
        public void GetActiveEmailAccountByNameAsync(string name, object userState) {
            if ((this.GetActiveEmailAccountByNameOperationCompleted == null)) {
                this.GetActiveEmailAccountByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveEmailAccountByNameOperationCompleted);
            }
            this.InvokeAsync("GetActiveEmailAccountByName", new object[] {
                        name}, this.GetActiveEmailAccountByNameOperationCompleted, userState);
        }
        
        private void OnGetActiveEmailAccountByNameOperationCompleted(object arg) {
            if ((this.GetActiveEmailAccountByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveEmailAccountByNameCompleted(this, new GetActiveEmailAccountByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckName(AccountBaseDTO account) {
            object[] results = this.Invoke("CheckName", new object[] {
                        account});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckName(AccountBaseDTO account, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckName", new object[] {
                        account}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckNameAsync(AccountBaseDTO account) {
            this.CheckNameAsync(account, null);
        }
        
        /// <remarks/>
        public void CheckNameAsync(AccountBaseDTO account, object userState) {
            if ((this.CheckNameOperationCompleted == null)) {
                this.CheckNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckNameOperationCompleted);
            }
            this.InvokeAsync("CheckName", new object[] {
                        account}, this.CheckNameOperationCompleted, userState);
        }
        
        private void OnCheckNameOperationCompleted(object arg) {
            if ((this.CheckNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckNameCompleted(this, new CheckNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/Dummy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Dummy([System.Xml.Serialization.XmlElementAttribute("dummy")] ErrorCode dummy1) {
            this.Invoke("Dummy", new object[] {
                        dummy1});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDummy(ErrorCode dummy1, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Dummy", new object[] {
                        dummy1}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDummy(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DummyAsync(ErrorCode dummy1) {
            this.DummyAsync(dummy1, null);
        }
        
        /// <remarks/>
        public void DummyAsync(ErrorCode dummy1, object userState) {
            if ((this.DummyOperationCompleted == null)) {
                this.DummyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDummyOperationCompleted);
            }
            this.InvokeAsync("Dummy", new object[] {
                        dummy1}, this.DummyOperationCompleted, userState);
        }
        
        private void OnDummyOperationCompleted(object arg) {
            if ((this.DummyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DummyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNodeList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetNodeList() {
            object[] results = this.Invoke("GetNodeList", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodeList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodeList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetNodeList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetNodeListAsync() {
            this.GetNodeListAsync(null);
        }
        
        /// <remarks/>
        public void GetNodeListAsync(object userState) {
            if ((this.GetNodeListOperationCompleted == null)) {
                this.GetNodeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodeListOperationCompleted);
            }
            this.InvokeAsync("GetNodeList", new object[0], this.GetNodeListOperationCompleted, userState);
        }
        
        private void OnGetNodeListOperationCompleted(object arg) {
            if ((this.GetNodeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodeListCompleted(this, new GetNodeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetNodesSimple", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Node[] GetNodesSimple() {
            object[] results = this.Invoke("GetNodesSimple", new object[0]);
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodesSimple(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodesSimple", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Node[] EndGetNodesSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNodesSimpleAsync() {
            this.GetNodesSimpleAsync(null);
        }
        
        /// <remarks/>
        public void GetNodesSimpleAsync(object userState) {
            if ((this.GetNodesSimpleOperationCompleted == null)) {
                this.GetNodesSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNodesSimpleOperationCompleted);
            }
            this.InvokeAsync("GetNodesSimple", new object[0], this.GetNodesSimpleOperationCompleted, userState);
        }
        
        private void OnGetNodesSimpleOperationCompleted(object arg) {
            if ((this.GetNodesSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNodesSimpleCompleted(this, new GetNodesSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllNodesSimple", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Node[] GetAllNodesSimple() {
            object[] results = this.Invoke("GetAllNodesSimple", new object[0]);
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllNodesSimple(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllNodesSimple", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public Node[] EndGetAllNodesSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Node[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllNodesSimpleAsync() {
            this.GetAllNodesSimpleAsync(null);
        }
        
        /// <remarks/>
        public void GetAllNodesSimpleAsync(object userState) {
            if ((this.GetAllNodesSimpleOperationCompleted == null)) {
                this.GetAllNodesSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllNodesSimpleOperationCompleted);
            }
            this.InvokeAsync("GetAllNodesSimple", new object[0], this.GetAllNodesSimpleOperationCompleted, userState);
        }
        
        private void OnGetAllNodesSimpleOperationCompleted(object arg) {
            if ((this.GetAllNodesSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllNodesSimpleCompleted(this, new GetAllNodesSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateNodeSettings", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNodeSettings(long nodeId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<long> executionDuration, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<bool> isHardReaction) {
            this.Invoke("UpdateNodeSettings", new object[] {
                        nodeId,
                        executionDuration,
                        isHardReaction});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateNodeSettings(long nodeId, System.Nullable<long> executionDuration, System.Nullable<bool> isHardReaction, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateNodeSettings", new object[] {
                        nodeId,
                        executionDuration,
                        isHardReaction}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateNodeSettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateNodeSettingsAsync(long nodeId, System.Nullable<long> executionDuration, System.Nullable<bool> isHardReaction) {
            this.UpdateNodeSettingsAsync(nodeId, executionDuration, isHardReaction, null);
        }
        
        /// <remarks/>
        public void UpdateNodeSettingsAsync(long nodeId, System.Nullable<long> executionDuration, System.Nullable<bool> isHardReaction, object userState) {
            if ((this.UpdateNodeSettingsOperationCompleted == null)) {
                this.UpdateNodeSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNodeSettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateNodeSettings", new object[] {
                        nodeId,
                        executionDuration,
                        isHardReaction}, this.UpdateNodeSettingsOperationCompleted, userState);
        }
        
        private void OnUpdateNodeSettingsOperationCompleted(object arg) {
            if ((this.UpdateNodeSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNodeSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateNodeApplication", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNodeApplication(long nodeId, int applicationId) {
            this.Invoke("UpdateNodeApplication", new object[] {
                        nodeId,
                        applicationId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateNodeApplication(long nodeId, int applicationId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateNodeApplication", new object[] {
                        nodeId,
                        applicationId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateNodeApplication(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateNodeApplicationAsync(long nodeId, int applicationId) {
            this.UpdateNodeApplicationAsync(nodeId, applicationId, null);
        }
        
        /// <remarks/>
        public void UpdateNodeApplicationAsync(long nodeId, int applicationId, object userState) {
            if ((this.UpdateNodeApplicationOperationCompleted == null)) {
                this.UpdateNodeApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNodeApplicationOperationCompleted);
            }
            this.InvokeAsync("UpdateNodeApplication", new object[] {
                        nodeId,
                        applicationId}, this.UpdateNodeApplicationOperationCompleted, userState);
        }
        
        private void OnUpdateNodeApplicationOperationCompleted(object arg) {
            if ((this.UpdateNodeApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNodeApplicationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/ExecuteSql", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteSql(string sql) {
            this.Invoke("ExecuteSql", new object[] {
                        sql});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteSql(string sql, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSql", new object[] {
                        sql}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteSql(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string sql) {
            this.ExecuteSqlAsync(sql, null);
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string sql, object userState) {
            if ((this.ExecuteSqlOperationCompleted == null)) {
                this.ExecuteSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSqlOperationCompleted);
            }
            this.InvokeAsync("ExecuteSql", new object[] {
                        sql}, this.ExecuteSqlOperationCompleted, userState);
        }
        
        private void OnExecuteSqlOperationCompleted(object arg) {
            if ((this.ExecuteSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSqlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/IsDigitalSignatureRequired", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsDigitalSignatureRequired() {
            object[] results = this.Invoke("IsDigitalSignatureRequired", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsDigitalSignatureRequired(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsDigitalSignatureRequired", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsDigitalSignatureRequired(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsDigitalSignatureRequiredAsync() {
            this.IsDigitalSignatureRequiredAsync(null);
        }
        
        /// <remarks/>
        public void IsDigitalSignatureRequiredAsync(object userState) {
            if ((this.IsDigitalSignatureRequiredOperationCompleted == null)) {
                this.IsDigitalSignatureRequiredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDigitalSignatureRequiredOperationCompleted);
            }
            this.InvokeAsync("IsDigitalSignatureRequired", new object[0], this.IsDigitalSignatureRequiredOperationCompleted, userState);
        }
        
        private void OnIsDigitalSignatureRequiredOperationCompleted(object arg) {
            if ((this.IsDigitalSignatureRequiredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDigitalSignatureRequiredCompleted(this, new IsDigitalSignatureRequiredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UploadNode", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UploadNode(string comment, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ndx, string signedDocument) {
            object[] results = this.Invoke("UploadNode", new object[] {
                        comment,
                        ndx,
                        signedDocument});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadNode(string comment, byte[] ndx, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadNode", new object[] {
                        comment,
                        ndx,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUploadNode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadNodeAsync(string comment, byte[] ndx, string signedDocument) {
            this.UploadNodeAsync(comment, ndx, signedDocument, null);
        }
        
        /// <remarks/>
        public void UploadNodeAsync(string comment, byte[] ndx, string signedDocument, object userState) {
            if ((this.UploadNodeOperationCompleted == null)) {
                this.UploadNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadNodeOperationCompleted);
            }
            this.InvokeAsync("UploadNode", new object[] {
                        comment,
                        ndx,
                        signedDocument}, this.UploadNodeOperationCompleted, userState);
        }
        
        private void OnUploadNodeOperationCompleted(object arg) {
            if ((this.UploadNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadNodeCompleted(this, new UploadNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UploadNodeSimple", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UploadNodeSimple(string comment, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ndx, string signedDocument, int secAppId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<long> executionDuration, bool isHardReaction) {
            object[] results = this.Invoke("UploadNodeSimple", new object[] {
                        comment,
                        ndx,
                        signedDocument,
                        secAppId,
                        executionDuration,
                        isHardReaction});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadNodeSimple(string comment, byte[] ndx, string signedDocument, int secAppId, System.Nullable<long> executionDuration, bool isHardReaction, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadNodeSimple", new object[] {
                        comment,
                        ndx,
                        signedDocument,
                        secAppId,
                        executionDuration,
                        isHardReaction}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUploadNodeSimple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadNodeSimpleAsync(string comment, byte[] ndx, string signedDocument, int secAppId, System.Nullable<long> executionDuration, bool isHardReaction) {
            this.UploadNodeSimpleAsync(comment, ndx, signedDocument, secAppId, executionDuration, isHardReaction, null);
        }
        
        /// <remarks/>
        public void UploadNodeSimpleAsync(string comment, byte[] ndx, string signedDocument, int secAppId, System.Nullable<long> executionDuration, bool isHardReaction, object userState) {
            if ((this.UploadNodeSimpleOperationCompleted == null)) {
                this.UploadNodeSimpleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadNodeSimpleOperationCompleted);
            }
            this.InvokeAsync("UploadNodeSimple", new object[] {
                        comment,
                        ndx,
                        signedDocument,
                        secAppId,
                        executionDuration,
                        isHardReaction}, this.UploadNodeSimpleOperationCompleted, userState);
        }
        
        private void OnUploadNodeSimpleOperationCompleted(object arg) {
            if ((this.UploadNodeSimpleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadNodeSimpleCompleted(this, new UploadNodeSimpleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteNode", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteNode(string nodeName, string signedDocument) {
            this.Invoke("DeleteNode", new object[] {
                        nodeName,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteNode(string nodeName, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteNode", new object[] {
                        nodeName,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteNode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteNodeAsync(string nodeName, string signedDocument) {
            this.DeleteNodeAsync(nodeName, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteNodeAsync(string nodeName, string signedDocument, object userState) {
            if ((this.DeleteNodeOperationCompleted == null)) {
                this.DeleteNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteNodeOperationCompleted);
            }
            this.InvokeAsync("DeleteNode", new object[] {
                        nodeName,
                        signedDocument}, this.DeleteNodeOperationCompleted, userState);
        }
        
        private void OnDeleteNodeOperationCompleted(object arg) {
            if ((this.DeleteNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckNodeStrategyRel", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] CheckNodeStrategyRel(int nodeId) {
            object[] results = this.Invoke("CheckNodeStrategyRel", new object[] {
                        nodeId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckNodeStrategyRel(int nodeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckNodeStrategyRel", new object[] {
                        nodeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndCheckNodeStrategyRel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckNodeStrategyRelAsync(int nodeId) {
            this.CheckNodeStrategyRelAsync(nodeId, null);
        }
        
        /// <remarks/>
        public void CheckNodeStrategyRelAsync(int nodeId, object userState) {
            if ((this.CheckNodeStrategyRelOperationCompleted == null)) {
                this.CheckNodeStrategyRelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckNodeStrategyRelOperationCompleted);
            }
            this.InvokeAsync("CheckNodeStrategyRel", new object[] {
                        nodeId}, this.CheckNodeStrategyRelOperationCompleted, userState);
        }
        
        private void OnCheckNodeStrategyRelOperationCompleted(object arg) {
            if ((this.CheckNodeStrategyRelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckNodeStrategyRelCompleted(this, new CheckNodeStrategyRelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdatePublicName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PublicName UpdatePublicName(PublicName editName) {
            object[] results = this.Invoke("UpdatePublicName", new object[] {
                        editName});
            return ((PublicName)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePublicName(PublicName editName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePublicName", new object[] {
                        editName}, callback, asyncState);
        }
        
        /// <remarks/>
        public PublicName EndUpdatePublicName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PublicName)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePublicNameAsync(PublicName editName) {
            this.UpdatePublicNameAsync(editName, null);
        }
        
        /// <remarks/>
        public void UpdatePublicNameAsync(PublicName editName, object userState) {
            if ((this.UpdatePublicNameOperationCompleted == null)) {
                this.UpdatePublicNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePublicNameOperationCompleted);
            }
            this.InvokeAsync("UpdatePublicName", new object[] {
                        editName}, this.UpdatePublicNameOperationCompleted, userState);
        }
        
        private void OnUpdatePublicNameOperationCompleted(object arg) {
            if ((this.UpdatePublicNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePublicNameCompleted(this, new UpdatePublicNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeletePublishName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePublishName(PublicName name, string signedDocument) {
            this.Invoke("DeletePublishName", new object[] {
                        name,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePublishName(PublicName name, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePublishName", new object[] {
                        name,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeletePublishName(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeletePublishNameAsync(PublicName name, string signedDocument) {
            this.DeletePublishNameAsync(name, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeletePublishNameAsync(PublicName name, string signedDocument, object userState) {
            if ((this.DeletePublishNameOperationCompleted == null)) {
                this.DeletePublishNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePublishNameOperationCompleted);
            }
            this.InvokeAsync("DeletePublishName", new object[] {
                        name,
                        signedDocument}, this.DeletePublishNameOperationCompleted, userState);
        }
        
        private void OnDeletePublishNameOperationCompleted(object arg) {
            if ((this.DeletePublishNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePublishNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateStrategy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PublicStrategy UpdateStrategy(PublicStrategy strategy, string signedDocument) {
            object[] results = this.Invoke("UpdateStrategy", new object[] {
                        strategy,
                        signedDocument});
            return ((PublicStrategy)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStrategy(PublicStrategy strategy, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStrategy", new object[] {
                        strategy,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public PublicStrategy EndUpdateStrategy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PublicStrategy)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStrategyAsync(PublicStrategy strategy, string signedDocument) {
            this.UpdateStrategyAsync(strategy, signedDocument, null);
        }
        
        /// <remarks/>
        public void UpdateStrategyAsync(PublicStrategy strategy, string signedDocument, object userState) {
            if ((this.UpdateStrategyOperationCompleted == null)) {
                this.UpdateStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStrategyOperationCompleted);
            }
            this.InvokeAsync("UpdateStrategy", new object[] {
                        strategy,
                        signedDocument}, this.UpdateStrategyOperationCompleted, userState);
        }
        
        private void OnUpdateStrategyOperationCompleted(object arg) {
            if ((this.UpdateStrategyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStrategyCompleted(this, new UpdateStrategyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/PublishStrategy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PublishStrategy(PublicStrategy strategy, PublicName name, string signedDocument) {
            this.Invoke("PublishStrategy", new object[] {
                        strategy,
                        name,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPublishStrategy(PublicStrategy strategy, PublicName name, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PublishStrategy", new object[] {
                        strategy,
                        name,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPublishStrategy(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PublishStrategyAsync(PublicStrategy strategy, PublicName name, string signedDocument) {
            this.PublishStrategyAsync(strategy, name, signedDocument, null);
        }
        
        /// <remarks/>
        public void PublishStrategyAsync(PublicStrategy strategy, PublicName name, string signedDocument, object userState) {
            if ((this.PublishStrategyOperationCompleted == null)) {
                this.PublishStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPublishStrategyOperationCompleted);
            }
            this.InvokeAsync("PublishStrategy", new object[] {
                        strategy,
                        name,
                        signedDocument}, this.PublishStrategyOperationCompleted, userState);
        }
        
        private void OnPublishStrategyOperationCompleted(object arg) {
            if ((this.PublishStrategyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PublishStrategyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeletePublishRel", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePublishRel(PublicStrategy strategy, string signedDocument) {
            this.Invoke("DeletePublishRel", new object[] {
                        strategy,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePublishRel(PublicStrategy strategy, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePublishRel", new object[] {
                        strategy,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeletePublishRel(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeletePublishRelAsync(PublicStrategy strategy, string signedDocument) {
            this.DeletePublishRelAsync(strategy, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeletePublishRelAsync(PublicStrategy strategy, string signedDocument, object userState) {
            if ((this.DeletePublishRelOperationCompleted == null)) {
                this.DeletePublishRelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePublishRelOperationCompleted);
            }
            this.InvokeAsync("DeletePublishRel", new object[] {
                        strategy,
                        signedDocument}, this.DeletePublishRelOperationCompleted, userState);
        }
        
        private void OnDeletePublishRelOperationCompleted(object arg) {
            if ((this.DeletePublishRelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePublishRelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetPublishNamesListWithCount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PublicName[] GetPublishNamesListWithCount() {
            object[] results = this.Invoke("GetPublishNamesListWithCount", new object[0]);
            return ((PublicName[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPublishNamesListWithCount(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPublishNamesListWithCount", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public PublicName[] EndGetPublishNamesListWithCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PublicName[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublishNamesListWithCountAsync() {
            this.GetPublishNamesListWithCountAsync(null);
        }
        
        /// <remarks/>
        public void GetPublishNamesListWithCountAsync(object userState) {
            if ((this.GetPublishNamesListWithCountOperationCompleted == null)) {
                this.GetPublishNamesListWithCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublishNamesListWithCountOperationCompleted);
            }
            this.InvokeAsync("GetPublishNamesListWithCount", new object[0], this.GetPublishNamesListWithCountOperationCompleted, userState);
        }
        
        private void OnGetPublishNamesListWithCountOperationCompleted(object arg) {
            if ((this.GetPublishNamesListWithCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublishNamesListWithCountCompleted(this, new GetPublishNamesListWithCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetPublishNamesList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PublicName[] GetPublishNamesList() {
            object[] results = this.Invoke("GetPublishNamesList", new object[0]);
            return ((PublicName[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPublishNamesList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPublishNamesList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public PublicName[] EndGetPublishNamesList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PublicName[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublishNamesListAsync() {
            this.GetPublishNamesListAsync(null);
        }
        
        /// <remarks/>
        public void GetPublishNamesListAsync(object userState) {
            if ((this.GetPublishNamesListOperationCompleted == null)) {
                this.GetPublishNamesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublishNamesListOperationCompleted);
            }
            this.InvokeAsync("GetPublishNamesList", new object[0], this.GetPublishNamesListOperationCompleted, userState);
        }
        
        private void OnGetPublishNamesListOperationCompleted(object arg) {
            if ((this.GetPublishNamesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublishNamesListCompleted(this, new GetPublishNamesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAssignedStrategiesList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PublicStrategy[] GetAssignedStrategiesList(PublicName publicName) {
            object[] results = this.Invoke("GetAssignedStrategiesList", new object[] {
                        publicName});
            return ((PublicStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAssignedStrategiesList(PublicName publicName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAssignedStrategiesList", new object[] {
                        publicName}, callback, asyncState);
        }
        
        /// <remarks/>
        public PublicStrategy[] EndGetAssignedStrategiesList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PublicStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAssignedStrategiesListAsync(PublicName publicName) {
            this.GetAssignedStrategiesListAsync(publicName, null);
        }
        
        /// <remarks/>
        public void GetAssignedStrategiesListAsync(PublicName publicName, object userState) {
            if ((this.GetAssignedStrategiesListOperationCompleted == null)) {
                this.GetAssignedStrategiesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssignedStrategiesListOperationCompleted);
            }
            this.InvokeAsync("GetAssignedStrategiesList", new object[] {
                        publicName}, this.GetAssignedStrategiesListOperationCompleted, userState);
        }
        
        private void OnGetAssignedStrategiesListOperationCompleted(object arg) {
            if ((this.GetAssignedStrategiesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssignedStrategiesListCompleted(this, new GetAssignedStrategiesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/BeginLock", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long BeginLock(string entityType, int lockTimeout) {
            object[] results = this.Invoke("BeginLock", new object[] {
                        entityType,
                        lockTimeout});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBeginLock(string entityType, int lockTimeout, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BeginLock", new object[] {
                        entityType,
                        lockTimeout}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndBeginLock(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void BeginLockAsync(string entityType, int lockTimeout) {
            this.BeginLockAsync(entityType, lockTimeout, null);
        }
        
        /// <remarks/>
        public void BeginLockAsync(string entityType, int lockTimeout, object userState) {
            if ((this.BeginLockOperationCompleted == null)) {
                this.BeginLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBeginLockOperationCompleted);
            }
            this.InvokeAsync("BeginLock", new object[] {
                        entityType,
                        lockTimeout}, this.BeginLockOperationCompleted, userState);
        }
        
        private void OnBeginLockOperationCompleted(object arg) {
            if ((this.BeginLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BeginLockCompleted(this, new BeginLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckStatus", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckStatus(long lockId) {
            object[] results = this.Invoke("CheckStatus", new object[] {
                        lockId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckStatus(long lockId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckStatus", new object[] {
                        lockId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckStatusAsync(long lockId) {
            this.CheckStatusAsync(lockId, null);
        }
        
        /// <remarks/>
        public void CheckStatusAsync(long lockId, object userState) {
            if ((this.CheckStatusOperationCompleted == null)) {
                this.CheckStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckStatusOperationCompleted);
            }
            this.InvokeAsync("CheckStatus", new object[] {
                        lockId}, this.CheckStatusOperationCompleted, userState);
        }
        
        private void OnCheckStatusOperationCompleted(object arg) {
            if ((this.CheckStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckStatusCompleted(this, new CheckStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/ReleaseLock", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReleaseLock(long lockId) {
            this.Invoke("ReleaseLock", new object[] {
                        lockId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReleaseLock(long lockId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReleaseLock", new object[] {
                        lockId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReleaseLock(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReleaseLockAsync(long lockId) {
            this.ReleaseLockAsync(lockId, null);
        }
        
        /// <remarks/>
        public void ReleaseLockAsync(long lockId, object userState) {
            if ((this.ReleaseLockOperationCompleted == null)) {
                this.ReleaseLockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseLockOperationCompleted);
            }
            this.InvokeAsync("ReleaseLock", new object[] {
                        lockId}, this.ReleaseLockOperationCompleted, userState);
        }
        
        private void OnReleaseLockOperationCompleted(object arg) {
            if ((this.ReleaseLockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseLockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTreeAttachmentsForNode", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TreeAttachDTO[] GetTreeAttachmentsForNode(int nodeId) {
            object[] results = this.Invoke("GetTreeAttachmentsForNode", new object[] {
                        nodeId});
            return ((TreeAttachDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTreeAttachmentsForNode(int nodeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTreeAttachmentsForNode", new object[] {
                        nodeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TreeAttachDTO[] EndGetTreeAttachmentsForNode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TreeAttachDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTreeAttachmentsForNodeAsync(int nodeId) {
            this.GetTreeAttachmentsForNodeAsync(nodeId, null);
        }
        
        /// <remarks/>
        public void GetTreeAttachmentsForNodeAsync(int nodeId, object userState) {
            if ((this.GetTreeAttachmentsForNodeOperationCompleted == null)) {
                this.GetTreeAttachmentsForNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTreeAttachmentsForNodeOperationCompleted);
            }
            this.InvokeAsync("GetTreeAttachmentsForNode", new object[] {
                        nodeId}, this.GetTreeAttachmentsForNodeOperationCompleted, userState);
        }
        
        private void OnGetTreeAttachmentsForNodeOperationCompleted(object arg) {
            if ((this.GetTreeAttachmentsForNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTreeAttachmentsForNodeCompleted(this, new GetTreeAttachmentsForNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/BindTemplateToAttach", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BindTemplateToAttach(int templateId, int nodeid, string attachControlName, string groupName) {
            this.Invoke("BindTemplateToAttach", new object[] {
                        templateId,
                        nodeid,
                        attachControlName,
                        groupName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBindTemplateToAttach(int templateId, int nodeid, string attachControlName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BindTemplateToAttach", new object[] {
                        templateId,
                        nodeid,
                        attachControlName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndBindTemplateToAttach(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void BindTemplateToAttachAsync(int templateId, int nodeid, string attachControlName, string groupName) {
            this.BindTemplateToAttachAsync(templateId, nodeid, attachControlName, groupName, null);
        }
        
        /// <remarks/>
        public void BindTemplateToAttachAsync(int templateId, int nodeid, string attachControlName, string groupName, object userState) {
            if ((this.BindTemplateToAttachOperationCompleted == null)) {
                this.BindTemplateToAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindTemplateToAttachOperationCompleted);
            }
            this.InvokeAsync("BindTemplateToAttach", new object[] {
                        templateId,
                        nodeid,
                        attachControlName,
                        groupName}, this.BindTemplateToAttachOperationCompleted, userState);
        }
        
        private void OnBindTemplateToAttachOperationCompleted(object arg) {
            if ((this.BindTemplateToAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindTemplateToAttachCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/BindTemplatesToAttachments", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BindTemplatesToAttachments(TreeAttachTemplateLinkDTO[] links) {
            this.Invoke("BindTemplatesToAttachments", new object[] {
                        links});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBindTemplatesToAttachments(TreeAttachTemplateLinkDTO[] links, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BindTemplatesToAttachments", new object[] {
                        links}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndBindTemplatesToAttachments(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void BindTemplatesToAttachmentsAsync(TreeAttachTemplateLinkDTO[] links) {
            this.BindTemplatesToAttachmentsAsync(links, null);
        }
        
        /// <remarks/>
        public void BindTemplatesToAttachmentsAsync(TreeAttachTemplateLinkDTO[] links, object userState) {
            if ((this.BindTemplatesToAttachmentsOperationCompleted == null)) {
                this.BindTemplatesToAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindTemplatesToAttachmentsOperationCompleted);
            }
            this.InvokeAsync("BindTemplatesToAttachments", new object[] {
                        links}, this.BindTemplatesToAttachmentsOperationCompleted, userState);
        }
        
        private void OnBindTemplatesToAttachmentsOperationCompleted(object arg) {
            if ((this.BindTemplatesToAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindTemplatesToAttachmentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UnBindTemplatesToAttachments", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnBindTemplatesToAttachments(TreeAttachTemplateLinkDTO[] links) {
            this.Invoke("UnBindTemplatesToAttachments", new object[] {
                        links});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnBindTemplatesToAttachments(TreeAttachTemplateLinkDTO[] links, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnBindTemplatesToAttachments", new object[] {
                        links}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnBindTemplatesToAttachments(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnBindTemplatesToAttachmentsAsync(TreeAttachTemplateLinkDTO[] links) {
            this.UnBindTemplatesToAttachmentsAsync(links, null);
        }
        
        /// <remarks/>
        public void UnBindTemplatesToAttachmentsAsync(TreeAttachTemplateLinkDTO[] links, object userState) {
            if ((this.UnBindTemplatesToAttachmentsOperationCompleted == null)) {
                this.UnBindTemplatesToAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnBindTemplatesToAttachmentsOperationCompleted);
            }
            this.InvokeAsync("UnBindTemplatesToAttachments", new object[] {
                        links}, this.UnBindTemplatesToAttachmentsOperationCompleted, userState);
        }
        
        private void OnUnBindTemplatesToAttachmentsOperationCompleted(object arg) {
            if ((this.UnBindTemplatesToAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnBindTemplatesToAttachmentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UnBindTemplateFromAttach", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnBindTemplateFromAttach(int templateId, int nodeid, string attachControlName, string groupName) {
            this.Invoke("UnBindTemplateFromAttach", new object[] {
                        templateId,
                        nodeid,
                        attachControlName,
                        groupName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnBindTemplateFromAttach(int templateId, int nodeid, string attachControlName, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnBindTemplateFromAttach", new object[] {
                        templateId,
                        nodeid,
                        attachControlName,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnBindTemplateFromAttach(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnBindTemplateFromAttachAsync(int templateId, int nodeid, string attachControlName, string groupName) {
            this.UnBindTemplateFromAttachAsync(templateId, nodeid, attachControlName, groupName, null);
        }
        
        /// <remarks/>
        public void UnBindTemplateFromAttachAsync(int templateId, int nodeid, string attachControlName, string groupName, object userState) {
            if ((this.UnBindTemplateFromAttachOperationCompleted == null)) {
                this.UnBindTemplateFromAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnBindTemplateFromAttachOperationCompleted);
            }
            this.InvokeAsync("UnBindTemplateFromAttach", new object[] {
                        templateId,
                        nodeid,
                        attachControlName,
                        groupName}, this.UnBindTemplateFromAttachOperationCompleted, userState);
        }
        
        private void OnUnBindTemplateFromAttachOperationCompleted(object arg) {
            if ((this.UnBindTemplateFromAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnBindTemplateFromAttachCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTreeAttachTemplateLinks", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TreeAttachTemplateLinkDTO[] GetTreeAttachTemplateLinks() {
            object[] results = this.Invoke("GetTreeAttachTemplateLinks", new object[0]);
            return ((TreeAttachTemplateLinkDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTreeAttachTemplateLinks(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTreeAttachTemplateLinks", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public TreeAttachTemplateLinkDTO[] EndGetTreeAttachTemplateLinks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TreeAttachTemplateLinkDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTreeAttachTemplateLinksAsync() {
            this.GetTreeAttachTemplateLinksAsync(null);
        }
        
        /// <remarks/>
        public void GetTreeAttachTemplateLinksAsync(object userState) {
            if ((this.GetTreeAttachTemplateLinksOperationCompleted == null)) {
                this.GetTreeAttachTemplateLinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTreeAttachTemplateLinksOperationCompleted);
            }
            this.InvokeAsync("GetTreeAttachTemplateLinks", new object[0], this.GetTreeAttachTemplateLinksOperationCompleted, userState);
        }
        
        private void OnGetTreeAttachTemplateLinksOperationCompleted(object arg) {
            if ((this.GetTreeAttachTemplateLinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTreeAttachTemplateLinksCompleted(this, new GetTreeAttachTemplateLinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateAttachmentTemplates", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAttachmentTemplates() {
            this.Invoke("UpdateAttachmentTemplates", new object[0]);
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateAttachmentTemplates(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateAttachmentTemplates", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateAttachmentTemplates(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAttachmentTemplatesAsync() {
            this.UpdateAttachmentTemplatesAsync(null);
        }
        
        /// <remarks/>
        public void UpdateAttachmentTemplatesAsync(object userState) {
            if ((this.UpdateAttachmentTemplatesOperationCompleted == null)) {
                this.UpdateAttachmentTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAttachmentTemplatesOperationCompleted);
            }
            this.InvokeAsync("UpdateAttachmentTemplates", new object[0], this.UpdateAttachmentTemplatesOperationCompleted, userState);
        }
        
        private void OnUpdateAttachmentTemplatesOperationCompleted(object arg) {
            if ((this.UpdateAttachmentTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAttachmentTemplatesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExtStrategy[] GetStrategyList(string strategyType) {
            object[] results = this.Invoke("GetStrategyList", new object[] {
                        strategyType});
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyList(string strategyType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyList", new object[] {
                        strategyType}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExtStrategy[] EndGetStrategyList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyListAsync(string strategyType) {
            this.GetStrategyListAsync(strategyType, null);
        }
        
        /// <remarks/>
        public void GetStrategyListAsync(string strategyType, object userState) {
            if ((this.GetStrategyListOperationCompleted == null)) {
                this.GetStrategyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyListOperationCompleted);
            }
            this.InvokeAsync("GetStrategyList", new object[] {
                        strategyType}, this.GetStrategyListOperationCompleted, userState);
        }
        
        private void OnGetStrategyListOperationCompleted(object arg) {
            if ((this.GetStrategyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyListCompleted(this, new GetStrategyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyDetails", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExtStrategy[] GetStrategyDetails(string displayName) {
            object[] results = this.Invoke("GetStrategyDetails", new object[] {
                        displayName});
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyDetails(string displayName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyDetails", new object[] {
                        displayName}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExtStrategy[] EndGetStrategyDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExtStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyDetailsAsync(string displayName) {
            this.GetStrategyDetailsAsync(displayName, null);
        }
        
        /// <remarks/>
        public void GetStrategyDetailsAsync(string displayName, object userState) {
            if ((this.GetStrategyDetailsOperationCompleted == null)) {
                this.GetStrategyDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyDetailsOperationCompleted);
            }
            this.InvokeAsync("GetStrategyDetails", new object[] {
                        displayName}, this.GetStrategyDetailsOperationCompleted, userState);
        }
        
        private void OnGetStrategyDetailsOperationCompleted(object arg) {
            if ((this.GetStrategyDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyDetailsCompleted(this, new GetStrategyDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyReferencesCount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StrategyReferencesCount[] GetStrategyReferencesCount(string displayName) {
            object[] results = this.Invoke("GetStrategyReferencesCount", new object[] {
                        displayName});
            return ((StrategyReferencesCount[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyReferencesCount(string displayName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyReferencesCount", new object[] {
                        displayName}, callback, asyncState);
        }
        
        /// <remarks/>
        public StrategyReferencesCount[] EndGetStrategyReferencesCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StrategyReferencesCount[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyReferencesCountAsync(string displayName) {
            this.GetStrategyReferencesCountAsync(displayName, null);
        }
        
        /// <remarks/>
        public void GetStrategyReferencesCountAsync(string displayName, object userState) {
            if ((this.GetStrategyReferencesCountOperationCompleted == null)) {
                this.GetStrategyReferencesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyReferencesCountOperationCompleted);
            }
            this.InvokeAsync("GetStrategyReferencesCount", new object[] {
                        displayName}, this.GetStrategyReferencesCountOperationCompleted, userState);
        }
        
        private void OnGetStrategyReferencesCountOperationCompleted(object arg) {
            if ((this.GetStrategyReferencesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyReferencesCountCompleted(this, new GetStrategyReferencesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteStrategy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteStrategy(long strategyId, string signedDocument) {
            this.Invoke("DeleteStrategy", new object[] {
                        strategyId,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteStrategy(long strategyId, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteStrategy", new object[] {
                        strategyId,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteStrategy(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteStrategyAsync(long strategyId, string signedDocument) {
            this.DeleteStrategyAsync(strategyId, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteStrategyAsync(long strategyId, string signedDocument, object userState) {
            if ((this.DeleteStrategyOperationCompleted == null)) {
                this.DeleteStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteStrategyOperationCompleted);
            }
            this.InvokeAsync("DeleteStrategy", new object[] {
                        strategyId,
                        signedDocument}, this.DeleteStrategyOperationCompleted, userState);
        }
        
        private void OnDeleteStrategyOperationCompleted(object arg) {
            if ((this.DeleteStrategyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteStrategyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/IsSuspend", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsSuspend(int strategyId) {
            object[] results = this.Invoke("IsSuspend", new object[] {
                        strategyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsSuspend(int strategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsSuspend", new object[] {
                        strategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsSuspend(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSuspendAsync(int strategyId) {
            this.IsSuspendAsync(strategyId, null);
        }
        
        /// <remarks/>
        public void IsSuspendAsync(int strategyId, object userState) {
            if ((this.IsSuspendOperationCompleted == null)) {
                this.IsSuspendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSuspendOperationCompleted);
            }
            this.InvokeAsync("IsSuspend", new object[] {
                        strategyId}, this.IsSuspendOperationCompleted, userState);
        }
        
        private void OnIsSuspendOperationCompleted(object arg) {
            if ((this.IsSuspendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSuspendCompleted(this, new IsSuspendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateStrategySettings", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateStrategySettings(long strategyId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<long> executionDuration, bool isMigrationSupported) {
            this.Invoke("UpdateStrategySettings", new object[] {
                        strategyId,
                        executionDuration,
                        isMigrationSupported});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStrategySettings(long strategyId, System.Nullable<long> executionDuration, bool isMigrationSupported, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStrategySettings", new object[] {
                        strategyId,
                        executionDuration,
                        isMigrationSupported}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateStrategySettings(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateStrategySettingsAsync(long strategyId, System.Nullable<long> executionDuration, bool isMigrationSupported) {
            this.UpdateStrategySettingsAsync(strategyId, executionDuration, isMigrationSupported, null);
        }
        
        /// <remarks/>
        public void UpdateStrategySettingsAsync(long strategyId, System.Nullable<long> executionDuration, bool isMigrationSupported, object userState) {
            if ((this.UpdateStrategySettingsOperationCompleted == null)) {
                this.UpdateStrategySettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStrategySettingsOperationCompleted);
            }
            this.InvokeAsync("UpdateStrategySettings", new object[] {
                        strategyId,
                        executionDuration,
                        isMigrationSupported}, this.UpdateStrategySettingsOperationCompleted, userState);
        }
        
        private void OnUpdateStrategySettingsOperationCompleted(object arg) {
            if ((this.UpdateStrategySettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStrategySettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateTerminationDateSql", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTerminationDateSql(string sql, System.DateTime terminationDate) {
            this.Invoke("UpdateTerminationDateSql", new object[] {
                        sql,
                        terminationDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateTerminationDateSql(string sql, System.DateTime terminationDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateTerminationDateSql", new object[] {
                        sql,
                        terminationDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateTerminationDateSql(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateTerminationDateSqlAsync(string sql, System.DateTime terminationDate) {
            this.UpdateTerminationDateSqlAsync(sql, terminationDate, null);
        }
        
        /// <remarks/>
        public void UpdateTerminationDateSqlAsync(string sql, System.DateTime terminationDate, object userState) {
            if ((this.UpdateTerminationDateSqlOperationCompleted == null)) {
                this.UpdateTerminationDateSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTerminationDateSqlOperationCompleted);
            }
            this.InvokeAsync("UpdateTerminationDateSql", new object[] {
                        sql,
                        terminationDate}, this.UpdateTerminationDateSqlOperationCompleted, userState);
        }
        
        private void OnUpdateTerminationDateSqlOperationCompleted(object arg) {
            if ((this.UpdateTerminationDateSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTerminationDateSqlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetPublicNamesForStrategy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPublicNamesForStrategy(int id) {
            object[] results = this.Invoke("GetPublicNamesForStrategy", new object[] {
                        id});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPublicNamesForStrategy(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPublicNamesForStrategy", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetPublicNamesForStrategy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPublicNamesForStrategyAsync(int id) {
            this.GetPublicNamesForStrategyAsync(id, null);
        }
        
        /// <remarks/>
        public void GetPublicNamesForStrategyAsync(int id, object userState) {
            if ((this.GetPublicNamesForStrategyOperationCompleted == null)) {
                this.GetPublicNamesForStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicNamesForStrategyOperationCompleted);
            }
            this.InvokeAsync("GetPublicNamesForStrategy", new object[] {
                        id}, this.GetPublicNamesForStrategyOperationCompleted, userState);
        }
        
        private void OnGetPublicNamesForStrategyOperationCompleted(object arg) {
            if ((this.GetPublicNamesForStrategyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicNamesForStrategyCompleted(this, new GetPublicNamesForStrategyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAllCalendars", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CalendarDTO[] GetAllCalendars() {
            object[] results = this.Invoke("GetAllCalendars", new object[0]);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllCalendars(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllCalendars", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CalendarDTO[] EndGetAllCalendars(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCalendarsAsync() {
            this.GetAllCalendarsAsync(null);
        }
        
        /// <remarks/>
        public void GetAllCalendarsAsync(object userState) {
            if ((this.GetAllCalendarsOperationCompleted == null)) {
                this.GetAllCalendarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCalendarsOperationCompleted);
            }
            this.InvokeAsync("GetAllCalendars", new object[0], this.GetAllCalendarsOperationCompleted, userState);
        }
        
        private void OnGetAllCalendarsOperationCompleted(object arg) {
            if ((this.GetAllCalendarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCalendarsCompleted(this, new GetAllCalendarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetUserCalendars", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CalendarDTO[] GetUserCalendars() {
            object[] results = this.Invoke("GetUserCalendars", new object[0]);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserCalendars(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserCalendars", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CalendarDTO[] EndGetUserCalendars(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCalendarsAsync() {
            this.GetUserCalendarsAsync(null);
        }
        
        /// <remarks/>
        public void GetUserCalendarsAsync(object userState) {
            if ((this.GetUserCalendarsOperationCompleted == null)) {
                this.GetUserCalendarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCalendarsOperationCompleted);
            }
            this.InvokeAsync("GetUserCalendars", new object[0], this.GetUserCalendarsOperationCompleted, userState);
        }
        
        private void OnGetUserCalendarsOperationCompleted(object arg) {
            if ((this.GetUserCalendarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCalendarsCompleted(this, new GetUserCalendarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetBaseCalendars", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CalendarDTO[] GetBaseCalendars() {
            object[] results = this.Invoke("GetBaseCalendars", new object[0]);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBaseCalendars(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBaseCalendars", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CalendarDTO[] EndGetBaseCalendars(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBaseCalendarsAsync() {
            this.GetBaseCalendarsAsync(null);
        }
        
        /// <remarks/>
        public void GetBaseCalendarsAsync(object userState) {
            if ((this.GetBaseCalendarsOperationCompleted == null)) {
                this.GetBaseCalendarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseCalendarsOperationCompleted);
            }
            this.InvokeAsync("GetBaseCalendars", new object[0], this.GetBaseCalendarsOperationCompleted, userState);
        }
        
        private void OnGetBaseCalendarsOperationCompleted(object arg) {
            if ((this.GetBaseCalendarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseCalendarsCompleted(this, new GetBaseCalendarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveCalendar", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveCalendar(CalendarDTO calendarDto) {
            object[] results = this.Invoke("SaveCalendar", new object[] {
                        calendarDto});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveCalendar(CalendarDTO calendarDto, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveCalendar", new object[] {
                        calendarDto}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveCalendar(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveCalendarAsync(CalendarDTO calendarDto) {
            this.SaveCalendarAsync(calendarDto, null);
        }
        
        /// <remarks/>
        public void SaveCalendarAsync(CalendarDTO calendarDto, object userState) {
            if ((this.SaveCalendarOperationCompleted == null)) {
                this.SaveCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveCalendarOperationCompleted);
            }
            this.InvokeAsync("SaveCalendar", new object[] {
                        calendarDto}, this.SaveCalendarOperationCompleted, userState);
        }
        
        private void OnSaveCalendarOperationCompleted(object arg) {
            if ((this.SaveCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveCalendarCompleted(this, new SaveCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteCalendar", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCalendar(int id) {
            this.Invoke("DeleteCalendar", new object[] {
                        id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCalendar(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCalendar", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCalendar(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCalendarAsync(int id) {
            this.DeleteCalendarAsync(id, null);
        }
        
        /// <remarks/>
        public void DeleteCalendarAsync(int id, object userState) {
            if ((this.DeleteCalendarOperationCompleted == null)) {
                this.DeleteCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCalendarOperationCompleted);
            }
            this.InvokeAsync("DeleteCalendar", new object[] {
                        id}, this.DeleteCalendarOperationCompleted, userState);
        }
        
        private void OnDeleteCalendarOperationCompleted(object arg) {
            if ((this.DeleteCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCalendarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyCalendars", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CalendarDTO[] GetStrategyCalendars(int id) {
            object[] results = this.Invoke("GetStrategyCalendars", new object[] {
                        id});
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyCalendars(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyCalendars", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public CalendarDTO[] EndGetStrategyCalendars(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CalendarDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyCalendarsAsync(int id) {
            this.GetStrategyCalendarsAsync(id, null);
        }
        
        /// <remarks/>
        public void GetStrategyCalendarsAsync(int id, object userState) {
            if ((this.GetStrategyCalendarsOperationCompleted == null)) {
                this.GetStrategyCalendarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyCalendarsOperationCompleted);
            }
            this.InvokeAsync("GetStrategyCalendars", new object[] {
                        id}, this.GetStrategyCalendarsOperationCompleted, userState);
        }
        
        private void OnGetStrategyCalendarsOperationCompleted(object arg) {
            if ((this.GetStrategyCalendarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyCalendarsCompleted(this, new GetStrategyCalendarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SetStrategyCalendars", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetStrategyCalendars(int id, CalendarDTO[] calendarDTOs) {
            this.Invoke("SetStrategyCalendars", new object[] {
                        id,
                        calendarDTOs});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetStrategyCalendars(int id, CalendarDTO[] calendarDTOs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetStrategyCalendars", new object[] {
                        id,
                        calendarDTOs}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetStrategyCalendars(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetStrategyCalendarsAsync(int id, CalendarDTO[] calendarDTOs) {
            this.SetStrategyCalendarsAsync(id, calendarDTOs, null);
        }
        
        /// <remarks/>
        public void SetStrategyCalendarsAsync(int id, CalendarDTO[] calendarDTOs, object userState) {
            if ((this.SetStrategyCalendarsOperationCompleted == null)) {
                this.SetStrategyCalendarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetStrategyCalendarsOperationCompleted);
            }
            this.InvokeAsync("SetStrategyCalendars", new object[] {
                        id,
                        calendarDTOs}, this.SetStrategyCalendarsOperationCompleted, userState);
        }
        
        private void OnSetStrategyCalendarsOperationCompleted(object arg) {
            if ((this.SetStrategyCalendarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetStrategyCalendarsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetSpreadSheetsList", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SpreadSheetDto[] GetSpreadSheetsList() {
            object[] results = this.Invoke("GetSpreadSheetsList", new object[0]);
            return ((SpreadSheetDto[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSpreadSheetsList(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSpreadSheetsList", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public SpreadSheetDto[] EndGetSpreadSheetsList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SpreadSheetDto[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpreadSheetsListAsync() {
            this.GetSpreadSheetsListAsync(null);
        }
        
        /// <remarks/>
        public void GetSpreadSheetsListAsync(object userState) {
            if ((this.GetSpreadSheetsListOperationCompleted == null)) {
                this.GetSpreadSheetsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpreadSheetsListOperationCompleted);
            }
            this.InvokeAsync("GetSpreadSheetsList", new object[0], this.GetSpreadSheetsListOperationCompleted, userState);
        }
        
        private void OnGetSpreadSheetsListOperationCompleted(object arg) {
            if ((this.GetSpreadSheetsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpreadSheetsListCompleted(this, new GetSpreadSheetsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteSpreadSheet", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSpreadSheet(string spreadSheetName, string signedDocument) {
            this.Invoke("DeleteSpreadSheet", new object[] {
                        spreadSheetName,
                        signedDocument});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSpreadSheet(string spreadSheetName, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSpreadSheet", new object[] {
                        spreadSheetName,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteSpreadSheet(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteSpreadSheetAsync(string spreadSheetName, string signedDocument) {
            this.DeleteSpreadSheetAsync(spreadSheetName, signedDocument, null);
        }
        
        /// <remarks/>
        public void DeleteSpreadSheetAsync(string spreadSheetName, string signedDocument, object userState) {
            if ((this.DeleteSpreadSheetOperationCompleted == null)) {
                this.DeleteSpreadSheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSpreadSheetOperationCompleted);
            }
            this.InvokeAsync("DeleteSpreadSheet", new object[] {
                        spreadSheetName,
                        signedDocument}, this.DeleteSpreadSheetOperationCompleted, userState);
        }
        
        private void OnDeleteSpreadSheetOperationCompleted(object arg) {
            if ((this.DeleteSpreadSheetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSpreadSheetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckIfSpreadSheetExists", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckIfSpreadSheetExists(string hash) {
            object[] results = this.Invoke("CheckIfSpreadSheetExists", new object[] {
                        hash});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckIfSpreadSheetExists(string hash, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckIfSpreadSheetExists", new object[] {
                        hash}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckIfSpreadSheetExists(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfSpreadSheetExistsAsync(string hash) {
            this.CheckIfSpreadSheetExistsAsync(hash, null);
        }
        
        /// <remarks/>
        public void CheckIfSpreadSheetExistsAsync(string hash, object userState) {
            if ((this.CheckIfSpreadSheetExistsOperationCompleted == null)) {
                this.CheckIfSpreadSheetExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfSpreadSheetExistsOperationCompleted);
            }
            this.InvokeAsync("CheckIfSpreadSheetExists", new object[] {
                        hash}, this.CheckIfSpreadSheetExistsOperationCompleted, userState);
        }
        
        private void OnCheckIfSpreadSheetExistsOperationCompleted(object arg) {
            if ((this.CheckIfSpreadSheetExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfSpreadSheetExistsCompleted(this, new CheckIfSpreadSheetExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveSpreadSheet", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveSpreadSheet(string name, string description, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, string signedDocument) {
            object[] results = this.Invoke("SaveSpreadSheet", new object[] {
                        name,
                        description,
                        data,
                        signedDocument});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveSpreadSheet(string name, string description, byte[] data, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveSpreadSheet", new object[] {
                        name,
                        description,
                        data,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveSpreadSheet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveSpreadSheetAsync(string name, string description, byte[] data, string signedDocument) {
            this.SaveSpreadSheetAsync(name, description, data, signedDocument, null);
        }
        
        /// <remarks/>
        public void SaveSpreadSheetAsync(string name, string description, byte[] data, string signedDocument, object userState) {
            if ((this.SaveSpreadSheetOperationCompleted == null)) {
                this.SaveSpreadSheetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSpreadSheetOperationCompleted);
            }
            this.InvokeAsync("SaveSpreadSheet", new object[] {
                        name,
                        description,
                        data,
                        signedDocument}, this.SaveSpreadSheetOperationCompleted, userState);
        }
        
        private void OnSaveSpreadSheetOperationCompleted(object arg) {
            if ((this.SaveSpreadSheetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSpreadSheetCompleted(this, new SaveSpreadSheetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetSpreadSheetTemplate", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetSpreadSheetTemplate(int id) {
            object[] results = this.Invoke("GetSpreadSheetTemplate", new object[] {
                        id});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSpreadSheetTemplate(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSpreadSheetTemplate", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetSpreadSheetTemplate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpreadSheetTemplateAsync(int id) {
            this.GetSpreadSheetTemplateAsync(id, null);
        }
        
        /// <remarks/>
        public void GetSpreadSheetTemplateAsync(int id, object userState) {
            if ((this.GetSpreadSheetTemplateOperationCompleted == null)) {
                this.GetSpreadSheetTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpreadSheetTemplateOperationCompleted);
            }
            this.InvokeAsync("GetSpreadSheetTemplate", new object[] {
                        id}, this.GetSpreadSheetTemplateOperationCompleted, userState);
        }
        
        private void OnGetSpreadSheetTemplateOperationCompleted(object arg) {
            if ((this.GetSpreadSheetTemplateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpreadSheetTemplateCompleted(this, new GetSpreadSheetTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetSpreadSheetLinkedNode", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSpreadSheetLinkedNode(int id) {
            object[] results = this.Invoke("GetSpreadSheetLinkedNode", new object[] {
                        id});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSpreadSheetLinkedNode(int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSpreadSheetLinkedNode", new object[] {
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetSpreadSheetLinkedNode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSpreadSheetLinkedNodeAsync(int id) {
            this.GetSpreadSheetLinkedNodeAsync(id, null);
        }
        
        /// <remarks/>
        public void GetSpreadSheetLinkedNodeAsync(int id, object userState) {
            if ((this.GetSpreadSheetLinkedNodeOperationCompleted == null)) {
                this.GetSpreadSheetLinkedNodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpreadSheetLinkedNodeOperationCompleted);
            }
            this.InvokeAsync("GetSpreadSheetLinkedNode", new object[] {
                        id}, this.GetSpreadSheetLinkedNodeOperationCompleted, userState);
        }
        
        private void OnGetSpreadSheetLinkedNodeOperationCompleted(object arg) {
            if ((this.GetSpreadSheetLinkedNodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpreadSheetLinkedNodeCompleted(this, new GetSpreadSheetLinkedNodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyAreas", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StrategyArea[] GetStrategyAreas() {
            object[] results = this.Invoke("GetStrategyAreas", new object[0]);
            return ((StrategyArea[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyAreas(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyAreas", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public StrategyArea[] EndGetStrategyAreas(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StrategyArea[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyAreasAsync() {
            this.GetStrategyAreasAsync(null);
        }
        
        /// <remarks/>
        public void GetStrategyAreasAsync(object userState) {
            if ((this.GetStrategyAreasOperationCompleted == null)) {
                this.GetStrategyAreasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyAreasOperationCompleted);
            }
            this.InvokeAsync("GetStrategyAreas", new object[0], this.GetStrategyAreasOperationCompleted, userState);
        }
        
        private void OnGetStrategyAreasOperationCompleted(object arg) {
            if ((this.GetStrategyAreasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyAreasCompleted(this, new GetStrategyAreasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CreateNewStrategyArea", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> CreateNewStrategyArea(string name, string description) {
            object[] results = this.Invoke("CreateNewStrategyArea", new object[] {
                        name,
                        description});
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateNewStrategyArea(string name, string description, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateNewStrategyArea", new object[] {
                        name,
                        description}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<long> EndCreateNewStrategyArea(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewStrategyAreaAsync(string name, string description) {
            this.CreateNewStrategyAreaAsync(name, description, null);
        }
        
        /// <remarks/>
        public void CreateNewStrategyAreaAsync(string name, string description, object userState) {
            if ((this.CreateNewStrategyAreaOperationCompleted == null)) {
                this.CreateNewStrategyAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewStrategyAreaOperationCompleted);
            }
            this.InvokeAsync("CreateNewStrategyArea", new object[] {
                        name,
                        description}, this.CreateNewStrategyAreaOperationCompleted, userState);
        }
        
        private void OnCreateNewStrategyAreaOperationCompleted(object arg) {
            if ((this.CreateNewStrategyAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewStrategyAreaCompleted(this, new CreateNewStrategyAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyTasksForArea", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StrategyTask[] GetStrategyTasksForArea(long areaId) {
            object[] results = this.Invoke("GetStrategyTasksForArea", new object[] {
                        areaId});
            return ((StrategyTask[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyTasksForArea(long areaId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyTasksForArea", new object[] {
                        areaId}, callback, asyncState);
        }
        
        /// <remarks/>
        public StrategyTask[] EndGetStrategyTasksForArea(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StrategyTask[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyTasksForAreaAsync(long areaId) {
            this.GetStrategyTasksForAreaAsync(areaId, null);
        }
        
        /// <remarks/>
        public void GetStrategyTasksForAreaAsync(long areaId, object userState) {
            if ((this.GetStrategyTasksForAreaOperationCompleted == null)) {
                this.GetStrategyTasksForAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyTasksForAreaOperationCompleted);
            }
            this.InvokeAsync("GetStrategyTasksForArea", new object[] {
                        areaId}, this.GetStrategyTasksForAreaOperationCompleted, userState);
        }
        
        private void OnGetStrategyTasksForAreaOperationCompleted(object arg) {
            if ((this.GetStrategyTasksForAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyTasksForAreaCompleted(this, new GetStrategyTasksForAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CreateNewStrategyTask", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> CreateNewStrategyTask(long areaId, string name, string description) {
            object[] results = this.Invoke("CreateNewStrategyTask", new object[] {
                        areaId,
                        name,
                        description});
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateNewStrategyTask(long areaId, string name, string description, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateNewStrategyTask", new object[] {
                        areaId,
                        name,
                        description}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<long> EndCreateNewStrategyTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewStrategyTaskAsync(long areaId, string name, string description) {
            this.CreateNewStrategyTaskAsync(areaId, name, description, null);
        }
        
        /// <remarks/>
        public void CreateNewStrategyTaskAsync(long areaId, string name, string description, object userState) {
            if ((this.CreateNewStrategyTaskOperationCompleted == null)) {
                this.CreateNewStrategyTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewStrategyTaskOperationCompleted);
            }
            this.InvokeAsync("CreateNewStrategyTask", new object[] {
                        areaId,
                        name,
                        description}, this.CreateNewStrategyTaskOperationCompleted, userState);
        }
        
        private void OnCreateNewStrategyTaskOperationCompleted(object arg) {
            if ((this.CreateNewStrategyTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewStrategyTaskCompleted(this, new CreateNewStrategyTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetAreaTaskCount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAreaTaskCount(long areaId) {
            object[] results = this.Invoke("GetAreaTaskCount", new object[] {
                        areaId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAreaTaskCount(long areaId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAreaTaskCount", new object[] {
                        areaId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAreaTaskCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAreaTaskCountAsync(long areaId) {
            this.GetAreaTaskCountAsync(areaId, null);
        }
        
        /// <remarks/>
        public void GetAreaTaskCountAsync(long areaId, object userState) {
            if ((this.GetAreaTaskCountOperationCompleted == null)) {
                this.GetAreaTaskCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAreaTaskCountOperationCompleted);
            }
            this.InvokeAsync("GetAreaTaskCount", new object[] {
                        areaId}, this.GetAreaTaskCountOperationCompleted, userState);
        }
        
        private void OnGetAreaTaskCountOperationCompleted(object arg) {
            if ((this.GetAreaTaskCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAreaTaskCountCompleted(this, new GetAreaTaskCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/AddStrategyToTask", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> AddStrategyToTask(long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams) {
            object[] results = this.Invoke("AddStrategyToTask", new object[] {
                        taskId,
                        label,
                        strategyId,
                        strategyParams});
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddStrategyToTask(long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddStrategyToTask", new object[] {
                        taskId,
                        label,
                        strategyId,
                        strategyParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<long> EndAddStrategyToTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public void AddStrategyToTaskAsync(long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams) {
            this.AddStrategyToTaskAsync(taskId, label, strategyId, strategyParams, null);
        }
        
        /// <remarks/>
        public void AddStrategyToTaskAsync(long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams, object userState) {
            if ((this.AddStrategyToTaskOperationCompleted == null)) {
                this.AddStrategyToTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddStrategyToTaskOperationCompleted);
            }
            this.InvokeAsync("AddStrategyToTask", new object[] {
                        taskId,
                        label,
                        strategyId,
                        strategyParams}, this.AddStrategyToTaskOperationCompleted, userState);
        }
        
        private void OnAddStrategyToTaskOperationCompleted(object arg) {
            if ((this.AddStrategyToTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddStrategyToTaskCompleted(this, new AddStrategyToTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateStrategyTask", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> UpdateStrategyTask(long id, long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams) {
            object[] results = this.Invoke("UpdateStrategyTask", new object[] {
                        id,
                        taskId,
                        label,
                        strategyId,
                        strategyParams});
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStrategyTask(long id, long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStrategyTask", new object[] {
                        id,
                        taskId,
                        label,
                        strategyId,
                        strategyParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<long> EndUpdateStrategyTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<long>)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateStrategyTaskAsync(long id, long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams) {
            this.UpdateStrategyTaskAsync(id, taskId, label, strategyId, strategyParams, null);
        }
        
        /// <remarks/>
        public void UpdateStrategyTaskAsync(long id, long taskId, string label, long strategyId, StrategyInputParameter[] strategyParams, object userState) {
            if ((this.UpdateStrategyTaskOperationCompleted == null)) {
                this.UpdateStrategyTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStrategyTaskOperationCompleted);
            }
            this.InvokeAsync("UpdateStrategyTask", new object[] {
                        id,
                        taskId,
                        label,
                        strategyId,
                        strategyParams}, this.UpdateStrategyTaskOperationCompleted, userState);
        }
        
        private void OnUpdateStrategyTaskOperationCompleted(object arg) {
            if ((this.UpdateStrategyTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStrategyTaskCompleted(this, new UpdateStrategyTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTaskStrategies", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskedStrategy[] GetTaskStrategies(long taskId) {
            object[] results = this.Invoke("GetTaskStrategies", new object[] {
                        taskId});
            return ((TaskedStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskStrategies(long taskId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskStrategies", new object[] {
                        taskId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TaskedStrategy[] EndGetTaskStrategies(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskedStrategy[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskStrategiesAsync(long taskId) {
            this.GetTaskStrategiesAsync(taskId, null);
        }
        
        /// <remarks/>
        public void GetTaskStrategiesAsync(long taskId, object userState) {
            if ((this.GetTaskStrategiesOperationCompleted == null)) {
                this.GetTaskStrategiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskStrategiesOperationCompleted);
            }
            this.InvokeAsync("GetTaskStrategies", new object[] {
                        taskId}, this.GetTaskStrategiesOperationCompleted, userState);
        }
        
        private void OnGetTaskStrategiesOperationCompleted(object arg) {
            if ((this.GetTaskStrategiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskStrategiesCompleted(this, new GetTaskStrategiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTaskStrategyCount", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTaskStrategyCount(long taskId) {
            object[] results = this.Invoke("GetTaskStrategyCount", new object[] {
                        taskId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskStrategyCount(long taskId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskStrategyCount", new object[] {
                        taskId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetTaskStrategyCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskStrategyCountAsync(long taskId) {
            this.GetTaskStrategyCountAsync(taskId, null);
        }
        
        /// <remarks/>
        public void GetTaskStrategyCountAsync(long taskId, object userState) {
            if ((this.GetTaskStrategyCountOperationCompleted == null)) {
                this.GetTaskStrategyCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskStrategyCountOperationCompleted);
            }
            this.InvokeAsync("GetTaskStrategyCount", new object[] {
                        taskId}, this.GetTaskStrategyCountOperationCompleted, userState);
        }
        
        private void OnGetTaskStrategyCountOperationCompleted(object arg) {
            if ((this.GetTaskStrategyCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskStrategyCountCompleted(this, new GetTaskStrategyCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/RemoveStrategyFromTask", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveStrategyFromTask(long taskedStrategyId) {
            this.Invoke("RemoveStrategyFromTask", new object[] {
                        taskedStrategyId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveStrategyFromTask(long taskedStrategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveStrategyFromTask", new object[] {
                        taskedStrategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveStrategyFromTask(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveStrategyFromTaskAsync(long taskedStrategyId) {
            this.RemoveStrategyFromTaskAsync(taskedStrategyId, null);
        }
        
        /// <remarks/>
        public void RemoveStrategyFromTaskAsync(long taskedStrategyId, object userState) {
            if ((this.RemoveStrategyFromTaskOperationCompleted == null)) {
                this.RemoveStrategyFromTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveStrategyFromTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveStrategyFromTask", new object[] {
                        taskedStrategyId}, this.RemoveStrategyFromTaskOperationCompleted, userState);
        }
        
        private void OnRemoveStrategyFromTaskOperationCompleted(object arg) {
            if ((this.RemoveStrategyFromTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveStrategyFromTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/RemoveTaskFromArea", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveTaskFromArea(long taskId) {
            this.Invoke("RemoveTaskFromArea", new object[] {
                        taskId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveTaskFromArea(long taskId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveTaskFromArea", new object[] {
                        taskId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveTaskFromArea(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveTaskFromAreaAsync(long taskId) {
            this.RemoveTaskFromAreaAsync(taskId, null);
        }
        
        /// <remarks/>
        public void RemoveTaskFromAreaAsync(long taskId, object userState) {
            if ((this.RemoveTaskFromAreaOperationCompleted == null)) {
                this.RemoveTaskFromAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTaskFromAreaOperationCompleted);
            }
            this.InvokeAsync("RemoveTaskFromArea", new object[] {
                        taskId}, this.RemoveTaskFromAreaOperationCompleted, userState);
        }
        
        private void OnRemoveTaskFromAreaOperationCompleted(object arg) {
            if ((this.RemoveTaskFromAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTaskFromAreaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/RemoveArea", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveArea(long areaId) {
            this.Invoke("RemoveArea", new object[] {
                        areaId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveArea(long areaId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveArea", new object[] {
                        areaId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveArea(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveAreaAsync(long areaId) {
            this.RemoveAreaAsync(areaId, null);
        }
        
        /// <remarks/>
        public void RemoveAreaAsync(long areaId, object userState) {
            if ((this.RemoveAreaOperationCompleted == null)) {
                this.RemoveAreaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAreaOperationCompleted);
            }
            this.InvokeAsync("RemoveArea", new object[] {
                        areaId}, this.RemoveAreaOperationCompleted, userState);
        }
        
        private void OnRemoveAreaOperationCompleted(object arg) {
            if ((this.RemoveAreaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAreaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckAreaName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckAreaName(string name) {
            object[] results = this.Invoke("CheckAreaName", new object[] {
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckAreaName(string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckAreaName", new object[] {
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCheckAreaName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAreaNameAsync(string name) {
            this.CheckAreaNameAsync(name, null);
        }
        
        /// <remarks/>
        public void CheckAreaNameAsync(string name, object userState) {
            if ((this.CheckAreaNameOperationCompleted == null)) {
                this.CheckAreaNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAreaNameOperationCompleted);
            }
            this.InvokeAsync("CheckAreaName", new object[] {
                        name}, this.CheckAreaNameOperationCompleted, userState);
        }
        
        private void OnCheckAreaNameOperationCompleted(object arg) {
            if ((this.CheckAreaNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAreaNameCompleted(this, new CheckAreaNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckTaskName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckTaskName(long areaId, string name) {
            object[] results = this.Invoke("CheckTaskName", new object[] {
                        areaId,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckTaskName(long areaId, string name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckTaskName", new object[] {
                        areaId,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCheckTaskName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckTaskNameAsync(long areaId, string name) {
            this.CheckTaskNameAsync(areaId, name, null);
        }
        
        /// <remarks/>
        public void CheckTaskNameAsync(long areaId, string name, object userState) {
            if ((this.CheckTaskNameOperationCompleted == null)) {
                this.CheckTaskNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckTaskNameOperationCompleted);
            }
            this.InvokeAsync("CheckTaskName", new object[] {
                        areaId,
                        name}, this.CheckTaskNameOperationCompleted, userState);
        }
        
        private void OnCheckTaskNameOperationCompleted(object arg) {
            if ((this.CheckTaskNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckTaskNameCompleted(this, new CheckTaskNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/CheckStrategyLabel", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckStrategyLabel(long taskId, string label) {
            object[] results = this.Invoke("CheckStrategyLabel", new object[] {
                        taskId,
                        label});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckStrategyLabel(long taskId, string label, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckStrategyLabel", new object[] {
                        taskId,
                        label}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCheckStrategyLabel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CheckStrategyLabelAsync(long taskId, string label) {
            this.CheckStrategyLabelAsync(taskId, label, null);
        }
        
        /// <remarks/>
        public void CheckStrategyLabelAsync(long taskId, string label, object userState) {
            if ((this.CheckStrategyLabelOperationCompleted == null)) {
                this.CheckStrategyLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckStrategyLabelOperationCompleted);
            }
            this.InvokeAsync("CheckStrategyLabel", new object[] {
                        taskId,
                        label}, this.CheckStrategyLabelOperationCompleted, userState);
        }
        
        private void OnCheckStrategyLabelOperationCompleted(object arg) {
            if ((this.CheckStrategyLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckStrategyLabelCompleted(this, new CheckStrategyLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTaskedStrategyParametersByName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskedStrategyParameter[] GetTaskedStrategyParametersByName(string strategyName) {
            object[] results = this.Invoke("GetTaskedStrategyParametersByName", new object[] {
                        strategyName});
            return ((TaskedStrategyParameter[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskedStrategyParametersByName(string strategyName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskedStrategyParametersByName", new object[] {
                        strategyName}, callback, asyncState);
        }
        
        /// <remarks/>
        public TaskedStrategyParameter[] EndGetTaskedStrategyParametersByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskedStrategyParameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskedStrategyParametersByNameAsync(string strategyName) {
            this.GetTaskedStrategyParametersByNameAsync(strategyName, null);
        }
        
        /// <remarks/>
        public void GetTaskedStrategyParametersByNameAsync(string strategyName, object userState) {
            if ((this.GetTaskedStrategyParametersByNameOperationCompleted == null)) {
                this.GetTaskedStrategyParametersByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskedStrategyParametersByNameOperationCompleted);
            }
            this.InvokeAsync("GetTaskedStrategyParametersByName", new object[] {
                        strategyName}, this.GetTaskedStrategyParametersByNameOperationCompleted, userState);
        }
        
        private void OnGetTaskedStrategyParametersByNameOperationCompleted(object arg) {
            if ((this.GetTaskedStrategyParametersByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskedStrategyParametersByNameCompleted(this, new GetTaskedStrategyParametersByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetTaskedStrategyParameters", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskedStrategyParameter[] GetTaskedStrategyParameters(long taskedStrategyId) {
            object[] results = this.Invoke("GetTaskedStrategyParameters", new object[] {
                        taskedStrategyId});
            return ((TaskedStrategyParameter[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTaskedStrategyParameters(long taskedStrategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTaskedStrategyParameters", new object[] {
                        taskedStrategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public TaskedStrategyParameter[] EndGetTaskedStrategyParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TaskedStrategyParameter[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskedStrategyParametersAsync(long taskedStrategyId) {
            this.GetTaskedStrategyParametersAsync(taskedStrategyId, null);
        }
        
        /// <remarks/>
        public void GetTaskedStrategyParametersAsync(long taskedStrategyId, object userState) {
            if ((this.GetTaskedStrategyParametersOperationCompleted == null)) {
                this.GetTaskedStrategyParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskedStrategyParametersOperationCompleted);
            }
            this.InvokeAsync("GetTaskedStrategyParameters", new object[] {
                        taskedStrategyId}, this.GetTaskedStrategyParametersOperationCompleted, userState);
        }
        
        private void OnGetTaskedStrategyParametersOperationCompleted(object arg) {
            if ((this.GetTaskedStrategyParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskedStrategyParametersCompleted(this, new GetTaskedStrategyParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetModels", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ScoringModelDTO[] GetModels() {
            object[] results = this.Invoke("GetModels", new object[0]);
            return ((ScoringModelDTO[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetModels(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetModels", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public ScoringModelDTO[] EndGetModels(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ScoringModelDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetModelsAsync() {
            this.GetModelsAsync(null);
        }
        
        /// <remarks/>
        public void GetModelsAsync(object userState) {
            if ((this.GetModelsOperationCompleted == null)) {
                this.GetModelsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelsOperationCompleted);
            }
            this.InvokeAsync("GetModels", new object[0], this.GetModelsOperationCompleted, userState);
        }
        
        private void OnGetModelsOperationCompleted(object arg) {
            if ((this.GetModelsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelsCompleted(this, new GetModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/AddScoringModel", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ScoringModelDTO AddScoringModel(string pmmlXml, string signedData) {
            object[] results = this.Invoke("AddScoringModel", new object[] {
                        pmmlXml,
                        signedData});
            return ((ScoringModelDTO)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddScoringModel(string pmmlXml, string signedData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddScoringModel", new object[] {
                        pmmlXml,
                        signedData}, callback, asyncState);
        }
        
        /// <remarks/>
        public ScoringModelDTO EndAddScoringModel(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ScoringModelDTO)(results[0]));
        }
        
        /// <remarks/>
        public void AddScoringModelAsync(string pmmlXml, string signedData) {
            this.AddScoringModelAsync(pmmlXml, signedData, null);
        }
        
        /// <remarks/>
        public void AddScoringModelAsync(string pmmlXml, string signedData, object userState) {
            if ((this.AddScoringModelOperationCompleted == null)) {
                this.AddScoringModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScoringModelOperationCompleted);
            }
            this.InvokeAsync("AddScoringModel", new object[] {
                        pmmlXml,
                        signedData}, this.AddScoringModelOperationCompleted, userState);
        }
        
        private void OnAddScoringModelOperationCompleted(object arg) {
            if ((this.AddScoringModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddScoringModelCompleted(this, new AddScoringModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteScoringModel", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteScoringModel(ScoringModelDTO scoringModelDto, string signedData) {
            this.Invoke("DeleteScoringModel", new object[] {
                        scoringModelDto,
                        signedData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteScoringModel(ScoringModelDTO scoringModelDto, string signedData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteScoringModel", new object[] {
                        scoringModelDto,
                        signedData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteScoringModel(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteScoringModelAsync(ScoringModelDTO scoringModelDto, string signedData) {
            this.DeleteScoringModelAsync(scoringModelDto, signedData, null);
        }
        
        /// <remarks/>
        public void DeleteScoringModelAsync(ScoringModelDTO scoringModelDto, string signedData, object userState) {
            if ((this.DeleteScoringModelOperationCompleted == null)) {
                this.DeleteScoringModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScoringModelOperationCompleted);
            }
            this.InvokeAsync("DeleteScoringModel", new object[] {
                        scoringModelDto,
                        signedData}, this.DeleteScoringModelOperationCompleted, userState);
        }
        
        private void OnDeleteScoringModelOperationCompleted(object arg) {
            if ((this.DeleteScoringModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScoringModelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateModel", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateModel(ScoringModelDTO scoringModelDto) {
            this.Invoke("UpdateModel", new object[] {
                        scoringModelDto});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateModel(ScoringModelDTO scoringModelDto, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateModel", new object[] {
                        scoringModelDto}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateModel(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateModelAsync(ScoringModelDTO scoringModelDto) {
            this.UpdateModelAsync(scoringModelDto, null);
        }
        
        /// <remarks/>
        public void UpdateModelAsync(ScoringModelDTO scoringModelDto, object userState) {
            if ((this.UpdateModelOperationCompleted == null)) {
                this.UpdateModelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateModelOperationCompleted);
            }
            this.InvokeAsync("UpdateModel", new object[] {
                        scoringModelDto}, this.UpdateModelOperationCompleted, userState);
        }
        
        private void OnUpdateModelOperationCompleted(object arg) {
            if ((this.UpdateModelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateModelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetModelPmml", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetModelPmml(int modelId) {
            object[] results = this.Invoke("GetModelPmml", new object[] {
                        modelId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetModelPmml(int modelId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetModelPmml", new object[] {
                        modelId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetModelPmml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetModelPmmlAsync(int modelId) {
            this.GetModelPmmlAsync(modelId, null);
        }
        
        /// <remarks/>
        public void GetModelPmmlAsync(int modelId, object userState) {
            if ((this.GetModelPmmlOperationCompleted == null)) {
                this.GetModelPmmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetModelPmmlOperationCompleted);
            }
            this.InvokeAsync("GetModelPmml", new object[] {
                        modelId}, this.GetModelPmmlOperationCompleted, userState);
        }
        
        private void OnGetModelPmmlOperationCompleted(object arg) {
            if ((this.GetModelPmmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetModelPmmlCompleted(this, new GetModelPmmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetStrategyScheduleItems", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public StrategyScheduleItemDto[] GetStrategyScheduleItems() {
            object[] results = this.Invoke("GetStrategyScheduleItems", new object[0]);
            return ((StrategyScheduleItemDto[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetStrategyScheduleItems(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetStrategyScheduleItems", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public StrategyScheduleItemDto[] EndGetStrategyScheduleItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((StrategyScheduleItemDto[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStrategyScheduleItemsAsync() {
            this.GetStrategyScheduleItemsAsync(null);
        }
        
        /// <remarks/>
        public void GetStrategyScheduleItemsAsync(object userState) {
            if ((this.GetStrategyScheduleItemsOperationCompleted == null)) {
                this.GetStrategyScheduleItemsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStrategyScheduleItemsOperationCompleted);
            }
            this.InvokeAsync("GetStrategyScheduleItems", new object[0], this.GetStrategyScheduleItemsOperationCompleted, userState);
        }
        
        private void OnGetStrategyScheduleItemsOperationCompleted(object arg) {
            if ((this.GetStrategyScheduleItemsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStrategyScheduleItemsCompleted(this, new GetStrategyScheduleItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/InsertStrategyScheduleItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long InsertStrategyScheduleItem(string name, int strategyId, ScheduleItemType type, string mask, ExecutionType executionType) {
            object[] results = this.Invoke("InsertStrategyScheduleItem", new object[] {
                        name,
                        strategyId,
                        type,
                        mask,
                        executionType});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertStrategyScheduleItem(string name, int strategyId, ScheduleItemType type, string mask, ExecutionType executionType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertStrategyScheduleItem", new object[] {
                        name,
                        strategyId,
                        type,
                        mask,
                        executionType}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndInsertStrategyScheduleItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void InsertStrategyScheduleItemAsync(string name, int strategyId, ScheduleItemType type, string mask, ExecutionType executionType) {
            this.InsertStrategyScheduleItemAsync(name, strategyId, type, mask, executionType, null);
        }
        
        /// <remarks/>
        public void InsertStrategyScheduleItemAsync(string name, int strategyId, ScheduleItemType type, string mask, ExecutionType executionType, object userState) {
            if ((this.InsertStrategyScheduleItemOperationCompleted == null)) {
                this.InsertStrategyScheduleItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertStrategyScheduleItemOperationCompleted);
            }
            this.InvokeAsync("InsertStrategyScheduleItem", new object[] {
                        name,
                        strategyId,
                        type,
                        mask,
                        executionType}, this.InsertStrategyScheduleItemOperationCompleted, userState);
        }
        
        private void OnInsertStrategyScheduleItemOperationCompleted(object arg) {
            if ((this.InsertStrategyScheduleItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertStrategyScheduleItemCompleted(this, new InsertStrategyScheduleItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/InsertStrategyScheduleItemDto", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long InsertStrategyScheduleItemDto(StrategyScheduleItemDto itemDto) {
            object[] results = this.Invoke("InsertStrategyScheduleItemDto", new object[] {
                        itemDto});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertStrategyScheduleItemDto(StrategyScheduleItemDto itemDto, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertStrategyScheduleItemDto", new object[] {
                        itemDto}, callback, asyncState);
        }
        
        /// <remarks/>
        public long EndInsertStrategyScheduleItemDto(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void InsertStrategyScheduleItemDtoAsync(StrategyScheduleItemDto itemDto) {
            this.InsertStrategyScheduleItemDtoAsync(itemDto, null);
        }
        
        /// <remarks/>
        public void InsertStrategyScheduleItemDtoAsync(StrategyScheduleItemDto itemDto, object userState) {
            if ((this.InsertStrategyScheduleItemDtoOperationCompleted == null)) {
                this.InsertStrategyScheduleItemDtoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertStrategyScheduleItemDtoOperationCompleted);
            }
            this.InvokeAsync("InsertStrategyScheduleItemDto", new object[] {
                        itemDto}, this.InsertStrategyScheduleItemDtoOperationCompleted, userState);
        }
        
        private void OnInsertStrategyScheduleItemDtoOperationCompleted(object arg) {
            if ((this.InsertStrategyScheduleItemDtoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertStrategyScheduleItemDtoCompleted(this, new InsertStrategyScheduleItemDtoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateStrategyScheduleItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateStrategyScheduleItem(long itemId, string name, ScheduleItemType type, string mask, ExecutionType executionType) {
            this.Invoke("UpdateStrategyScheduleItem", new object[] {
                        itemId,
                        name,
                        type,
                        mask,
                        executionType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateStrategyScheduleItem(long itemId, string name, ScheduleItemType type, string mask, ExecutionType executionType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateStrategyScheduleItem", new object[] {
                        itemId,
                        name,
                        type,
                        mask,
                        executionType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateStrategyScheduleItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateStrategyScheduleItemAsync(long itemId, string name, ScheduleItemType type, string mask, ExecutionType executionType) {
            this.UpdateStrategyScheduleItemAsync(itemId, name, type, mask, executionType, null);
        }
        
        /// <remarks/>
        public void UpdateStrategyScheduleItemAsync(long itemId, string name, ScheduleItemType type, string mask, ExecutionType executionType, object userState) {
            if ((this.UpdateStrategyScheduleItemOperationCompleted == null)) {
                this.UpdateStrategyScheduleItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateStrategyScheduleItemOperationCompleted);
            }
            this.InvokeAsync("UpdateStrategyScheduleItem", new object[] {
                        itemId,
                        name,
                        type,
                        mask,
                        executionType}, this.UpdateStrategyScheduleItemOperationCompleted, userState);
        }
        
        private void OnUpdateStrategyScheduleItemOperationCompleted(object arg) {
            if ((this.UpdateStrategyScheduleItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateStrategyScheduleItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteStrategyScheduleItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteStrategyScheduleItem(long itemId) {
            this.Invoke("DeleteStrategyScheduleItem", new object[] {
                        itemId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteStrategyScheduleItem(long itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteStrategyScheduleItem", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteStrategyScheduleItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteStrategyScheduleItemAsync(long itemId) {
            this.DeleteStrategyScheduleItemAsync(itemId, null);
        }
        
        /// <remarks/>
        public void DeleteStrategyScheduleItemAsync(long itemId, object userState) {
            if ((this.DeleteStrategyScheduleItemOperationCompleted == null)) {
                this.DeleteStrategyScheduleItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteStrategyScheduleItemOperationCompleted);
            }
            this.InvokeAsync("DeleteStrategyScheduleItem", new object[] {
                        itemId}, this.DeleteStrategyScheduleItemOperationCompleted, userState);
        }
        
        private void OnDeleteStrategyScheduleItemOperationCompleted(object arg) {
            if ((this.DeleteStrategyScheduleItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteStrategyScheduleItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/HasNewerStrategyVersion", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasNewerStrategyVersion(int strategyId) {
            object[] results = this.Invoke("HasNewerStrategyVersion", new object[] {
                        strategyId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHasNewerStrategyVersion(int strategyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HasNewerStrategyVersion", new object[] {
                        strategyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndHasNewerStrategyVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasNewerStrategyVersionAsync(int strategyId) {
            this.HasNewerStrategyVersionAsync(strategyId, null);
        }
        
        /// <remarks/>
        public void HasNewerStrategyVersionAsync(int strategyId, object userState) {
            if ((this.HasNewerStrategyVersionOperationCompleted == null)) {
                this.HasNewerStrategyVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasNewerStrategyVersionOperationCompleted);
            }
            this.InvokeAsync("HasNewerStrategyVersion", new object[] {
                        strategyId}, this.HasNewerStrategyVersionOperationCompleted, userState);
        }
        
        private void OnHasNewerStrategyVersionOperationCompleted(object arg) {
            if ((this.HasNewerStrategyVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasNewerStrategyVersionCompleted(this, new HasNewerStrategyVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/UpdateToLatestStrategy", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateToLatestStrategy(long itemId) {
            this.Invoke("UpdateToLatestStrategy", new object[] {
                        itemId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateToLatestStrategy(long itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateToLatestStrategy", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateToLatestStrategy(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateToLatestStrategyAsync(long itemId) {
            this.UpdateToLatestStrategyAsync(itemId, null);
        }
        
        /// <remarks/>
        public void UpdateToLatestStrategyAsync(long itemId, object userState) {
            if ((this.UpdateToLatestStrategyOperationCompleted == null)) {
                this.UpdateToLatestStrategyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateToLatestStrategyOperationCompleted);
            }
            this.InvokeAsync("UpdateToLatestStrategy", new object[] {
                        itemId}, this.UpdateToLatestStrategyOperationCompleted, userState);
        }
        
        private void OnUpdateToLatestStrategyOperationCompleted(object arg) {
            if ((this.UpdateToLatestStrategyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateToLatestStrategyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/GetScheduledStrategyParametersByStrategyName", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetScheduledStrategyParametersByStrategyName(string strategyUniqueName) {
            object[] results = this.Invoke("GetScheduledStrategyParametersByStrategyName", new object[] {
                        strategyUniqueName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetScheduledStrategyParametersByStrategyName(string strategyUniqueName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetScheduledStrategyParametersByStrategyName", new object[] {
                        strategyUniqueName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetScheduledStrategyParametersByStrategyName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetScheduledStrategyParametersByStrategyNameAsync(string strategyUniqueName) {
            this.GetScheduledStrategyParametersByStrategyNameAsync(strategyUniqueName, null);
        }
        
        /// <remarks/>
        public void GetScheduledStrategyParametersByStrategyNameAsync(string strategyUniqueName, object userState) {
            if ((this.GetScheduledStrategyParametersByStrategyNameOperationCompleted == null)) {
                this.GetScheduledStrategyParametersByStrategyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScheduledStrategyParametersByStrategyNameOperationCompleted);
            }
            this.InvokeAsync("GetScheduledStrategyParametersByStrategyName", new object[] {
                        strategyUniqueName}, this.GetScheduledStrategyParametersByStrategyNameOperationCompleted, userState);
        }
        
        private void OnGetScheduledStrategyParametersByStrategyNameOperationCompleted(object arg) {
            if ((this.GetScheduledStrategyParametersByStrategyNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScheduledStrategyParametersByStrategyNameCompleted(this, new GetScheduledStrategyParametersByStrategyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/SaveScheduledStrategyParameters", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveScheduledStrategyParameters(string name, string description, string data, string signedDocument) {
            object[] results = this.Invoke("SaveScheduledStrategyParameters", new object[] {
                        name,
                        description,
                        data,
                        signedDocument});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveScheduledStrategyParameters(string name, string description, string data, string signedDocument, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveScheduledStrategyParameters", new object[] {
                        name,
                        description,
                        data,
                        signedDocument}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveScheduledStrategyParameters(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveScheduledStrategyParametersAsync(string name, string description, string data, string signedDocument) {
            this.SaveScheduledStrategyParametersAsync(name, description, data, signedDocument, null);
        }
        
        /// <remarks/>
        public void SaveScheduledStrategyParametersAsync(string name, string description, string data, string signedDocument, object userState) {
            if ((this.SaveScheduledStrategyParametersOperationCompleted == null)) {
                this.SaveScheduledStrategyParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveScheduledStrategyParametersOperationCompleted);
            }
            this.InvokeAsync("SaveScheduledStrategyParameters", new object[] {
                        name,
                        description,
                        data,
                        signedDocument}, this.SaveScheduledStrategyParametersOperationCompleted, userState);
        }
        
        private void OnSaveScheduledStrategyParametersOperationCompleted(object arg) {
            if ((this.SaveScheduledStrategyParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveScheduledStrategyParametersCompleted(this, new SaveScheduledStrategyParametersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/DeleteScheduledStrategyParameters", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteScheduledStrategyParameters(string itemName, int scheduleId) {
            this.Invoke("DeleteScheduledStrategyParameters", new object[] {
                        itemName,
                        scheduleId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteScheduledStrategyParameters(string itemName, int scheduleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteScheduledStrategyParameters", new object[] {
                        itemName,
                        scheduleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteScheduledStrategyParameters(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteScheduledStrategyParametersAsync(string itemName, int scheduleId) {
            this.DeleteScheduledStrategyParametersAsync(itemName, scheduleId, null);
        }
        
        /// <remarks/>
        public void DeleteScheduledStrategyParametersAsync(string itemName, int scheduleId, object userState) {
            if ((this.DeleteScheduledStrategyParametersOperationCompleted == null)) {
                this.DeleteScheduledStrategyParametersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScheduledStrategyParametersOperationCompleted);
            }
            this.InvokeAsync("DeleteScheduledStrategyParameters", new object[] {
                        itemName,
                        scheduleId}, this.DeleteScheduledStrategyParametersOperationCompleted, userState);
        }
        
        private void OnDeleteScheduledStrategyParametersOperationCompleted(object arg) {
            if ((this.DeleteScheduledStrategyParametersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScheduledStrategyParametersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/PauseStrategyScheduleItem", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PauseStrategyScheduleItem(long itemId, bool isPaused) {
            this.Invoke("PauseStrategyScheduleItem", new object[] {
                        itemId,
                        isPaused});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPauseStrategyScheduleItem(long itemId, bool isPaused, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PauseStrategyScheduleItem", new object[] {
                        itemId,
                        isPaused}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPauseStrategyScheduleItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PauseStrategyScheduleItemAsync(long itemId, bool isPaused) {
            this.PauseStrategyScheduleItemAsync(itemId, isPaused, null);
        }
        
        /// <remarks/>
        public void PauseStrategyScheduleItemAsync(long itemId, bool isPaused, object userState) {
            if ((this.PauseStrategyScheduleItemOperationCompleted == null)) {
                this.PauseStrategyScheduleItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPauseStrategyScheduleItemOperationCompleted);
            }
            this.InvokeAsync("PauseStrategyScheduleItem", new object[] {
                        itemId,
                        isPaused}, this.PauseStrategyScheduleItemOperationCompleted, userState);
        }
        
        private void OnPauseStrategyScheduleItemOperationCompleted(object arg) {
            if ((this.PauseStrategyScheduleItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PauseStrategyScheduleItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/AppId", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AppId() {
            object[] results = this.Invoke("AppId", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAppId(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AppId", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAppId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AppIdAsync() {
            this.AppIdAsync(null);
        }
        
        /// <remarks/>
        public void AppIdAsync(object userState) {
            if ((this.AppIdOperationCompleted == null)) {
                this.AppIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppIdOperationCompleted);
            }
            this.InvokeAsync("AppId", new object[0], this.AppIdOperationCompleted, userState);
        }
        
        private void OnAppIdOperationCompleted(object arg) {
            if ((this.AppIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppIdCompleted(this, new AppIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("ScortoPatron/AuthServerBaseUrl", RequestNamespace="ScortoPatron", ResponseNamespace="ScortoPatron", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuthServerBaseUrl() {
            object[] results = this.Invoke("AuthServerBaseUrl", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAuthServerBaseUrl(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AuthServerBaseUrl", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAuthServerBaseUrl(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthServerBaseUrlAsync() {
            this.AuthServerBaseUrlAsync(null);
        }
        
        /// <remarks/>
        public void AuthServerBaseUrlAsync(object userState) {
            if ((this.AuthServerBaseUrlOperationCompleted == null)) {
                this.AuthServerBaseUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthServerBaseUrlOperationCompleted);
            }
            this.InvokeAsync("AuthServerBaseUrl", new object[0], this.AuthServerBaseUrlOperationCompleted, userState);
        }
        
        private void OnAuthServerBaseUrlOperationCompleted(object arg) {
            if ((this.AuthServerBaseUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthServerBaseUrlCompleted(this, new AuthServerBaseUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="ScortoPatron", IsNullable=false)]
    public partial class SessionHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string sessionIdField;
        
        private string userHostField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        public string UserHost {
            get {
                return this.userHostField;
            }
            set {
                this.userHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategyScheduleItemDto {
        
        private int creatorUserIdField;
        
        private long idField;
        
        private string nameField;
        
        private ScheduleItemType scheduleTypeField;
        
        private string maskField;
        
        private System.DateTime nextRunField;
        
        private ExecutionType executionTypeField;
        
        private bool isPausedField;
        
        private System.Nullable<int> currentVersionIdField;
        
        private int strategyIdField;
        
        private string strategyNameField;
        
        private string strategyTypeField;
        
        private string strategyUniqueNameField;
        
        private System.Nullable<System.DateTime> strategyTerminationDateField;
        
        private string runTypeField;
        
        private string[] strategyScheduledInputsField;
        
        /// <remarks/>
        public int CreatorUserId {
            get {
                return this.creatorUserIdField;
            }
            set {
                this.creatorUserIdField = value;
            }
        }
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public ScheduleItemType ScheduleType {
            get {
                return this.scheduleTypeField;
            }
            set {
                this.scheduleTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Mask {
            get {
                return this.maskField;
            }
            set {
                this.maskField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NextRun {
            get {
                return this.nextRunField;
            }
            set {
                this.nextRunField = value;
            }
        }
        
        /// <remarks/>
        public ExecutionType ExecutionType {
            get {
                return this.executionTypeField;
            }
            set {
                this.executionTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPaused {
            get {
                return this.isPausedField;
            }
            set {
                this.isPausedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CurrentVersionId {
            get {
                return this.currentVersionIdField;
            }
            set {
                this.currentVersionIdField = value;
            }
        }
        
        /// <remarks/>
        public int StrategyId {
            get {
                return this.strategyIdField;
            }
            set {
                this.strategyIdField = value;
            }
        }
        
        /// <remarks/>
        public string StrategyName {
            get {
                return this.strategyNameField;
            }
            set {
                this.strategyNameField = value;
            }
        }
        
        /// <remarks/>
        public string StrategyType {
            get {
                return this.strategyTypeField;
            }
            set {
                this.strategyTypeField = value;
            }
        }
        
        /// <remarks/>
        public string StrategyUniqueName {
            get {
                return this.strategyUniqueNameField;
            }
            set {
                this.strategyUniqueNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> StrategyTerminationDate {
            get {
                return this.strategyTerminationDateField;
            }
            set {
                this.strategyTerminationDateField = value;
            }
        }
        
        /// <remarks/>
        public string RunType {
            get {
                return this.runTypeField;
            }
            set {
                this.runTypeField = value;
            }
        }
        
        /// <remarks/>
        public string[] StrategyScheduledInputs {
            get {
                return this.strategyScheduledInputsField;
            }
            set {
                this.strategyScheduledInputsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum ScheduleItemType {
        
        /// <remarks/>
        RunOnce,
        
        /// <remarks/>
        Weekly,
        
        /// <remarks/>
        Monthly,
        
        /// <remarks/>
        Hourly,
        
        /// <remarks/>
        Periodically,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum ExecutionType {
        
        /// <remarks/>
        OneAtATime = 1,
        
        /// <remarks/>
        SingleRun = 2,
        
        /// <remarks/>
        Exclusive = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class ScoringModelDTO {
        
        private int idField;
        
        private string guidField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private string modelTypeNameField;
        
        private System.Nullable<System.DateTime> creationDateField;
        
        private double cutOffPointField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private string createUserNameField;
        
        private int createUserIdField;
        
        private bool allowWeightsEditField;
        
        private bool allowSaveResultsField;
        
        private ScoringModelDTO[] childModelsField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ModelTypeName {
            get {
                return this.modelTypeNameField;
            }
            set {
                this.modelTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public double CutOffPoint {
            get {
                return this.cutOffPointField;
            }
            set {
                this.cutOffPointField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreateUserName {
            get {
                return this.createUserNameField;
            }
            set {
                this.createUserNameField = value;
            }
        }
        
        /// <remarks/>
        public int CreateUserId {
            get {
                return this.createUserIdField;
            }
            set {
                this.createUserIdField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowWeightsEdit {
            get {
                return this.allowWeightsEditField;
            }
            set {
                this.allowWeightsEditField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowSaveResults {
            get {
                return this.allowSaveResultsField;
            }
            set {
                this.allowSaveResultsField = value;
            }
        }
        
        /// <remarks/>
        public ScoringModelDTO[] ChildModels {
            get {
                return this.childModelsField;
            }
            set {
                this.childModelsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TaskedStrategyParameter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategyInputParameter {
        
        private System.Nullable<long> idField;
        
        private string nameField;
        
        private string typeNameField;
        
        private string descriptionField;
        
        private string constraintField;
        
        private string initialValueField;
        
        private string displayNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Constraint {
            get {
                return this.constraintField;
            }
            set {
                this.constraintField = value;
            }
        }
        
        /// <remarks/>
        public string InitialValue {
            get {
                return this.initialValueField;
            }
            set {
                this.initialValueField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class TaskedStrategyParameter : StrategyInputParameter {
        
        private System.Nullable<long> taskedStrategyIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> TaskedStrategyId {
            get {
                return this.taskedStrategyIdField;
            }
            set {
                this.taskedStrategyIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class TaskedStrategy {
        
        private System.Nullable<long> idField;
        
        private System.Nullable<long> taskIdField;
        
        private string labelField;
        
        private string nameField;
        
        private System.Nullable<long> strategyIdField;
        
        private System.Nullable<long> versionField;
        
        private TaskedStrategyParameter[] parametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> StrategyId {
            get {
                return this.strategyIdField;
            }
            set {
                this.strategyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public TaskedStrategyParameter[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategyTask {
        
        private System.Nullable<long> idField;
        
        private System.Nullable<long> areaIdField;
        
        private string nameField;
        
        private string descriptionField;
        
        private TaskedStrategy[] strategiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> AreaId {
            get {
                return this.areaIdField;
            }
            set {
                this.areaIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public TaskedStrategy[] Strategies {
            get {
                return this.strategiesField;
            }
            set {
                this.strategiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategyArea {
        
        private System.Nullable<long> idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private StrategyTask[] tasksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public StrategyTask[] Tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class SpreadSheetDto {
        
        private int idField;
        
        private string nameField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private SpreadSheetDto[] terminatedSpreadSheetsField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        public SpreadSheetDto[] TerminatedSpreadSheets {
            get {
                return this.terminatedSpreadSheetsField;
            }
            set {
                this.terminatedSpreadSheetsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CalendarDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class CalendarBase {
        
        private bool isBaseField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public bool IsBase {
            get {
                return this.isBaseField;
            }
            set {
                this.isBaseField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class CalendarDTO : CalendarBase {
        
        private int idField;
        
        private CalendarDTO[] baseCalendarsField;
        
        private DayDTO[] daysField;
        
        private EntryDTO[] entriesField;
        
        private string nameField;
        
        private System.Nullable<int> isDeletedField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public CalendarDTO[] BaseCalendars {
            get {
                return this.baseCalendarsField;
            }
            set {
                this.baseCalendarsField = value;
            }
        }
        
        /// <remarks/>
        public DayDTO[] Days {
            get {
                return this.daysField;
            }
            set {
                this.daysField = value;
            }
        }
        
        /// <remarks/>
        public EntryDTO[] Entries {
            get {
                return this.entriesField;
            }
            set {
                this.entriesField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DayDTO : DayBase {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DayDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class DayBase {
        
        private DayOfWeek dayOfWeekField;
        
        private bool isWorkDayField;
        
        private System.DateTime beginsAtField;
        
        private int durationField;
        
        private System.DateTime lunchBeginsAtField;
        
        private int lunchDurationField;
        
        /// <remarks/>
        public DayOfWeek DayOfWeek {
            get {
                return this.dayOfWeekField;
            }
            set {
                this.dayOfWeekField = value;
            }
        }
        
        /// <remarks/>
        public bool IsWorkDay {
            get {
                return this.isWorkDayField;
            }
            set {
                this.isWorkDayField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime BeginsAt {
            get {
                return this.beginsAtField;
            }
            set {
                this.beginsAtField = value;
            }
        }
        
        /// <remarks/>
        public int Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LunchBeginsAt {
            get {
                return this.lunchBeginsAtField;
            }
            set {
                this.lunchBeginsAtField = value;
            }
        }
        
        /// <remarks/>
        public int LunchDuration {
            get {
                return this.lunchDurationField;
            }
            set {
                this.lunchDurationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum DayOfWeek {
        
        /// <remarks/>
        Sunday,
        
        /// <remarks/>
        Monday,
        
        /// <remarks/>
        Tuesday,
        
        /// <remarks/>
        Wednesday,
        
        /// <remarks/>
        Thursday,
        
        /// <remarks/>
        Friday,
        
        /// <remarks/>
        Saturday,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class EntryDTO : EntryBase {
        
        private int idField;
        
        private EntryDTO[] exceptionEntriesField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public EntryDTO[] ExceptionEntries {
            get {
                return this.exceptionEntriesField;
            }
            set {
                this.exceptionEntriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EntryDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class EntryBase {
        
        private System.DateTime dateField;
        
        private string descriptionField;
        
        private EntryMode modeField;
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public EntryMode Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum EntryMode {
        
        /// <remarks/>
        Once,
        
        /// <remarks/>
        Year,
        
        /// <remarks/>
        Exception,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategyReferencesCount {
        
        private int idField;
        
        private int taskedCountField;
        
        private int scheduledCountField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int TaskedCount {
            get {
                return this.taskedCountField;
            }
            set {
                this.taskedCountField = value;
            }
        }
        
        /// <remarks/>
        public int ScheduledCount {
            get {
                return this.scheduledCountField;
            }
            set {
                this.scheduledCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class TreeAttachTemplateLinkDTO {
        
        private int templateIdField;
        
        private int nodeIdField;
        
        private string attachControlNameField;
        
        private string groupNameField;
        
        /// <remarks/>
        public int TemplateId {
            get {
                return this.templateIdField;
            }
            set {
                this.templateIdField = value;
            }
        }
        
        /// <remarks/>
        public int NodeId {
            get {
                return this.nodeIdField;
            }
            set {
                this.nodeIdField = value;
            }
        }
        
        /// <remarks/>
        public string AttachControlName {
            get {
                return this.attachControlNameField;
            }
            set {
                this.attachControlNameField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class TreeAttachGroupDTO {
        
        private string nameField;
        
        private string displayNameField;
        
        private int[] templateIdsField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public int[] TemplateIds {
            get {
                return this.templateIdsField;
            }
            set {
                this.templateIdsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class TreeAttachDTO {
        
        private TreeAttachGroupDTO[] groupsField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public TreeAttachGroupDTO[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class PublicStrategy {
        
        private string displayNameField;
        
        private System.Nullable<System.DateTime> termDateField;
        
        private string stateField;
        
        private string authorNameField;
        
        private string descriptionField;
        
        private System.Nullable<decimal> publicNameIdField;
        
        private System.Nullable<decimal> strategyIdField;
        
        private System.Nullable<double> percentField;
        
        private string strategyNameField;
        
        private string publicNameStringField;
        
        private System.Nullable<int> stateIdField;
        
        private Action currentActionField;
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TermDate {
            get {
                return this.termDateField;
            }
            set {
                this.termDateField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorName {
            get {
                return this.authorNameField;
            }
            set {
                this.authorNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> PublicNameId {
            get {
                return this.publicNameIdField;
            }
            set {
                this.publicNameIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> StrategyId {
            get {
                return this.strategyIdField;
            }
            set {
                this.strategyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> Percent {
            get {
                return this.percentField;
            }
            set {
                this.percentField = value;
            }
        }
        
        /// <remarks/>
        public string StrategyName {
            get {
                return this.strategyNameField;
            }
            set {
                this.strategyNameField = value;
            }
        }
        
        /// <remarks/>
        public string PublicNameString {
            get {
                return this.publicNameStringField;
            }
            set {
                this.publicNameStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> StateId {
            get {
                return this.stateIdField;
            }
            set {
                this.stateIdField = value;
            }
        }
        
        /// <remarks/>
        public Action CurrentAction {
            get {
                return this.currentActionField;
            }
            set {
                this.currentActionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum Action {
        
        /// <remarks/>
        Publish,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        Delete,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class PublicName {
        
        private System.Nullable<decimal> idField;
        
        private string nameField;
        
        private System.Nullable<int> numberAssociatedStrategiesField;
        
        private System.Nullable<bool> isStoppedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> NumberAssociatedStrategies {
            get {
                return this.numberAssociatedStrategiesField;
            }
            set {
                this.numberAssociatedStrategiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IsStopped {
            get {
                return this.isStoppedField;
            }
            set {
                this.isStoppedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class Node {
        
        private int idField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseCustomerTypeField {
        
        private long idField;
        
        private string fieldNameField;
        
        private string fieldTypeField;
        
        private string dictionaryNameField;
        
        private System.Nullable<long> dictionaryIdField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
            }
        }
        
        /// <remarks/>
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DictionaryName {
            get {
                return this.dictionaryNameField;
            }
            set {
                this.dictionaryNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> DictionaryId {
            get {
                return this.dictionaryIdField;
            }
            set {
                this.dictionaryIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseCustomerType {
        
        private System.Nullable<long> idField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private string tableNameField;
        
        private string historyFactsTableNameField;
        
        private string historyFactSequenceNameField;
        
        private string hF2HTableNameField;
        
        private string historyTableNameField;
        
        private System.DateTime creationTimeField;
        
        private long userIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string TableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        public string HistoryFactsTableName {
            get {
                return this.historyFactsTableNameField;
            }
            set {
                this.historyFactsTableNameField = value;
            }
        }
        
        /// <remarks/>
        public string HistoryFactSequenceName {
            get {
                return this.historyFactSequenceNameField;
            }
            set {
                this.historyFactSequenceNameField = value;
            }
        }
        
        /// <remarks/>
        public string HF2HTableName {
            get {
                return this.hF2HTableNameField;
            }
            set {
                this.hF2HTableNameField = value;
            }
        }
        
        /// <remarks/>
        public string HistoryTableName {
            get {
                return this.historyTableNameField;
            }
            set {
                this.historyTableNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
            }
        }
        
        /// <remarks/>
        public long UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseAccountTypeField {
        
        private long idField;
        
        private string fieldNameField;
        
        private string fieldTypeField;
        
        private System.Nullable<long> dictionaryIdField;
        
        private string dictionaryNameField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
            }
        }
        
        /// <remarks/>
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> DictionaryId {
            get {
                return this.dictionaryIdField;
            }
            set {
                this.dictionaryIdField = value;
            }
        }
        
        /// <remarks/>
        public string DictionaryName {
            get {
                return this.dictionaryNameField;
            }
            set {
                this.dictionaryNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseAccountType {
        
        private System.Nullable<long> idField;
        
        private long customerTypeIdField;
        
        private string customerTypeNameField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private string tableNameField;
        
        private string historyFactsTableNameField;
        
        private string historyFactsSequenceNameField;
        
        private string historyTableNameField;
        
        private string hF2HTableNameField;
        
        private System.DateTime creationTimeField;
        
        private long userIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public long CustomerTypeId {
            get {
                return this.customerTypeIdField;
            }
            set {
                this.customerTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerTypeName {
            get {
                return this.customerTypeNameField;
            }
            set {
                this.customerTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string TableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        public string HistoryFactsTableName {
            get {
                return this.historyFactsTableNameField;
            }
            set {
                this.historyFactsTableNameField = value;
            }
        }
        
        /// <remarks/>
        public string HistoryFactsSequenceName {
            get {
                return this.historyFactsSequenceNameField;
            }
            set {
                this.historyFactsSequenceNameField = value;
            }
        }
        
        /// <remarks/>
        public string HistoryTableName {
            get {
                return this.historyTableNameField;
            }
            set {
                this.historyTableNameField = value;
            }
        }
        
        /// <remarks/>
        public string HF2HTableName {
            get {
                return this.hF2HTableNameField;
            }
            set {
                this.hF2HTableNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationTime {
            get {
                return this.creationTimeField;
            }
            set {
                this.creationTimeField = value;
            }
        }
        
        /// <remarks/>
        public long UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseDictionaryParam {
        
        private System.Nullable<decimal> idField;
        
        private string fieldNameField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private string fieldTypeField;
        
        private System.Nullable<long> masterDictionaryIdField;
        
        private string masterDictionaryNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> MasterDictionaryId {
            get {
                return this.masterDictionaryIdField;
            }
            set {
                this.masterDictionaryIdField = value;
            }
        }
        
        /// <remarks/>
        public string MasterDictionaryName {
            get {
                return this.masterDictionaryNameField;
            }
            set {
                this.masterDictionaryNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseDictionaryRecord {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseDictionary {
        
        private System.Nullable<long> idField;
        
        private string displayNameField;
        
        private string tableNameField;
        
        private string descriptionField;
        
        private WarehouseDictionaryRecord[] contentField;
        
        private WarehouseDictionaryParam[] parametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string TableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public WarehouseDictionaryRecord[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        public WarehouseDictionaryParam[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WhereFilterCondition {
        
        private string fieldNameField;
        
        private string operatorField;
        
        private string valueField;
        
        /// <remarks/>
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
            }
        }
        
        /// <remarks/>
        public string Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WhereFilterRule {
        
        private WhereFilterCondition[] conditionsField;
        
        /// <remarks/>
        public WhereFilterCondition[] Conditions {
            get {
                return this.conditionsField;
            }
            set {
                this.conditionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DataSourceWhereFilter {
        
        private WhereFilterRule[] rulesField;
        
        /// <remarks/>
        public WhereFilterRule[] Rules {
            get {
                return this.rulesField;
            }
            set {
                this.rulesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DatasourceListItemDescriptor {
        
        private System.Nullable<long> idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string typeField;
        
        private System.Nullable<System.DateTime> creationDateField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private string displayNameField;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class RoleSimpleDTO {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategySimpleDTO {
        
        private int idField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class AttachAccessRuleDTO {
        
        private int idField;
        
        private System.Nullable<int> strategyIdField;
        
        private System.Nullable<int> nodeIdField;
        
        private string attachField;
        
        private string groupField;
        
        private System.Nullable<int> roleIdField;
        
        private System.Nullable<bool> allowViewField;
        
        private System.Nullable<bool> allowEditField;
        
        private System.Nullable<bool> allowDeleteField;
        
        private int priorityField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> StrategyId {
            get {
                return this.strategyIdField;
            }
            set {
                this.strategyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> NodeId {
            get {
                return this.nodeIdField;
            }
            set {
                this.nodeIdField = value;
            }
        }
        
        /// <remarks/>
        public string Attach {
            get {
                return this.attachField;
            }
            set {
                this.attachField = value;
            }
        }
        
        /// <remarks/>
        public string Group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> RoleId {
            get {
                return this.roleIdField;
            }
            set {
                this.roleIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> AllowView {
            get {
                return this.allowViewField;
            }
            set {
                this.allowViewField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> AllowEdit {
            get {
                return this.allowEditField;
            }
            set {
                this.allowEditField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> AllowDelete {
            get {
                return this.allowDeleteField;
            }
            set {
                this.allowDeleteField = value;
            }
        }
        
        /// <remarks/>
        public int Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class ColumnsMigrationItem {
        
        private string oldNameField;
        
        private string newNameField;
        
        /// <remarks/>
        public string OldName {
            get {
                return this.oldNameField;
            }
            set {
                this.oldNameField = value;
            }
        }
        
        /// <remarks/>
        public string NewName {
            get {
                return this.newNameField;
            }
            set {
                this.newNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class BusinessEntityHistoryItemDto {
        
        private string commentField;
        
        private System.DateTime creationDateField;
        
        private string userNameField;
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class BusinessEntityDto {
        
        private int idField;
        
        private string versionField;
        
        private string nameField;
        
        private string commentField;
        
        private System.DateTime creationDateField;
        
        private string descriptionField;
        
        private string userNameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class TemplateLink {
        
        private Template linkedTemplateField;
        
        private System.Nullable<decimal> nodeIdField;
        
        private System.Nullable<decimal> outputTypeField;
        
        private bool isLinkedField;
        
        private string templateNameField;
        
        /// <remarks/>
        public Template LinkedTemplate {
            get {
                return this.linkedTemplateField;
            }
            set {
                this.linkedTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> NodeId {
            get {
                return this.nodeIdField;
            }
            set {
                this.nodeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> OutputType {
            get {
                return this.outputTypeField;
            }
            set {
                this.outputTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLinked {
            get {
                return this.isLinkedField;
            }
            set {
                this.isLinkedField = value;
            }
        }
        
        /// <remarks/>
        public string TemplateName {
            get {
                return this.templateNameField;
            }
            set {
                this.templateNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class Template {
        
        private Template[] childTemplatesField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private string displayNameField;
        
        private System.Nullable<decimal> userIdField;
        
        private string fullUserNameField;
        
        private System.Nullable<int> exceptionTypeField;
        
        private string variablesXmlField;
        
        private byte[] binaryBodyField;
        
        private System.Nullable<int> attachedNodesCountField;
        
        private string attachedNodesListField;
        
        private System.Nullable<int> attachedStrategiesCountField;
        
        private string attachedStrategyListField;
        
        private System.Nullable<decimal> idField;
        
        private string fileNameField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> uploadDateField;
        
        private string linkedToField;
        
        private string linkedFromListField;
        
        /// <remarks/>
        public Template[] ChildTemplates {
            get {
                return this.childTemplatesField;
            }
            set {
                this.childTemplatesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string FullUserName {
            get {
                return this.fullUserNameField;
            }
            set {
                this.fullUserNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ExceptionType {
            get {
                return this.exceptionTypeField;
            }
            set {
                this.exceptionTypeField = value;
            }
        }
        
        /// <remarks/>
        public string VariablesXml {
            get {
                return this.variablesXmlField;
            }
            set {
                this.variablesXmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BinaryBody {
            get {
                return this.binaryBodyField;
            }
            set {
                this.binaryBodyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AttachedNodesCount {
            get {
                return this.attachedNodesCountField;
            }
            set {
                this.attachedNodesCountField = value;
            }
        }
        
        /// <remarks/>
        public string AttachedNodesList {
            get {
                return this.attachedNodesListField;
            }
            set {
                this.attachedNodesListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AttachedStrategiesCount {
            get {
                return this.attachedStrategiesCountField;
            }
            set {
                this.attachedStrategiesCountField = value;
            }
        }
        
        /// <remarks/>
        public string AttachedStrategyList {
            get {
                return this.attachedStrategyListField;
            }
            set {
                this.attachedStrategyListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> UploadDate {
            get {
                return this.uploadDateField;
            }
            set {
                this.uploadDateField = value;
            }
        }
        
        /// <remarks/>
        public string LinkedTo {
            get {
                return this.linkedToField;
            }
            set {
                this.linkedToField = value;
            }
        }
        
        /// <remarks/>
        public string LinkedFromList {
            get {
                return this.linkedFromListField;
            }
            set {
                this.linkedFromListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class BehavioralReportType {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class BehavioralReport {
        
        private System.Nullable<long> idField;
        
        private string nameField;
        
        private System.Nullable<long> strategyIdField;
        
        private string strategyNameField;
        
        private System.Nullable<long> reportTypeIdField;
        
        private string reportTypeNameField;
        
        private System.Nullable<System.DateTime> creationDateField;
        
        private StrategyRunMode strategyRunModeField;
        
        private bool isNotReadField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> StrategyId {
            get {
                return this.strategyIdField;
            }
            set {
                this.strategyIdField = value;
            }
        }
        
        /// <remarks/>
        public string StrategyName {
            get {
                return this.strategyNameField;
            }
            set {
                this.strategyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> ReportTypeId {
            get {
                return this.reportTypeIdField;
            }
            set {
                this.reportTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string ReportTypeName {
            get {
                return this.reportTypeNameField;
            }
            set {
                this.reportTypeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public StrategyRunMode StrategyRunMode {
            get {
                return this.strategyRunModeField;
            }
            set {
                this.strategyRunModeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNotRead {
            get {
                return this.isNotReadField;
            }
            set {
                this.isNotReadField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum StrategyRunMode {
        
        /// <remarks/>
        eWorkRun,
        
        /// <remarks/>
        eTestRun,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class StrategyParameterStub {
        
        private string nameField;
        
        private object valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class ExtStrategy {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private System.Nullable<bool> isEmbeddingAllowedField;
        
        private int userIdField;
        
        private string userNameField;
        
        private int authorIdField;
        
        private bool stateField;
        
        private string strategyTypeField;
        
        private StrategySubState subStateField;
        
        private System.Nullable<System.DateTime> creationDateField;
        
        private System.Nullable<int> executionDurationField;
        
        private System.Nullable<System.DateTime> lastUpdateDateField;
        
        private ExtStrategy[] childStrategiesField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private string displayNameField;
        
        private string authorNameField;
        
        private bool isMigrationSupportedField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IsEmbeddingAllowed {
            get {
                return this.isEmbeddingAllowedField;
            }
            set {
                this.isEmbeddingAllowedField = value;
            }
        }
        
        /// <remarks/>
        public int UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public int AuthorId {
            get {
                return this.authorIdField;
            }
            set {
                this.authorIdField = value;
            }
        }
        
        /// <remarks/>
        public bool State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string StrategyType {
            get {
                return this.strategyTypeField;
            }
            set {
                this.strategyTypeField = value;
            }
        }
        
        /// <remarks/>
        public StrategySubState SubState {
            get {
                return this.subStateField;
            }
            set {
                this.subStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ExecutionDuration {
            get {
                return this.executionDurationField;
            }
            set {
                this.executionDurationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastUpdateDate {
            get {
                return this.lastUpdateDateField;
            }
            set {
                this.lastUpdateDateField = value;
            }
        }
        
        /// <remarks/>
        public ExtStrategy[] ChildStrategies {
            get {
                return this.childStrategiesField;
            }
            set {
                this.childStrategiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorName {
            get {
                return this.authorNameField;
            }
            set {
                this.authorNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMigrationSupported {
            get {
                return this.isMigrationSupportedField;
            }
            set {
                this.isMigrationSupportedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum StrategySubState {
        
        /// <remarks/>
        Locked,
        
        /// <remarks/>
        Unlocked,
        
        /// <remarks/>
        Published,
        
        /// <remarks/>
        Suspended,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class SecurityApplication {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private SecurityApplicationType typeField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public SecurityApplicationType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum SecurityApplicationType {
        
        /// <remarks/>
        ApplicationServer,
        
        /// <remarks/>
        WebWorkplaces,
        
        /// <remarks/>
        Agents,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class MenuItem {
        
        private int idField;
        
        private int secAppIdField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string urlField;
        
        private MenuItem[] tabsField;
        
        private string filterDataField;
        
        private string[] statusesField;
        
        private int positionField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int SecAppId {
            get {
                return this.secAppIdField;
            }
            set {
                this.secAppIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public MenuItem[] Tabs {
            get {
                return this.tabsField;
            }
            set {
                this.tabsField = value;
            }
        }
        
        /// <remarks/>
        public string FilterData {
            get {
                return this.filterDataField;
            }
            set {
                this.filterDataField = value;
            }
        }
        
        /// <remarks/>
        public string[] Statuses {
            get {
                return this.statusesField;
            }
            set {
                this.statusesField = value;
            }
        }
        
        /// <remarks/>
        public int Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class Status {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DataSetColumn {
        
        private string nameField;
        
        private string displayNameField;
        
        private string typeNameField;
        
        private string formatStringField;
        
        private string groupNameField;
        
        private int orderField;
        
        private string dataSetNameField;
        
        private string dataSourceNameField;
        
        private string dataSourceFieldNameField;
        
        private string constraintField;
        
        private string dataSourceTypeField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string FormatString {
            get {
                return this.formatStringField;
            }
            set {
                this.formatStringField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        public int Order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        /// <remarks/>
        public string DataSetName {
            get {
                return this.dataSetNameField;
            }
            set {
                this.dataSetNameField = value;
            }
        }
        
        /// <remarks/>
        public string DataSourceName {
            get {
                return this.dataSourceNameField;
            }
            set {
                this.dataSourceNameField = value;
            }
        }
        
        /// <remarks/>
        public string DataSourceFieldName {
            get {
                return this.dataSourceFieldNameField;
            }
            set {
                this.dataSourceFieldNameField = value;
            }
        }
        
        /// <remarks/>
        public string Constraint {
            get {
                return this.constraintField;
            }
            set {
                this.constraintField = value;
            }
        }
        
        /// <remarks/>
        public string DataSourceType {
            get {
                return this.dataSourceTypeField;
            }
            set {
                this.dataSourceTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class NodeVariable {
        
        private string nameField;
        
        private NodeVariableType typeField;
        
        private string constraintField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public NodeVariableType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Constraint {
            get {
                return this.constraintField;
            }
            set {
                this.constraintField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum NodeVariableType {
        
        /// <remarks/>
        String,
        
        /// <remarks/>
        Numeric,
        
        /// <remarks/>
        Constrained,
        
        /// <remarks/>
        Grid,
        
        /// <remarks/>
        Attach,
        
        /// <remarks/>
        DateTime,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class NodeOutletInfo {
        
        private string nameField;
        
        private bool signatureRequiredField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool SignatureRequired {
            get {
                return this.signatureRequiredField;
            }
            set {
                this.signatureRequiredField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class NodeParameterInfo {
        
        private string nameField;
        
        private string typeNameField;
        
        private string displayTypeNameField;
        
        private string descriptionField;
        
        private bool isInputField;
        
        private bool isOutputField;
        
        private string initialValueField;
        
        private bool isNullableField;
        
        private bool signatureRequiredField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayTypeName {
            get {
                return this.displayTypeNameField;
            }
            set {
                this.displayTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsInput {
            get {
                return this.isInputField;
            }
            set {
                this.isInputField = value;
            }
        }
        
        /// <remarks/>
        public bool IsOutput {
            get {
                return this.isOutputField;
            }
            set {
                this.isOutputField = value;
            }
        }
        
        /// <remarks/>
        public string InitialValue {
            get {
                return this.initialValueField;
            }
            set {
                this.initialValueField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNullable {
            get {
                return this.isNullableField;
            }
            set {
                this.isNullableField = value;
            }
        }
        
        /// <remarks/>
        public bool SignatureRequired {
            get {
                return this.signatureRequiredField;
            }
            set {
                this.signatureRequiredField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class ExternalNode {
        
        private NodeParameterInfo[] parametersField;
        
        private NodeOutletInfo[] outletsField;
        
        private string applicationNameField;
        
        private ExternalNode[] childNodesField;
        
        private System.Nullable<decimal> idField;
        
        private System.Nullable<decimal> groupIdField;
        
        private string nameField;
        
        private string displayNameField;
        
        private string descriptionField;
        
        private System.Nullable<decimal> executionDurationField;
        
        private byte[] iconField;
        
        private byte[] businessRulesField;
        
        private byte[] nDXField;
        
        private byte[] layoutField;
        
        private byte[] designField;
        
        private byte[] xsdField;
        
        private System.Nullable<decimal> applicationIdField;
        
        private System.Nullable<decimal> isHardReactionField;
        
        private System.Nullable<decimal> containsPrintField;
        
        private System.Nullable<System.DateTime> startDateField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private string nodeCommentField;
        
        private System.Guid nodeGuidField;
        
        private bool isDigitalSignatureRequiredField;
        
        private string[] notSignedInformationalVariablesField;
        
        private NodeVariable[] nodeVariablesField;
        
        private DataSetColumn[] dataSetColumnsField;
        
        /// <remarks/>
        public NodeParameterInfo[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <remarks/>
        public NodeOutletInfo[] Outlets {
            get {
                return this.outletsField;
            }
            set {
                this.outletsField = value;
            }
        }
        
        /// <remarks/>
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
        /// <remarks/>
        public ExternalNode[] ChildNodes {
            get {
                return this.childNodesField;
            }
            set {
                this.childNodesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> GroupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> ExecutionDuration {
            get {
                return this.executionDurationField;
            }
            set {
                this.executionDurationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Icon {
            get {
                return this.iconField;
            }
            set {
                this.iconField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BusinessRules {
            get {
                return this.businessRulesField;
            }
            set {
                this.businessRulesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] NDX {
            get {
                return this.nDXField;
            }
            set {
                this.nDXField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Layout {
            get {
                return this.layoutField;
            }
            set {
                this.layoutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Design {
            get {
                return this.designField;
            }
            set {
                this.designField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Xsd {
            get {
                return this.xsdField;
            }
            set {
                this.xsdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> ApplicationId {
            get {
                return this.applicationIdField;
            }
            set {
                this.applicationIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> IsHardReaction {
            get {
                return this.isHardReactionField;
            }
            set {
                this.isHardReactionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> ContainsPrint {
            get {
                return this.containsPrintField;
            }
            set {
                this.containsPrintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        public string NodeComment {
            get {
                return this.nodeCommentField;
            }
            set {
                this.nodeCommentField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid NodeGuid {
            get {
                return this.nodeGuidField;
            }
            set {
                this.nodeGuidField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDigitalSignatureRequired {
            get {
                return this.isDigitalSignatureRequiredField;
            }
            set {
                this.isDigitalSignatureRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string[] NotSignedInformationalVariables {
            get {
                return this.notSignedInformationalVariablesField;
            }
            set {
                this.notSignedInformationalVariablesField = value;
            }
        }
        
        /// <remarks/>
        public NodeVariable[] NodeVariables {
            get {
                return this.nodeVariablesField;
            }
            set {
                this.nodeVariablesField = value;
            }
        }
        
        /// <remarks/>
        public DataSetColumn[] DataSetColumns {
            get {
                return this.dataSetColumnsField;
            }
            set {
                this.dataSetColumnsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSourceParam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WarehouseDataSourceParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MethodField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class DataParameterBase {
        
        private int idField;
        
        private int parentIdField;
        
        private System.Nullable<bool> useVariableField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string typeStringField;
        
        private string constraintStringField;
        
        private System.Nullable<long> dictionaryIdField;
        
        private string sizeField;
        
        private string defaultValueField;
        
        private string dataTypeStringField;
        
        private string datasourceTypeStringField;
        
        private ParameterDirection directionField;
        
        private bool isColumnTypeField;
        
        private bool isParentLevelField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int ParentId {
            get {
                return this.parentIdField;
            }
            set {
                this.parentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> UseVariable {
            get {
                return this.useVariableField;
            }
            set {
                this.useVariableField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string TypeString {
            get {
                return this.typeStringField;
            }
            set {
                this.typeStringField = value;
            }
        }
        
        /// <remarks/>
        public string ConstraintString {
            get {
                return this.constraintStringField;
            }
            set {
                this.constraintStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> DictionaryId {
            get {
                return this.dictionaryIdField;
            }
            set {
                this.dictionaryIdField = value;
            }
        }
        
        /// <remarks/>
        public string Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                this.defaultValueField = value;
            }
        }
        
        /// <remarks/>
        public string DataTypeString {
            get {
                return this.dataTypeStringField;
            }
            set {
                this.dataTypeStringField = value;
            }
        }
        
        /// <remarks/>
        public string DatasourceTypeString {
            get {
                return this.datasourceTypeStringField;
            }
            set {
                this.datasourceTypeStringField = value;
            }
        }
        
        /// <remarks/>
        public ParameterDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsColumnType {
            get {
                return this.isColumnTypeField;
            }
            set {
                this.isColumnTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsParentLevel {
            get {
                return this.isParentLevelField;
            }
            set {
                this.isParentLevelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum ParameterDirection {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        ReturnValue,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WarehouseDataSourceParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MethodField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DataSourceParam : DataParameterBase {
        
        private string xsdField;
        
        private string parameterNameField;
        
        private string parameterTypeField;
        
        private string actionField;
        
        /// <remarks/>
        public string Xsd {
            get {
                return this.xsdField;
            }
            set {
                this.xsdField = value;
            }
        }
        
        /// <remarks/>
        public string ParameterName {
            get {
                return this.parameterNameField;
            }
            set {
                this.parameterNameField = value;
            }
        }
        
        /// <remarks/>
        public string ParameterType {
            get {
                return this.parameterTypeField;
            }
            set {
                this.parameterTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseDataSourceParameter : DataSourceParam {
        
        private System.Nullable<long> dataSourceIdField;
        
        private bool isHistoricalField;
        
        private bool isIdentityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> DataSourceId {
            get {
                return this.dataSourceIdField;
            }
            set {
                this.dataSourceIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsHistorical {
            get {
                return this.isHistoricalField;
            }
            set {
                this.isHistoricalField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIdentity {
            get {
                return this.isIdentityField;
            }
            set {
                this.isIdentityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class MethodField : DataSourceParam {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DatasourceStub))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSourceDataDestination))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DatasourceDatabase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WarehouseDataSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HttpWebMethodDatasource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebMethodDatasource))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class DatasourceBase {
        
        private string nameField;
        
        private string descriptionField;
        
        private DataSourceParam[] fieldsField;
        
        private System.Nullable<long> idField;
        
        private string typeField;
        
        private System.Nullable<long> userIdField;
        
        private string userNameField;
        
        private System.Nullable<System.DateTime> terminationDateField;
        
        private string displayNameField;
        
        private System.Nullable<System.DateTime> creationDateField;
        
        private string timeoutDurationField;
        
        private string keyVariableTypeField;
        
        private bool isDeletedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DataSourceParam[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<long> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<long> UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=7)]
        public System.Nullable<System.DateTime> TerminationDate {
            get {
                return this.terminationDateField;
            }
            set {
                this.terminationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=9)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string TimeoutDuration {
            get {
                return this.timeoutDurationField;
            }
            set {
                this.timeoutDurationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string KeyVariableType {
            get {
                return this.keyVariableTypeField;
            }
            set {
                this.keyVariableTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public bool IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSourceDataDestination))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DatasourceDatabase))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WarehouseDataSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HttpWebMethodDatasource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebMethodDatasource))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DatasourceStub : DatasourceBase {
        
        private string contentField;
        
        private string exceptionTemplateField;
        
        private bool allInputParamsRequiredField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ExceptionTemplate {
            get {
                return this.exceptionTemplateField;
            }
            set {
                this.exceptionTemplateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool AllInputParamsRequired {
            get {
                return this.allInputParamsRequiredField;
            }
            set {
                this.allInputParamsRequiredField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DataSourceDataDestination : DatasourceStub {
        
        private DataSourceParam[] fields1Field;
        
        private string providerField;
        
        private string connectionStringField;
        
        private string tableNameField;
        
        private bool useInsertField;
        
        private bool useMainConnectionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute("Fields", Order=0)]
        public DataSourceParam[] Fields1 {
            get {
                return this.fields1Field;
            }
            set {
                this.fields1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Provider {
            get {
                return this.providerField;
            }
            set {
                this.providerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ConnectionString {
            get {
                return this.connectionStringField;
            }
            set {
                this.connectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string TableName {
            get {
                return this.tableNameField;
            }
            set {
                this.tableNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool UseInsert {
            get {
                return this.useInsertField;
            }
            set {
                this.useInsertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool UseMainConnection {
            get {
                return this.useMainConnectionField;
            }
            set {
                this.useMainConnectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataSource))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WarehouseDataSource))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class DatasourceDatabase : DatasourceStub {
        
        private string connectionStringField;
        
        private string queryTextField;
        
        private DataParameterBase[] fieldsHistoricalField;
        
        private string providerField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConnectionString {
            get {
                return this.connectionStringField;
            }
            set {
                this.connectionStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string QueryText {
            get {
                return this.queryTextField;
            }
            set {
                this.queryTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public DataParameterBase[] FieldsHistorical {
            get {
                return this.fieldsHistoricalField;
            }
            set {
                this.fieldsHistoricalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Provider {
            get {
                return this.providerField;
            }
            set {
                this.providerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DataSource : DatasourceDatabase {
        
        private DataSourceParam[] fields1Field;
        
        private LinkedStrategy[] linkedStrategiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute("Fields", Order=0)]
        public DataSourceParam[] Fields1 {
            get {
                return this.fields1Field;
            }
            set {
                this.fields1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public LinkedStrategy[] LinkedStrategies {
            get {
                return this.linkedStrategiesField;
            }
            set {
                this.linkedStrategiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class LinkedStrategy {
        
        private System.Nullable<decimal> idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WarehouseDataSource : DatasourceDatabase {
        
        private bool isExternalField;
        
        private string identityFieldField;
        
        private string referenceFieldField;
        
        private string historicalFactTableIdFieldField;
        
        private string baseTableField;
        
        private System.Nullable<long> refCustomerTypeIdField;
        
        private System.Nullable<long> refAccountTypeIdField;
        
        private string whereClauseField;
        
        private int destinationsCountField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsExternal {
            get {
                return this.isExternalField;
            }
            set {
                this.isExternalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string IdentityField {
            get {
                return this.identityFieldField;
            }
            set {
                this.identityFieldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ReferenceField {
            get {
                return this.referenceFieldField;
            }
            set {
                this.referenceFieldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string HistoricalFactTableIdField {
            get {
                return this.historicalFactTableIdFieldField;
            }
            set {
                this.historicalFactTableIdFieldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string BaseTable {
            get {
                return this.baseTableField;
            }
            set {
                this.baseTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<long> RefCustomerTypeId {
            get {
                return this.refCustomerTypeIdField;
            }
            set {
                this.refCustomerTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=6)]
        public System.Nullable<long> RefAccountTypeId {
            get {
                return this.refAccountTypeIdField;
            }
            set {
                this.refAccountTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string WhereClause {
            get {
                return this.whereClauseField;
            }
            set {
                this.whereClauseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int DestinationsCount {
            get {
                return this.destinationsCountField;
            }
            set {
                this.destinationsCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class HttpWebMethodDatasource : DatasourceStub {
        
        private DataSourceParam[] fields1Field;
        
        private MethodField[] methodFieldsField;
        
        private string urlField;
        
        private string methodField;
        
        private KeyParameter[] keyParametersField;
        
        private string proxyField;
        
        private string proxyLoginField;
        
        private string proxyPasswordField;
        
        private string proxyDomainField;
        
        private string parametersEncodingField;
        
        private string responseEncodingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute("Fields", Order=0)]
        public DataSourceParam[] Fields1 {
            get {
                return this.fields1Field;
            }
            set {
                this.fields1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public MethodField[] MethodFields {
            get {
                return this.methodFieldsField;
            }
            set {
                this.methodFieldsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public KeyParameter[] KeyParameters {
            get {
                return this.keyParametersField;
            }
            set {
                this.keyParametersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Proxy {
            get {
                return this.proxyField;
            }
            set {
                this.proxyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string ProxyLogin {
            get {
                return this.proxyLoginField;
            }
            set {
                this.proxyLoginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ProxyPassword {
            get {
                return this.proxyPasswordField;
            }
            set {
                this.proxyPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ProxyDomain {
            get {
                return this.proxyDomainField;
            }
            set {
                this.proxyDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string ParametersEncoding {
            get {
                return this.parametersEncodingField;
            }
            set {
                this.parametersEncodingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string ResponseEncoding {
            get {
                return this.responseEncodingField;
            }
            set {
                this.responseEncodingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class KeyParameter {
        
        private string nameField;
        
        private string typeNameField;
        
        private object valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string TypeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WebMethodDatasource : DatasourceStub {
        
        private MethodField[] methodFieldsField;
        
        private string urlField;
        
        private string methodField;
        
        private string proxyField;
        
        private string proxyLoginField;
        
        private string proxyPasswordField;
        
        private string proxyDomainField;
        
        private string authenticationLoginField;
        
        private string authenticationPasswordField;
        
        private string authenticationDomainField;
        
        private KeyParameter[] keyParametersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public MethodField[] MethodFields {
            get {
                return this.methodFieldsField;
            }
            set {
                this.methodFieldsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Proxy {
            get {
                return this.proxyField;
            }
            set {
                this.proxyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ProxyLogin {
            get {
                return this.proxyLoginField;
            }
            set {
                this.proxyLoginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ProxyPassword {
            get {
                return this.proxyPasswordField;
            }
            set {
                this.proxyPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string ProxyDomain {
            get {
                return this.proxyDomainField;
            }
            set {
                this.proxyDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string AuthenticationLogin {
            get {
                return this.authenticationLoginField;
            }
            set {
                this.authenticationLoginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string AuthenticationPassword {
            get {
                return this.authenticationPasswordField;
            }
            set {
                this.authenticationPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string AuthenticationDomain {
            get {
                return this.authenticationDomainField;
            }
            set {
                this.authenticationDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public KeyParameter[] KeyParameters {
            get {
                return this.keyParametersField;
            }
            set {
                this.keyParametersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SmtpAccountDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DbEmailAccountDTO))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebSrvAccountDTO))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public abstract partial class AccountBaseDTO {
        
        private int idField;
        
        private System.Nullable<int> isDeletedField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string emailFromField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> IsDeleted {
            get {
                return this.isDeletedField;
            }
            set {
                this.isDeletedField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string EmailFrom {
            get {
                return this.emailFromField;
            }
            set {
                this.emailFromField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class SmtpAccountDTO : AccountBaseDTO {
        
        private string smtpServerAddressField;
        
        private int portField;
        
        private string userNameField;
        
        private string passwordField;
        
        private string encryptionTypeField;
        
        private bool requireAuthenicationField;
        
        private bool encryptPasswordOnSerializeField;
        
        /// <remarks/>
        public string SmtpServerAddress {
            get {
                return this.smtpServerAddressField;
            }
            set {
                this.smtpServerAddressField = value;
            }
        }
        
        /// <remarks/>
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string EncryptionType {
            get {
                return this.encryptionTypeField;
            }
            set {
                this.encryptionTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool RequireAuthenication {
            get {
                return this.requireAuthenicationField;
            }
            set {
                this.requireAuthenicationField = value;
            }
        }
        
        /// <remarks/>
        public bool EncryptPasswordOnSerialize {
            get {
                return this.encryptPasswordOnSerializeField;
            }
            set {
                this.encryptPasswordOnSerializeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class DbEmailAccountDTO : AccountBaseDTO {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class WebSrvAccountDTO : AccountBaseDTO {
        
        private string serverAddressField;
        
        /// <remarks/>
        public string ServerAddress {
            get {
                return this.serverAddressField;
            }
            set {
                this.serverAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class CreditStrategy {
        
        private System.Nullable<decimal> idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class CreditProductParam {
        
        private System.Nullable<decimal> creditProductIdField;
        
        private System.Nullable<decimal> idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private object paramValueField;
        
        private string typeStringField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> CreditProductId {
            get {
                return this.creditProductIdField;
            }
            set {
                this.creditProductIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public object ParamValue {
            get {
                return this.paramValueField;
            }
            set {
                this.paramValueField = value;
            }
        }
        
        /// <remarks/>
        public string TypeString {
            get {
                return this.typeStringField;
            }
            set {
                this.typeStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public partial class CreditProduct {
        
        private System.Nullable<decimal> userIdField;
        
        private System.Nullable<decimal> idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private System.Nullable<System.DateTime> creationDateField;
        
        private CreditProductParam[] parametersField;
        
        private CreditStrategy[] linkedStrategiesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<decimal> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public CreditProductParam[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <remarks/>
        public CreditStrategy[] LinkedStrategies {
            get {
                return this.linkedStrategiesField;
            }
            set {
                this.linkedStrategiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum DatasourceType {
        
        /// <remarks/>
        ExternalDatabase,
        
        /// <remarks/>
        WebMethod,
        
        /// <remarks/>
        Warehouse,
        
        /// <remarks/>
        StoredProcedure,
        
        /// <remarks/>
        DataDestination,
        
        /// <remarks/>
        HttpWebMethod,
        
        /// <remarks/>
        BusinessEntity,
        
        /// <remarks/>
        AppDetailGrid,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum WarehouseDataSourceType {
        
        /// <remarks/>
        eCustomerBased,
        
        /// <remarks/>
        eAccountBased,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum EmailAccountsErrorCodes {
        
        /// <remarks/>
        Ok,
        
        /// <remarks/>
        NotUniqueName,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="ScortoPatron")]
    public enum ErrorCode {
        
        /// <remarks/>
        CantFind,
        
        /// <remarks/>
        StrategyNameDuplicated,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void EncryptCompletedEventHandler(object sender, EncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCreditProductListCompletedEventHandler(object sender, GetCreditProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CreditProduct[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CreditProduct[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateCreditProductCompletedEventHandler(object sender, UpdateCreditProductCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCreditProductCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCreditProductCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<decimal> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<decimal>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteCreditProductCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCpUsagesCompletedEventHandler(object sender, GetCpUsagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCpUsagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCpUsagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteCreditParamCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNodesListCompletedEventHandler(object sender, GetNodesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalNode[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalNode[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNodeFilesForRestoreAndSaveCompletedEventHandler(object sender, GetNodeFilesForRestoreAndSaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodeFilesForRestoreAndSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodeFilesForRestoreAndSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExternalNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExternalNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAvailableStrategyTypesCompletedEventHandler(object sender, GetAvailableStrategyTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableStrategyTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableStrategyTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllStatusesCompletedEventHandler(object sender, GetAllStatusesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Status[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Status[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckStatusNameCompletedEventHandler(object sender, CheckStatusNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckStatusNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckStatusNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveOrUpdatesStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetMenuItemsByStatusIdCompletedEventHandler(object sender, GetMenuItemsByStatusIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuItemsByStatusIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuItemsByStatusIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecurityApplicationsCompletedEventHandler(object sender, GetSecurityApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SecurityApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SecurityApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecurityApplicationsOfTypesCompletedEventHandler(object sender, GetSecurityApplicationsOfTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityApplicationsOfTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityApplicationsOfTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SecurityApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SecurityApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void IncreaseMenuItemsPositionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DecreaseMenuItemsPositionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetMenuItemsBySecAppIdCompletedEventHandler(object sender, GetMenuItemsBySecAppIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMenuItemsBySecAppIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMenuItemsBySecAppIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllMenuItemsCompletedEventHandler(object sender, GetAllMenuItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMenuItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMenuItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MenuItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MenuItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckMenuItemCompletedEventHandler(object sender, CheckMenuItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMenuItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMenuItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveOrUpdateMenuItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteMenuItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckSecurityApplicationNameCompletedEventHandler(object sender, CheckSecurityApplicationNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSecurityApplicationNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckSecurityApplicationNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveOrUpdateSecurityApplicationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSecurityApplicationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetApplicationsContainingMenuItemsCompletedEventHandler(object sender, GetApplicationsContainingMenuItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationsContainingMenuItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationsContainingMenuItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SecurityApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SecurityApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyListByTypeCompletedEventHandler(object sender, GetStrategyListByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyListByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyListByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExtStrategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtStrategy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RunBehavioralStrategyCompletedEventHandler(object sender, RunBehavioralStrategyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunBehavioralStrategyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunBehavioralStrategyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RunStrategyWithParamsCompletedEventHandler(object sender, RunStrategyWithParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunStrategyWithParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunStrategyWithParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNextScheduledRunCompletedEventHandler(object sender, GetNextScheduledRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextScheduledRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextScheduledRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetScheduleItemsCountCompletedEventHandler(object sender, GetScheduleItemsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScheduleItemsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduleItemsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBehavioralReportsAllCompletedEventHandler(object sender, GetBehavioralReportsAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBehavioralReportsAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBehavioralReportsAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BehavioralReport[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BehavioralReport[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBehavioralReportsCompletedEventHandler(object sender, GetBehavioralReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBehavioralReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBehavioralReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BehavioralReport[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BehavioralReport[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetReportTypesCompletedEventHandler(object sender, GetReportTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BehavioralReportType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BehavioralReportType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBehavioralReportFileNameCompletedEventHandler(object sender, GetBehavioralReportFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBehavioralReportFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBehavioralReportFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBehavioralReportFullPathCompletedEventHandler(object sender, GetBehavioralReportFullPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBehavioralReportFullPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBehavioralReportFullPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DownloadBehavioralReportCompletedEventHandler(object sender, DownloadBehavioralReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadBehavioralReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadBehavioralReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DownloadBehavioralReportUncompressedCompletedEventHandler(object sender, DownloadBehavioralReportUncompressedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadBehavioralReportUncompressedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadBehavioralReportUncompressedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBehavioralStrategiesListCompletedEventHandler(object sender, GetBehavioralStrategiesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBehavioralStrategiesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBehavioralStrategiesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExtStrategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtStrategy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTemplatesCompletedEventHandler(object sender, GetTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Template[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Template[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateTemplateCompletedEventHandler(object sender, UpdateTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Template Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Template)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteTemplateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTemplateLinksCompletedEventHandler(object sender, GetTemplateLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplateLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplateLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TemplateLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TemplateLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNodeTemplateLinksCompletedEventHandler(object sender, GetNodeTemplateLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodeTemplateLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodeTemplateLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TemplateLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TemplateLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateTemplateLinksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DownloadTemplateCompletedEventHandler(object sender, DownloadTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Template Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Template)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DownloadTemplateByNameCompletedEventHandler(object sender, DownloadTemplateByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTemplateByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTemplateByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Template Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Template)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEntityLinksCompletedEventHandler(object sender, GetEntityLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEntityLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEntityLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetExportTemplateLinkCompletedEventHandler(object sender, GetExportTemplateLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExportTemplateLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExportTemplateLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ApproveLinksBySourceIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteLinksBySourceIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddLinkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyNamesForExportTemplateCompletedEventHandler(object sender, GetStrategyNamesForExportTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyNamesForExportTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyNamesForExportTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBusinessEntitiesCompletedEventHandler(object sender, GetBusinessEntitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessEntitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessEntitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BusinessEntityDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BusinessEntityDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBusinessEntitityCompletedEventHandler(object sender, GetBusinessEntitityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessEntitityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessEntitityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BusinessEntityDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BusinessEntityDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBusinessEntititiesHistoryCompletedEventHandler(object sender, GetBusinessEntititiesHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessEntititiesHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessEntititiesHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BusinessEntityHistoryItemDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BusinessEntityHistoryItemDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBusinessEntityDescriptorByNameCompletedEventHandler(object sender, GetBusinessEntityDescriptorByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBusinessEntityDescriptorByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBusinessEntityDescriptorByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetActiveBusinessEntityVersionCompletedEventHandler(object sender, GetActiveBusinessEntityVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveBusinessEntityVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveBusinessEntityVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckIfExistsInActiveStateCompletedEventHandler(object sender, CheckIfExistsInActiveStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfExistsInActiveStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfExistsInActiveStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveBusinessEntityCompletedEventHandler(object sender, SaveBusinessEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveBusinessEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveBusinessEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckIfBusinessEntityExistsCompletedEventHandler(object sender, CheckIfBusinessEntityExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfBusinessEntityExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfBusinessEntityExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyNamesLinkedToBusinessEntityCompletedEventHandler(object sender, GetStrategyNamesLinkedToBusinessEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyNamesLinkedToBusinessEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyNamesLinkedToBusinessEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNodeNamesLinkedToBusinessEntityCompletedEventHandler(object sender, GetNodeNamesLinkedToBusinessEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodeNamesLinkedToBusinessEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodeNamesLinkedToBusinessEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteBusinessEntityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckIfBusinessEntityIsEmptyCompletedEventHandler(object sender, CheckIfBusinessEntityIsEmptyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfBusinessEntityIsEmptyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfBusinessEntityIsEmptyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllAttachAccessRulesCompletedEventHandler(object sender, GetAllAttachAccessRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllAttachAccessRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllAttachAccessRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AttachAccessRuleDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AttachAccessRuleDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllStrategiesSimpleCompletedEventHandler(object sender, GetAllStrategiesSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllStrategiesSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllStrategiesSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StrategySimpleDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StrategySimpleDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllRolesCompletedEventHandler(object sender, GetAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RoleSimpleDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RoleSimpleDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveOrUpdateAttachAccessRuleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteAttachAccessRuleCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void IncreaseAttachRulePriorityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DecreaseAttachRulePriorityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckAttachAccessRuleForUniquenessCompletedEventHandler(object sender, CheckAttachAccessRuleForUniquenessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAttachAccessRuleForUniquenessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAttachAccessRuleForUniquenessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void IsWarehouseDataSourceInitializedCompletedEventHandler(object sender, IsWarehouseDataSourceInitializedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsWarehouseDataSourceInitializedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsWarehouseDataSourceInitializedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWarehouseDataSourceByNameCompletedEventHandler(object sender, GetWarehouseDataSourceByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWarehouseDataSourceByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWarehouseDataSourceByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseDataSource Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseDataSource)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateDataSourceParamCompletedEventHandler(object sender, CreateDataSourceParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDataSourceParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDataSourceParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataSourceParam Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataSourceParam)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateWarehouseDataSourceParamCompletedEventHandler(object sender, CreateWarehouseDataSourceParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWarehouseDataSourceParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWarehouseDataSourceParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseDataSourceParameter Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseDataSourceParameter)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDataSourceByNameCompletedEventHandler(object sender, GetDataSourceByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSourceByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSourceByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DatasourceStub Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DatasourceStub)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDataSourcesCompletedEventHandler(object sender, GetDataSourcesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSourcesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSourcesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DatasourceListItemDescriptor[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DatasourceListItemDescriptor[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckConnectionCompletedEventHandler(object sender, CheckConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetExternalDataSourceSchemaCompletedEventHandler(object sender, GetExternalDataSourceSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExternalDataSourceSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExternalDataSourceSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStoredProcedureDataSourceSchemaCompletedEventHandler(object sender, GetStoredProcedureDataSourceSchemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStoredProcedureDataSourceSchemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStoredProcedureDataSourceSchemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void TryGetConstraintStringCompletedEventHandler(object sender, TryGetConstraintStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TryGetConstraintStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TryGetConstraintStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDataSourceLinkedStrategyNamesCompletedEventHandler(object sender, GetDataSourceLinkedStrategyNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataSourceLinkedStrategyNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataSourceLinkedStrategyNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDataProvidersListCompletedEventHandler(object sender, GetDataProvidersListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataProvidersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataProvidersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InsertExternalDataSourceCompletedEventHandler(object sender, InsertExternalDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertExternalDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertExternalDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InsertPublisherDataSourceCompletedEventHandler(object sender, InsertPublisherDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertPublisherDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertPublisherDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InsertWarehouseDataSourceCompletedEventHandler(object sender, InsertWarehouseDataSourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertWarehouseDataSourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertWarehouseDataSourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<long> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<long>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteWarehouseDataSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteDataSourceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDictionaryByIdCompletedEventHandler(object sender, GetDictionaryByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDictionaryByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDictionaryByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseDictionary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseDictionary)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetDictionaryValuesConstraintCompletedEventHandler(object sender, GetDictionaryValuesConstraintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDictionaryValuesConstraintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDictionaryValuesConstraintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAccountTypesCompletedEventHandler(object sender, GetAccountTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseAccountType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseAccountType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAccountTypeFieldsCompletedEventHandler(object sender, GetAccountTypeFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountTypeFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountTypeFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseAccountTypeField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseAccountTypeField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAccountTypeHistoricalFieldsCompletedEventHandler(object sender, GetAccountTypeHistoricalFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountTypeHistoricalFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountTypeHistoricalFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseAccountTypeField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseAccountTypeField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCustomerTypesCompletedEventHandler(object sender, GetCustomerTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseCustomerType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseCustomerType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCustomerTypeFieldsCompletedEventHandler(object sender, GetCustomerTypeFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerTypeFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerTypeFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseCustomerTypeField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseCustomerTypeField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCustomerTypeHistoricalFieldsCompletedEventHandler(object sender, GetCustomerTypeHistoricalFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerTypeHistoricalFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerTypeHistoricalFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WarehouseCustomerTypeField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WarehouseCustomerTypeField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEmailAccountsListCompletedEventHandler(object sender, GetEmailAccountsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailAccountsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailAccountsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccountBaseDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccountBaseDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyNamesForEmailAccountCompletedEventHandler(object sender, GetStrategyNamesForEmailAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyNamesForEmailAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyNamesForEmailAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteEmailAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddNewEmailAccountCompletedEventHandler(object sender, AddNewEmailAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewEmailAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewEmailAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EmailAccountsErrorCodes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EmailAccountsErrorCodes)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetEmailAccountsListByNameCompletedEventHandler(object sender, GetEmailAccountsListByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmailAccountsListByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmailAccountsListByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccountBaseDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccountBaseDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetActiveEmailAccountByNameCompletedEventHandler(object sender, GetActiveEmailAccountByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveEmailAccountByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveEmailAccountByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccountBaseDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccountBaseDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckNameCompletedEventHandler(object sender, CheckNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DummyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNodeListCompletedEventHandler(object sender, GetNodeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetNodesSimpleCompletedEventHandler(object sender, GetNodesSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNodesSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNodesSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Node[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Node[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllNodesSimpleCompletedEventHandler(object sender, GetAllNodesSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllNodesSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllNodesSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Node[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Node[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateNodeSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateNodeApplicationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ExecuteSqlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void IsDigitalSignatureRequiredCompletedEventHandler(object sender, IsDigitalSignatureRequiredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDigitalSignatureRequiredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDigitalSignatureRequiredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UploadNodeCompletedEventHandler(object sender, UploadNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UploadNodeSimpleCompletedEventHandler(object sender, UploadNodeSimpleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadNodeSimpleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadNodeSimpleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteNodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckNodeStrategyRelCompletedEventHandler(object sender, CheckNodeStrategyRelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckNodeStrategyRelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckNodeStrategyRelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdatePublicNameCompletedEventHandler(object sender, UpdatePublicNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePublicNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePublicNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicName Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicName)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeletePublishNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateStrategyCompletedEventHandler(object sender, UpdateStrategyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStrategyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStrategyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicStrategy Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicStrategy)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void PublishStrategyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeletePublishRelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetPublishNamesListWithCountCompletedEventHandler(object sender, GetPublishNamesListWithCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublishNamesListWithCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublishNamesListWithCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicName[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicName[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetPublishNamesListCompletedEventHandler(object sender, GetPublishNamesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublishNamesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublishNamesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicName[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicName[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAssignedStrategiesListCompletedEventHandler(object sender, GetAssignedStrategiesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssignedStrategiesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssignedStrategiesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PublicStrategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PublicStrategy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void BeginLockCompletedEventHandler(object sender, BeginLockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeginLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BeginLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckStatusCompletedEventHandler(object sender, CheckStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ReleaseLockCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTreeAttachmentsForNodeCompletedEventHandler(object sender, GetTreeAttachmentsForNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTreeAttachmentsForNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTreeAttachmentsForNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TreeAttachDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TreeAttachDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void BindTemplateToAttachCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void BindTemplatesToAttachmentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UnBindTemplatesToAttachmentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UnBindTemplateFromAttachCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTreeAttachTemplateLinksCompletedEventHandler(object sender, GetTreeAttachTemplateLinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTreeAttachTemplateLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTreeAttachTemplateLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TreeAttachTemplateLinkDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TreeAttachTemplateLinkDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateAttachmentTemplatesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyListCompletedEventHandler(object sender, GetStrategyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExtStrategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtStrategy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyDetailsCompletedEventHandler(object sender, GetStrategyDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExtStrategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExtStrategy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyReferencesCountCompletedEventHandler(object sender, GetStrategyReferencesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyReferencesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyReferencesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StrategyReferencesCount[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StrategyReferencesCount[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteStrategyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void IsSuspendCompletedEventHandler(object sender, IsSuspendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSuspendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSuspendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateStrategySettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateTerminationDateSqlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetPublicNamesForStrategyCompletedEventHandler(object sender, GetPublicNamesForStrategyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPublicNamesForStrategyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPublicNamesForStrategyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAllCalendarsCompletedEventHandler(object sender, GetAllCalendarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCalendarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCalendarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CalendarDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CalendarDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetUserCalendarsCompletedEventHandler(object sender, GetUserCalendarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCalendarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCalendarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CalendarDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CalendarDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetBaseCalendarsCompletedEventHandler(object sender, GetBaseCalendarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseCalendarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaseCalendarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CalendarDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CalendarDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveCalendarCompletedEventHandler(object sender, SaveCalendarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteCalendarCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyCalendarsCompletedEventHandler(object sender, GetStrategyCalendarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyCalendarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyCalendarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CalendarDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CalendarDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetStrategyCalendarsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSpreadSheetsListCompletedEventHandler(object sender, GetSpreadSheetsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpreadSheetsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpreadSheetsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SpreadSheetDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SpreadSheetDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSpreadSheetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckIfSpreadSheetExistsCompletedEventHandler(object sender, CheckIfSpreadSheetExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfSpreadSheetExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfSpreadSheetExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveSpreadSheetCompletedEventHandler(object sender, SaveSpreadSheetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveSpreadSheetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveSpreadSheetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSpreadSheetTemplateCompletedEventHandler(object sender, GetSpreadSheetTemplateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpreadSheetTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpreadSheetTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSpreadSheetLinkedNodeCompletedEventHandler(object sender, GetSpreadSheetLinkedNodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpreadSheetLinkedNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpreadSheetLinkedNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyAreasCompletedEventHandler(object sender, GetStrategyAreasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyAreasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyAreasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StrategyArea[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StrategyArea[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateNewStrategyAreaCompletedEventHandler(object sender, CreateNewStrategyAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewStrategyAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewStrategyAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<long> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<long>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyTasksForAreaCompletedEventHandler(object sender, GetStrategyTasksForAreaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyTasksForAreaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyTasksForAreaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StrategyTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StrategyTask[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreateNewStrategyTaskCompletedEventHandler(object sender, CreateNewStrategyTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewStrategyTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewStrategyTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<long> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<long>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetAreaTaskCountCompletedEventHandler(object sender, GetAreaTaskCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAreaTaskCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAreaTaskCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddStrategyToTaskCompletedEventHandler(object sender, AddStrategyToTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddStrategyToTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddStrategyToTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<long> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<long>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateStrategyTaskCompletedEventHandler(object sender, UpdateStrategyTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateStrategyTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateStrategyTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<long> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<long>)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTaskStrategiesCompletedEventHandler(object sender, GetTaskStrategiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskStrategiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskStrategiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskedStrategy[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskedStrategy[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTaskStrategyCountCompletedEventHandler(object sender, GetTaskStrategyCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskStrategyCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskStrategyCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveStrategyFromTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveTaskFromAreaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RemoveAreaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckAreaNameCompletedEventHandler(object sender, CheckAreaNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAreaNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAreaNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckTaskNameCompletedEventHandler(object sender, CheckTaskNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckTaskNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckTaskNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckStrategyLabelCompletedEventHandler(object sender, CheckStrategyLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckStrategyLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckStrategyLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTaskedStrategyParametersByNameCompletedEventHandler(object sender, GetTaskedStrategyParametersByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskedStrategyParametersByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskedStrategyParametersByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskedStrategyParameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskedStrategyParameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetTaskedStrategyParametersCompletedEventHandler(object sender, GetTaskedStrategyParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskedStrategyParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskedStrategyParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskedStrategyParameter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskedStrategyParameter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetModelsCompletedEventHandler(object sender, GetModelsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ScoringModelDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ScoringModelDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddScoringModelCompletedEventHandler(object sender, AddScoringModelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddScoringModelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddScoringModelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ScoringModelDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ScoringModelDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteScoringModelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateModelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetModelPmmlCompletedEventHandler(object sender, GetModelPmmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetModelPmmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetModelPmmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetStrategyScheduleItemsCompletedEventHandler(object sender, GetStrategyScheduleItemsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStrategyScheduleItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStrategyScheduleItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StrategyScheduleItemDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StrategyScheduleItemDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InsertStrategyScheduleItemCompletedEventHandler(object sender, InsertStrategyScheduleItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertStrategyScheduleItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertStrategyScheduleItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InsertStrategyScheduleItemDtoCompletedEventHandler(object sender, InsertStrategyScheduleItemDtoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertStrategyScheduleItemDtoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertStrategyScheduleItemDtoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateStrategyScheduleItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteStrategyScheduleItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void HasNewerStrategyVersionCompletedEventHandler(object sender, HasNewerStrategyVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasNewerStrategyVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasNewerStrategyVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateToLatestStrategyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetScheduledStrategyParametersByStrategyNameCompletedEventHandler(object sender, GetScheduledStrategyParametersByStrategyNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScheduledStrategyParametersByStrategyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScheduledStrategyParametersByStrategyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaveScheduledStrategyParametersCompletedEventHandler(object sender, SaveScheduledStrategyParametersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveScheduledStrategyParametersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveScheduledStrategyParametersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteScheduledStrategyParametersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void PauseStrategyScheduleItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AppIdCompletedEventHandler(object sender, AppIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AuthServerBaseUrlCompletedEventHandler(object sender, AuthServerBaseUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthServerBaseUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthServerBaseUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
