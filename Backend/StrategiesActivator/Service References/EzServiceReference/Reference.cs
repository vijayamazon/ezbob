//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EzServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionMetaData", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ActionMetaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSynchronousField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EzServiceReference.ActionStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActionID {
            get {
                return this.ActionIDField;
            }
            set {
                if ((this.ActionIDField.Equals(value) != true)) {
                    this.ActionIDField = value;
                    this.RaisePropertyChanged("ActionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSynchronous {
            get {
                return this.IsSynchronousField;
            }
            set {
                if ((this.IsSynchronousField.Equals(value) != true)) {
                    this.IsSynchronousField = value;
                    this.RaisePropertyChanged("IsSynchronous");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EzServiceReference.ActionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionStatus", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    public enum ActionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminated = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Launched = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(EzServiceReference.StringListActionResult))]
    public partial class ActionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EzServiceReference.ActionMetaData MetaDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EzServiceReference.ActionMetaData MetaData {
            get {
                return this.MetaDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetaDataField, value) != true)) {
                    this.MetaDataField = value;
                    this.RaisePropertyChanged("MetaData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringListActionResult : EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RecordsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Records {
            get {
                return this.RecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordsField, value) != true)) {
                    this.RecordsField = value;
                    this.RaisePropertyChanged("Records");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EzServiceReference.IEzServiceAdmin")]
    public interface IEzServiceAdmin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Shutdown", ReplyAction="http://tempuri.org/IEzServiceAdmin/ShutdownResponse")]
        EzServiceReference.ActionMetaData Shutdown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Shutdown", ReplyAction="http://tempuri.org/IEzServiceAdmin/ShutdownResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> ShutdownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Nop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NopResponse")]
        EzServiceReference.ActionMetaData Nop(int nLengthInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Nop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NopResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> NopAsync(int nLengthInSeconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Terminate", ReplyAction="http://tempuri.org/IEzServiceAdmin/TerminateResponse")]
        EzServiceReference.ActionMetaData Terminate(System.Guid sActionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Terminate", ReplyAction="http://tempuri.org/IEzServiceAdmin/TerminateResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> TerminateAsync(System.Guid sActionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/ListActiveActions", ReplyAction="http://tempuri.org/IEzServiceAdmin/ListActiveActionsResponse")]
        EzServiceReference.StringListActionResult ListActiveActions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/ListActiveActions", ReplyAction="http://tempuri.org/IEzServiceAdmin/ListActiveActionsResponse")]
        System.Threading.Tasks.Task<EzServiceReference.StringListActionResult> ListActiveActionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/WriteToLog", ReplyAction="http://tempuri.org/IEzServiceAdmin/WriteToLogResponse")]
        EzServiceReference.ActionMetaData WriteToLog(string sSeverity, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/WriteToLog", ReplyAction="http://tempuri.org/IEzServiceAdmin/WriteToLogResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> WriteToLogAsync(string sSeverity, string sMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEzServiceAdminChannel : EzServiceReference.IEzServiceAdmin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EzServiceAdminClient : System.ServiceModel.ClientBase<EzServiceReference.IEzServiceAdmin>, EzServiceReference.IEzServiceAdmin {
        
        public EzServiceAdminClient() {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceAdminClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EzServiceReference.ActionMetaData Shutdown() {
            return base.Channel.Shutdown();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> ShutdownAsync() {
            return base.Channel.ShutdownAsync();
        }
        
        public EzServiceReference.ActionMetaData Nop(int nLengthInSeconds) {
            return base.Channel.Nop(nLengthInSeconds);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> NopAsync(int nLengthInSeconds) {
            return base.Channel.NopAsync(nLengthInSeconds);
        }
        
        public EzServiceReference.ActionMetaData Terminate(System.Guid sActionID) {
            return base.Channel.Terminate(sActionID);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> TerminateAsync(System.Guid sActionID) {
            return base.Channel.TerminateAsync(sActionID);
        }
        
        public EzServiceReference.StringListActionResult ListActiveActions() {
            return base.Channel.ListActiveActions();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.StringListActionResult> ListActiveActionsAsync() {
            return base.Channel.ListActiveActionsAsync();
        }
        
        public EzServiceReference.ActionMetaData WriteToLog(string sSeverity, string sMsg) {
            return base.Channel.WriteToLog(sSeverity, sMsg);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> WriteToLogAsync(string sSeverity, string sMsg) {
            return base.Channel.WriteToLogAsync(sSeverity, sMsg);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EzServiceReference.IEzService")]
    public interface IEzService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GreetingMailStrategy", ReplyAction="http://tempuri.org/IEzService/GreetingMailStrategyResponse")]
        EzServiceReference.ActionMetaData GreetingMailStrategy(int nCustomerID, string sConfirmationEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GreetingMailStrategy", ReplyAction="http://tempuri.org/IEzService/GreetingMailStrategyResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> GreetingMailStrategyAsync(int nCustomerID, string sConfirmationEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerMarketplaceAdded", ReplyAction="http://tempuri.org/IEzService/CustomerMarketplaceAddedResponse")]
        EzServiceReference.ActionMetaData CustomerMarketplaceAdded(int nCustomerID, int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerMarketplaceAdded", ReplyAction="http://tempuri.org/IEzService/CustomerMarketplaceAddedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CustomerMarketplaceAddedAsync(int nCustomerID, int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ApprovedUser", ReplyAction="http://tempuri.org/IEzService/ApprovedUserResponse")]
        EzServiceReference.ActionMetaData ApprovedUser(int customerId, decimal loanAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ApprovedUser", ReplyAction="http://tempuri.org/IEzService/ApprovedUserResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> ApprovedUserAsync(int customerId, decimal loanAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CashTransferred", ReplyAction="http://tempuri.org/IEzService/CashTransferredResponse")]
        EzServiceReference.ActionMetaData CashTransferred(int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CashTransferred", ReplyAction="http://tempuri.org/IEzService/CashTransferredResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CashTransferredAsync(int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailUnderReview", ReplyAction="http://tempuri.org/IEzService/EmailUnderReviewResponse")]
        EzServiceReference.ActionMetaData EmailUnderReview(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailUnderReview", ReplyAction="http://tempuri.org/IEzService/EmailUnderReviewResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> EmailUnderReviewAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Escalated", ReplyAction="http://tempuri.org/IEzService/EscalatedResponse")]
        EzServiceReference.ActionMetaData Escalated(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Escalated", ReplyAction="http://tempuri.org/IEzService/EscalatedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> EscalatedAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCashFailed", ReplyAction="http://tempuri.org/IEzService/GetCashFailedResponse")]
        EzServiceReference.ActionMetaData GetCashFailed(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCashFailed", ReplyAction="http://tempuri.org/IEzService/GetCashFailedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> GetCashFailedAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanFullyPaid", ReplyAction="http://tempuri.org/IEzService/LoanFullyPaidResponse")]
        EzServiceReference.ActionMetaData LoanFullyPaid(int customerId, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanFullyPaid", ReplyAction="http://tempuri.org/IEzService/LoanFullyPaidResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> LoanFullyPaidAsync(int customerId, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlAndBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlAndBwaInformationResponse")]
        EzServiceReference.ActionMetaData MoreAmlAndBwaInformation(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlAndBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlAndBwaInformationResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MoreAmlAndBwaInformationAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlInformationResponse")]
        EzServiceReference.ActionMetaData MoreAmlInformation(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlInformationResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MoreAmlInformationAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreBwaInformationResponse")]
        EzServiceReference.ActionMetaData MoreBwaInformation(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreBwaInformationResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MoreBwaInformationAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordChanged", ReplyAction="http://tempuri.org/IEzService/PasswordChangedResponse")]
        EzServiceReference.ActionMetaData PasswordChanged(int customerId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordChanged", ReplyAction="http://tempuri.org/IEzService/PasswordChangedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PasswordChangedAsync(int customerId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordRestored", ReplyAction="http://tempuri.org/IEzService/PasswordRestoredResponse")]
        EzServiceReference.ActionMetaData PasswordRestored(int customerId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordRestored", ReplyAction="http://tempuri.org/IEzService/PasswordRestoredResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PasswordRestoredAsync(int customerId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayEarly", ReplyAction="http://tempuri.org/IEzService/PayEarlyResponse")]
        EzServiceReference.ActionMetaData PayEarly(int customerId, decimal amount, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayEarly", ReplyAction="http://tempuri.org/IEzService/PayEarlyResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayEarlyAsync(int customerId, decimal amount, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedByUnderwriter", ReplyAction="http://tempuri.org/IEzService/PayPointAddedByUnderwriterResponse")]
        EzServiceReference.ActionMetaData PayPointAddedByUnderwriter(int customerId, string cardno, string underwriterName, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedByUnderwriter", ReplyAction="http://tempuri.org/IEzService/PayPointAddedByUnderwriterResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayPointAddedByUnderwriterAsync(int customerId, string cardno, string underwriterName, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointNameValidationFailed", ReplyAction="http://tempuri.org/IEzService/PayPointNameValidationFailedResponse")]
        EzServiceReference.ActionMetaData PayPointNameValidationFailed(int customerId, string cardHolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointNameValidationFailed", ReplyAction="http://tempuri.org/IEzService/PayPointNameValidationFailedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayPointNameValidationFailedAsync(int customerId, string cardHolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RejectUser", ReplyAction="http://tempuri.org/IEzService/RejectUserResponse")]
        EzServiceReference.ActionMetaData RejectUser(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RejectUser", ReplyAction="http://tempuri.org/IEzService/RejectUserResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> RejectUserAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailRolloverAdded", ReplyAction="http://tempuri.org/IEzService/EmailRolloverAddedResponse")]
        EzServiceReference.ActionMetaData EmailRolloverAdded(int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailRolloverAdded", ReplyAction="http://tempuri.org/IEzService/EmailRolloverAddedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> EmailRolloverAddedAsync(int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RenewEbayToken", ReplyAction="http://tempuri.org/IEzService/RenewEbayTokenResponse")]
        EzServiceReference.ActionMetaData RenewEbayToken(int customerId, string marketplaceName, string eBayAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RenewEbayToken", ReplyAction="http://tempuri.org/IEzService/RenewEbayTokenResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> RenewEbayTokenAsync(int customerId, string marketplaceName, string eBayAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequestCashWithoutTakenLoan", ReplyAction="http://tempuri.org/IEzService/RequestCashWithoutTakenLoanResponse")]
        EzServiceReference.ActionMetaData RequestCashWithoutTakenLoan(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequestCashWithoutTakenLoan", ReplyAction="http://tempuri.org/IEzService/RequestCashWithoutTakenLoanResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> RequestCashWithoutTakenLoanAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendEmailVerification", ReplyAction="http://tempuri.org/IEzService/SendEmailVerificationResponse")]
        EzServiceReference.ActionMetaData SendEmailVerification(int customerId, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendEmailVerification", ReplyAction="http://tempuri.org/IEzService/SendEmailVerificationResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> SendEmailVerificationAsync(int customerId, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ThreeInvalidAttempts", ReplyAction="http://tempuri.org/IEzService/ThreeInvalidAttemptsResponse")]
        EzServiceReference.ActionMetaData ThreeInvalidAttempts(int customerId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ThreeInvalidAttempts", ReplyAction="http://tempuri.org/IEzService/ThreeInvalidAttemptsResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> ThreeInvalidAttemptsAsync(int customerId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TransferCashFailed", ReplyAction="http://tempuri.org/IEzService/TransferCashFailedResponse")]
        EzServiceReference.ActionMetaData TransferCashFailed(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TransferCashFailed", ReplyAction="http://tempuri.org/IEzService/TransferCashFailedResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> TransferCashFailedAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisGenerate", ReplyAction="http://tempuri.org/IEzService/CaisGenerateResponse")]
        EzServiceReference.ActionMetaData CaisGenerate(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisGenerate", ReplyAction="http://tempuri.org/IEzService/CaisGenerateResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CaisGenerateAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisUpdate", ReplyAction="http://tempuri.org/IEzService/CaisUpdateResponse")]
        EzServiceReference.ActionMetaData CaisUpdate(int caisId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisUpdate", ReplyAction="http://tempuri.org/IEzService/CaisUpdateResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CaisUpdateAsync(int caisId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FirstOfMonthStatusNotifier", ReplyAction="http://tempuri.org/IEzService/FirstOfMonthStatusNotifierResponse")]
        EzServiceReference.ActionMetaData FirstOfMonthStatusNotifier();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FirstOfMonthStatusNotifier", ReplyAction="http://tempuri.org/IEzService/FirstOfMonthStatusNotifierResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> FirstOfMonthStatusNotifierAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FraudChecker", ReplyAction="http://tempuri.org/IEzService/FraudCheckerResponse")]
        EzServiceReference.ActionMetaData FraudChecker(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FraudChecker", ReplyAction="http://tempuri.org/IEzService/FraudCheckerResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> FraudCheckerAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LateBy14Days", ReplyAction="http://tempuri.org/IEzService/LateBy14DaysResponse")]
        EzServiceReference.ActionMetaData LateBy14Days();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LateBy14Days", ReplyAction="http://tempuri.org/IEzService/LateBy14DaysResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> LateBy14DaysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointCharger", ReplyAction="http://tempuri.org/IEzService/PayPointChargerResponse")]
        EzServiceReference.ActionMetaData PayPointCharger();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointCharger", ReplyAction="http://tempuri.org/IEzService/PayPointChargerResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayPointChargerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetLateLoanStatus", ReplyAction="http://tempuri.org/IEzService/SetLateLoanStatusResponse")]
        EzServiceReference.ActionMetaData SetLateLoanStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetLateLoanStatus", ReplyAction="http://tempuri.org/IEzService/SetLateLoanStatusResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> SetLateLoanStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateMarketplace", ReplyAction="http://tempuri.org/IEzService/UpdateMarketplaceResponse")]
        EzServiceReference.ActionMetaData UpdateMarketplace(int customerId, int marketplaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateMarketplace", ReplyAction="http://tempuri.org/IEzService/UpdateMarketplaceResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> UpdateMarketplaceAsync(int customerId, int marketplaceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateAllMarketplaces", ReplyAction="http://tempuri.org/IEzService/UpdateAllMarketplacesResponse")]
        EzServiceReference.ActionMetaData UpdateAllMarketplaces(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateAllMarketplaces", ReplyAction="http://tempuri.org/IEzService/UpdateAllMarketplacesResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> UpdateAllMarketplacesAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateTransactionStatus", ReplyAction="http://tempuri.org/IEzService/UpdateTransactionStatusResponse")]
        EzServiceReference.ActionMetaData UpdateTransactionStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateTransactionStatus", ReplyAction="http://tempuri.org/IEzService/UpdateTransactionStatusResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> UpdateTransactionStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/XDaysDue", ReplyAction="http://tempuri.org/IEzService/XDaysDueResponse")]
        EzServiceReference.ActionMetaData XDaysDue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/XDaysDue", ReplyAction="http://tempuri.org/IEzService/XDaysDueResponse")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> XDaysDueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy1", ReplyAction="http://tempuri.org/IEzService/MainStrategy1Response")]
        EzServiceReference.ActionMetaData MainStrategy1(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy1", ReplyAction="http://tempuri.org/IEzService/MainStrategy1Response")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MainStrategy1Async(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy2", ReplyAction="http://tempuri.org/IEzService/MainStrategy2Response")]
        EzServiceReference.ActionMetaData MainStrategy2(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison, bool isUnderwriterForced);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy2", ReplyAction="http://tempuri.org/IEzService/MainStrategy2Response")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MainStrategy2Async(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison, bool isUnderwriterForced);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy3", ReplyAction="http://tempuri.org/IEzService/MainStrategy3Response")]
        EzServiceReference.ActionMetaData MainStrategy3(int customerId, int checkType, string houseNumber, string houseName, string street, string district, string town, string county, string postcode, string bankAccount, string sortCode, int avoidAutoDescison);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy3", ReplyAction="http://tempuri.org/IEzService/MainStrategy3Response")]
        System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MainStrategy3Async(int customerId, int checkType, string houseNumber, string houseName, string street, string district, string town, string county, string postcode, string bankAccount, string sortCode, int avoidAutoDescison);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEzServiceChannel : EzServiceReference.IEzService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EzServiceClient : System.ServiceModel.ClientBase<EzServiceReference.IEzService>, EzServiceReference.IEzService {
        
        public EzServiceClient() {
        }
        
        public EzServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EzServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EzServiceReference.ActionMetaData GreetingMailStrategy(int nCustomerID, string sConfirmationEmail) {
            return base.Channel.GreetingMailStrategy(nCustomerID, sConfirmationEmail);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> GreetingMailStrategyAsync(int nCustomerID, string sConfirmationEmail) {
            return base.Channel.GreetingMailStrategyAsync(nCustomerID, sConfirmationEmail);
        }
        
        public EzServiceReference.ActionMetaData CustomerMarketplaceAdded(int nCustomerID, int nMarketplaceID) {
            return base.Channel.CustomerMarketplaceAdded(nCustomerID, nMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CustomerMarketplaceAddedAsync(int nCustomerID, int nMarketplaceID) {
            return base.Channel.CustomerMarketplaceAddedAsync(nCustomerID, nMarketplaceID);
        }
        
        public EzServiceReference.ActionMetaData ApprovedUser(int customerId, decimal loanAmount) {
            return base.Channel.ApprovedUser(customerId, loanAmount);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> ApprovedUserAsync(int customerId, decimal loanAmount) {
            return base.Channel.ApprovedUserAsync(customerId, loanAmount);
        }
        
        public EzServiceReference.ActionMetaData CashTransferred(int customerId, decimal amount) {
            return base.Channel.CashTransferred(customerId, amount);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CashTransferredAsync(int customerId, decimal amount) {
            return base.Channel.CashTransferredAsync(customerId, amount);
        }
        
        public EzServiceReference.ActionMetaData EmailUnderReview(int customerId) {
            return base.Channel.EmailUnderReview(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> EmailUnderReviewAsync(int customerId) {
            return base.Channel.EmailUnderReviewAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData Escalated(int customerId) {
            return base.Channel.Escalated(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> EscalatedAsync(int customerId) {
            return base.Channel.EscalatedAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData GetCashFailed(int customerId) {
            return base.Channel.GetCashFailed(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> GetCashFailedAsync(int customerId) {
            return base.Channel.GetCashFailedAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData LoanFullyPaid(int customerId, string loanRefNum) {
            return base.Channel.LoanFullyPaid(customerId, loanRefNum);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> LoanFullyPaidAsync(int customerId, string loanRefNum) {
            return base.Channel.LoanFullyPaidAsync(customerId, loanRefNum);
        }
        
        public EzServiceReference.ActionMetaData MoreAmlAndBwaInformation(int customerId) {
            return base.Channel.MoreAmlAndBwaInformation(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MoreAmlAndBwaInformationAsync(int customerId) {
            return base.Channel.MoreAmlAndBwaInformationAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData MoreAmlInformation(int customerId) {
            return base.Channel.MoreAmlInformation(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MoreAmlInformationAsync(int customerId) {
            return base.Channel.MoreAmlInformationAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData MoreBwaInformation(int customerId) {
            return base.Channel.MoreBwaInformation(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MoreBwaInformationAsync(int customerId) {
            return base.Channel.MoreBwaInformationAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData PasswordChanged(int customerId, string password) {
            return base.Channel.PasswordChanged(customerId, password);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PasswordChangedAsync(int customerId, string password) {
            return base.Channel.PasswordChangedAsync(customerId, password);
        }
        
        public EzServiceReference.ActionMetaData PasswordRestored(int customerId, string password) {
            return base.Channel.PasswordRestored(customerId, password);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PasswordRestoredAsync(int customerId, string password) {
            return base.Channel.PasswordRestoredAsync(customerId, password);
        }
        
        public EzServiceReference.ActionMetaData PayEarly(int customerId, decimal amount, string loanRefNum) {
            return base.Channel.PayEarly(customerId, amount, loanRefNum);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayEarlyAsync(int customerId, decimal amount, string loanRefNum) {
            return base.Channel.PayEarlyAsync(customerId, amount, loanRefNum);
        }
        
        public EzServiceReference.ActionMetaData PayPointAddedByUnderwriter(int customerId, string cardno, string underwriterName, int underwriterId) {
            return base.Channel.PayPointAddedByUnderwriter(customerId, cardno, underwriterName, underwriterId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayPointAddedByUnderwriterAsync(int customerId, string cardno, string underwriterName, int underwriterId) {
            return base.Channel.PayPointAddedByUnderwriterAsync(customerId, cardno, underwriterName, underwriterId);
        }
        
        public EzServiceReference.ActionMetaData PayPointNameValidationFailed(int customerId, string cardHolderName) {
            return base.Channel.PayPointNameValidationFailed(customerId, cardHolderName);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayPointNameValidationFailedAsync(int customerId, string cardHolderName) {
            return base.Channel.PayPointNameValidationFailedAsync(customerId, cardHolderName);
        }
        
        public EzServiceReference.ActionMetaData RejectUser(int customerId) {
            return base.Channel.RejectUser(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> RejectUserAsync(int customerId) {
            return base.Channel.RejectUserAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData EmailRolloverAdded(int customerId, decimal amount) {
            return base.Channel.EmailRolloverAdded(customerId, amount);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> EmailRolloverAddedAsync(int customerId, decimal amount) {
            return base.Channel.EmailRolloverAddedAsync(customerId, amount);
        }
        
        public EzServiceReference.ActionMetaData RenewEbayToken(int customerId, string marketplaceName, string eBayAddress) {
            return base.Channel.RenewEbayToken(customerId, marketplaceName, eBayAddress);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> RenewEbayTokenAsync(int customerId, string marketplaceName, string eBayAddress) {
            return base.Channel.RenewEbayTokenAsync(customerId, marketplaceName, eBayAddress);
        }
        
        public EzServiceReference.ActionMetaData RequestCashWithoutTakenLoan(int customerId) {
            return base.Channel.RequestCashWithoutTakenLoan(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> RequestCashWithoutTakenLoanAsync(int customerId) {
            return base.Channel.RequestCashWithoutTakenLoanAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData SendEmailVerification(int customerId, string address) {
            return base.Channel.SendEmailVerification(customerId, address);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> SendEmailVerificationAsync(int customerId, string address) {
            return base.Channel.SendEmailVerificationAsync(customerId, address);
        }
        
        public EzServiceReference.ActionMetaData ThreeInvalidAttempts(int customerId, string password) {
            return base.Channel.ThreeInvalidAttempts(customerId, password);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> ThreeInvalidAttemptsAsync(int customerId, string password) {
            return base.Channel.ThreeInvalidAttemptsAsync(customerId, password);
        }
        
        public EzServiceReference.ActionMetaData TransferCashFailed(int customerId) {
            return base.Channel.TransferCashFailed(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> TransferCashFailedAsync(int customerId) {
            return base.Channel.TransferCashFailedAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData CaisGenerate(int underwriterId) {
            return base.Channel.CaisGenerate(underwriterId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CaisGenerateAsync(int underwriterId) {
            return base.Channel.CaisGenerateAsync(underwriterId);
        }
        
        public EzServiceReference.ActionMetaData CaisUpdate(int caisId) {
            return base.Channel.CaisUpdate(caisId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> CaisUpdateAsync(int caisId) {
            return base.Channel.CaisUpdateAsync(caisId);
        }
        
        public EzServiceReference.ActionMetaData FirstOfMonthStatusNotifier() {
            return base.Channel.FirstOfMonthStatusNotifier();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> FirstOfMonthStatusNotifierAsync() {
            return base.Channel.FirstOfMonthStatusNotifierAsync();
        }
        
        public EzServiceReference.ActionMetaData FraudChecker(int customerId) {
            return base.Channel.FraudChecker(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> FraudCheckerAsync(int customerId) {
            return base.Channel.FraudCheckerAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData LateBy14Days() {
            return base.Channel.LateBy14Days();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> LateBy14DaysAsync() {
            return base.Channel.LateBy14DaysAsync();
        }
        
        public EzServiceReference.ActionMetaData PayPointCharger() {
            return base.Channel.PayPointCharger();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> PayPointChargerAsync() {
            return base.Channel.PayPointChargerAsync();
        }
        
        public EzServiceReference.ActionMetaData SetLateLoanStatus() {
            return base.Channel.SetLateLoanStatus();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> SetLateLoanStatusAsync() {
            return base.Channel.SetLateLoanStatusAsync();
        }
        
        public EzServiceReference.ActionMetaData UpdateMarketplace(int customerId, int marketplaceId) {
            return base.Channel.UpdateMarketplace(customerId, marketplaceId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> UpdateMarketplaceAsync(int customerId, int marketplaceId) {
            return base.Channel.UpdateMarketplaceAsync(customerId, marketplaceId);
        }
        
        public EzServiceReference.ActionMetaData UpdateAllMarketplaces(int customerId) {
            return base.Channel.UpdateAllMarketplaces(customerId);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> UpdateAllMarketplacesAsync(int customerId) {
            return base.Channel.UpdateAllMarketplacesAsync(customerId);
        }
        
        public EzServiceReference.ActionMetaData UpdateTransactionStatus() {
            return base.Channel.UpdateTransactionStatus();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> UpdateTransactionStatusAsync() {
            return base.Channel.UpdateTransactionStatusAsync();
        }
        
        public EzServiceReference.ActionMetaData XDaysDue() {
            return base.Channel.XDaysDue();
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> XDaysDueAsync() {
            return base.Channel.XDaysDueAsync();
        }
        
        public EzServiceReference.ActionMetaData MainStrategy1(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison) {
            return base.Channel.MainStrategy1(customerId, newCreditLine, avoidAutoDescison);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MainStrategy1Async(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison) {
            return base.Channel.MainStrategy1Async(customerId, newCreditLine, avoidAutoDescison);
        }
        
        public EzServiceReference.ActionMetaData MainStrategy2(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison, bool isUnderwriterForced) {
            return base.Channel.MainStrategy2(customerId, newCreditLine, avoidAutoDescison, isUnderwriterForced);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MainStrategy2Async(int customerId, EzBob.Backend.Strategies.NewCreditLineOption newCreditLine, int avoidAutoDescison, bool isUnderwriterForced) {
            return base.Channel.MainStrategy2Async(customerId, newCreditLine, avoidAutoDescison, isUnderwriterForced);
        }
        
        public EzServiceReference.ActionMetaData MainStrategy3(int customerId, int checkType, string houseNumber, string houseName, string street, string district, string town, string county, string postcode, string bankAccount, string sortCode, int avoidAutoDescison) {
            return base.Channel.MainStrategy3(customerId, checkType, houseNumber, houseName, street, district, town, county, postcode, bankAccount, sortCode, avoidAutoDescison);
        }
        
        public System.Threading.Tasks.Task<EzServiceReference.ActionMetaData> MainStrategy3Async(int customerId, int checkType, string houseNumber, string houseName, string street, string district, string town, string county, string postcode, string bankAccount, string sortCode, int avoidAutoDescison) {
            return base.Channel.MainStrategy3Async(customerId, checkType, houseNumber, houseName, street, district, town, county, postcode, bankAccount, sortCode, avoidAutoDescison);
        }
    }
}
