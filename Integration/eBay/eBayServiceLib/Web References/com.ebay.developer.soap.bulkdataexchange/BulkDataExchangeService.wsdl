<?xml version="1.0" encoding="utf-8"?>
<wsdl:definitions xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:tns="http://www.ebay.com/marketplace/services" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:ns0="http://www.ebay.com/marketplace/services" xmlns="http://schemas.xmlsoap.org/wsdl/" name="BulkDataExchangeService" targetNamespace="http://www.ebay.com/marketplace/services" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xs:schema xmlns:tns="http://www.ebay.com/marketplace/services" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.ebay.com/marketplace/services">
      <xs:element name="createUploadJobRequest" nillable="true" type="ns0:CreateUploadJobRequest" />
      <xs:element name="createUploadJobResponse" nillable="true" type="ns0:CreateUploadJobResponse" />
      <xs:element name="startUploadJobRequest" nillable="true" type="ns0:StartUploadJobRequest" />
      <xs:element name="startUploadJobResponse" nillable="true" type="ns0:StartUploadJobResponse" />
      <xs:element name="abortJobRequest" nillable="true" type="ns0:AbortJobRequest" />
      <xs:element name="abortJobResponse" nillable="true" type="ns0:AbortJobResponse" />
      <xs:element name="getJobsRequest" nillable="true" type="ns0:GetJobsRequest" />
      <xs:element name="getJobsResponse" nillable="true" type="ns0:GetJobsResponse" />
      <xs:element name="getJobStatusRequest" nillable="true" type="ns0:GetJobStatusRequest" />
      <xs:element name="getJobStatusResponse" nillable="true" type="ns0:GetJobStatusResponse" />
      <xs:element name="startDownloadJobRequest" nillable="true" type="ns0:StartDownloadJobRequest" />
      <xs:element name="startDownloadJobResponse" nillable="true" type="ns0:StartDownloadJobResponse" />
      <xs:element name="createRecurringJobRequest" nillable="true" type="ns0:CreateRecurringJobRequest" />
      <xs:element name="createRecurringJobResponse" nillable="true" type="ns0:CreateRecurringJobResponse" />
      <xs:element name="deleteRecurringJobRequest" nillable="true" type="ns0:DeleteRecurringJobRequest" />
      <xs:element name="deleteRecurringJobResponse" nillable="true" type="ns0:DeleteRecurringJobResponse" />
      <xs:element name="getRecurringJobsRequest" nillable="true" type="ns0:GetRecurringJobsRequest" />
      <xs:element name="getRecurringJobsResponse" nillable="true" type="ns0:GetRecurringJobsResponse" />
      <xs:element name="getRecurringJobExecutionStatusRequest" nillable="true" type="ns0:GetRecurringJobExecutionStatusRequest" />
      <xs:element name="getRecurringJobExecutionStatusResponse" nillable="true" type="ns0:GetRecurringJobExecutionStatusResponse" />
      <xs:element name="getRecurringJobExecutionHistoryRequest" nillable="true" type="ns0:GetRecurringJobExecutionHistoryRequest" />
      <xs:element name="getRecurringJobExecutionHistoryResponse" nillable="true" type="ns0:GetRecurringJobExecutionHistoryResponse" />
      <xs:element name="activateRecurringJobRequest" nillable="true" type="ns0:ActivateRecurringJobRequest" />
      <xs:element name="activateRecurringJobResponse" nillable="true" type="ns0:ActivateRecurringJobResponse" />
      <xs:element name="suspendRecurringJobRequest" nillable="true" type="ns0:SuspendRecurringJobRequest" />
      <xs:element name="suspendRecurringJobResponse" nillable="true" type="ns0:SuspendRecurringJobResponse" />
      <xs:element name="abortRecurringJobExecutionRequest" nillable="true" type="ns0:AbortRecurringJobExecutionRequest" />
      <xs:element name="abortRecurringJobExecutionResponse" nillable="true" type="ns0:AbortRecurringJobExecutionResponse" />
      <xs:complexType name="CreateUploadJobRequest">
        <xs:annotation>
          <xs:documentation>
			Creates a Bulk Data Exchange Job and assigns it a job id and a file reference id. You need to add
			these ids to all Bulk Data Exchange calls that are related to your job, such as getJobStatusRequest.
			You will also need to add this information to File Transfer Service requests
			for this job.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
			Creates a Bulk Data Exchange Job and assigns it a job id and a file reference id.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="uploadJobType" type="xs:token">
                <xs:annotation>
                  <xs:documentation>
							Specifies the Merchant Data API request used in a Bulk Data
							Exchange upload job. Each Bulk Data Exchange job can only have one jobType
							(Merchant Data API request) per job. For instance,
							if you are uploading a data file, it can not have AddFixedPriceItem
							requests and ReviseFixedPriceItem requests within the same upload file.
							&lt;br&gt;&lt;br&gt;
							For each of the request job types, Merchant Data requests with the same
							name are included within a data file and uploaded. For instance, if you
							create an AddFixedPriceItem job, then the file you are going to upload
							must contain AddFixedPriceItem requests - one request for each item,
							listing, or acknowledgement in your data file.
							&lt;br&gt;&lt;br&gt;
							The following value definitions describe the request or response
							associated with each job type.
							&lt;br&gt;&lt;br&gt;
							For more information about creating and uploading Merchant Data files, see
							the Large Merchant Services User Guide.
							&lt;br&gt;&lt;br&gt;
							&lt;dl&gt;
							&lt;lh&gt;Applicable values:&lt;br&gt;&lt;/lh&gt;

							&lt;dt&gt;AddFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Defines a single new fixed price item and lists it on a
							specified eBay site.
							&lt;/dd&gt;

							&lt;dt&gt;AddItem&lt;/dt&gt;
							&lt;dd&gt;Defines a single new item and lists it on a specified eBay site.
							&lt;/dd&gt;

							&lt;dt&gt;EndFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Ends the specified item listing before the date and time at
							which it would normally end (per the listing duration).
							&lt;/dd&gt;

						&lt;dt&gt;EndItem&lt;/dt&gt;
							&lt;dd&gt;Ends the specified item listing before the date and time at
							which it would normally end (per the listing duration).
							&lt;/dd&gt;

							&lt;dt&gt;OrderAck&lt;/dt&gt;
							&lt;dd&gt;Request that acknowledges that an order has been received. Use
							the OrderAck request to acknowledge each line item in a SoldReport by
							order ID or line item ID.
							&lt;br&gt;&lt;br&gt;
							After you send the first OrderAck call, future SoldReports will only
							contain unacknowledged orders or line items.
							&lt;/dd&gt;

							&lt;dt&gt;RelistFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to take a single item (or a single multi-item
							listing) that ended without bidders or buyers and re-list it on a
							specified eBay site.
							&lt;br&gt;&lt;br&gt;
							A listing may be re-listed with the same item
							properties as the original or the seller may change a number of the
							item's defining properties at re-listing time. The new listing will
							have a different item ID than the original one.
							&lt;/dd&gt;

							&lt;dt&gt;RelistItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to take a single item (or a single multi-item 
							listing) and re-list it on a specified eBay site.
							&lt;/dd&gt;

							&lt;dt&gt;ReviseFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to change the properties of a currently
							active listing.
							&lt;br&gt;&lt;br&gt;
							If the listing contains multiple items, you can revise most of the fields
							in the listing (except Title, currency, product ID, photo display type,
							variation details, duration, format, or eBay Giving Works charity), even
							after one of the items in the listing has been purchased. To revise
							multiple listings, include a ReviseFixedPriceItemRequest once for each
							item or listing in your data file, with new information for each item or
							listing.
							&lt;/dd&gt;

							&lt;dt&gt;ReviseInventoryStatus&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to change the price and quantity of a currently
							active fixed-price listing. Inputs are the item IDs or SKUs of the
							listings being revised, and price and quantity that are being changed for
							each revision.
							&lt;br&gt;&lt;br&gt;
							You can use SKU as input only for fixed-price listings that are managed by
							SKU (i.e., InventoryTrackingMethod is set to SKU). ItemID can be used in
							either case.
							&lt;/dd&gt;

							&lt;dt&gt;ReviseItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to change the properties of a currently active
							listing.
							&lt;/dd&gt;

							&lt;dt&gt;SetShipmentTrackingInfo&lt;/dt&gt;
							&lt;dd&gt;Includes information about a specific item and the shipping
							information associated with it.
							&lt;/dd&gt;

							&lt;dt&gt;UploadSiteHostedPictures&lt;/dt&gt;
							&lt;dd&gt;Uploads a picture to EPS (eBay Picture Services) when you supply
							a URL in the ExternalPictureURL field (the location of the picture on an
							external web server). Unlike what the call name implies, you can only
							upload one picture per request.
							&lt;/dd&gt;

							&lt;dt&gt;VerifyAddFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Acknowledges that the data for a single new fixed price item
							matches the schema and can be added without data errors.
							&lt;/dd&gt;

							&lt;dt&gt;VerifyAddItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to specify the definition of a new item and
							submit the definition to eBay without creating a listing.
							&lt;/dd&gt;
						&lt;/dl&gt;
						</xs:documentation>
                  <xs:appinfo>
                    <ListBasedOn />
                    <CallInfo>
                      <CallName>createUploadJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="UUID" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							A Universally Unique Identifier (UUID) provided by the seller's 
							application.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createUploadJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="fileType" type="ns0:FileType">
                <xs:annotation>
                  <xs:documentation>
							Specifies the upload job type. Only XML is currently allowed.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createUploadJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="StartUploadJobRequest">
        <xs:annotation>
          <xs:documentation>
		Begins processing the data in the uploaded file. For example, if the data
		file contains data for the AddFixedPriceItem request, the Bulk Data Exchange web service
		reads and sends this item data from the uploaded file to the eBay Trading platform.
		(Adds the Fixed Price Items to the eBay web site.)
		</xs:documentation>
          <xs:appinfo>
            <Summary>
			Begins processing the data in the uploaded file.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="jobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							upload job. Use the &lt;b class="con"&gt;jobId&lt;/b&gt; value returned in 
							the &lt;b class="con"&gt;createUploadJob&lt;/b&gt; response. You can also 
							use &lt;b class="con"&gt;getJobs&lt;/b&gt; to retrieve job IDs for any 
							upload jobs you have created. 
							&lt;br&gt;&lt;br&gt;
							Before you can start an upload job, you must upload the corresponding data
							file, using the File Transfer API. In the File Transfer API, &lt;b 
							class="con"&gt;jobId&lt;/b&gt; maps to &lt;b 
							class="con"&gt;taskReferenceId&lt;/b&gt; in the &lt;b 
							class="con"&gt;uploadFile&lt;/b&gt; call.
							&lt;br&gt;&lt;br&gt;
							Once you start your upload job, use &lt;b 
							class="con"&gt;getJobStatus&lt;/b&gt; to monitor processing progress.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>startUploadJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="AbortJobRequest">
        <xs:annotation>
          <xs:documentation>
			Stops (aborts) processing the uploaded file or processing the report file
			(to be downloaded). When your application makes this call, the
			processing will stop, but it may not stop immediately. (Much like when you
			abort a job from your printer queue.)
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Stops (aborts) processing the uploaded file.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="jobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							upload or download job. Use the &lt;b class="con"&gt;jobId&lt;/b&gt; value
							returned in the &lt;b class="con"&gt;createUploadJob&lt;/b&gt; response or
							the &lt;b class="con"&gt;startDownloadJob&lt;/b&gt; response. You can also
							use &lt;b class="con"&gt;getJobs&lt;/b&gt; to retrieve job IDs for any of
							your upload or download jobs.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>abortJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetJobsRequest">
        <xs:annotation>
          <xs:documentation>
			Lists all jobs that have been submitted with this Seller ID that have the job type
			specified in the request. You can enter a request with no job type field to see the
			status of all of your jobs, you can put a few job type fields in your request to
			see the status for specific job types, or you can put a single job type field in
			your request.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Lists Bulk Data Exchange jobs for this Seller ID.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element minOccurs="0" name="creationTimeFrom" type="xs:dateTime">
                <xs:annotation>
                  <xs:documentation>
							Use this field to designate the start of a date/time range. By default, 30
							days worth of data is returned.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getJobs</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="creationTimeTo" type="xs:dateTime">
                <xs:annotation>
                  <xs:documentation>
							Use this field to designate the end of a date/time range. Defaults to
							current time.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getJobs</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="jobType" type="xs:token">
                <xs:annotation>
                  <xs:documentation>
							Job filter criteria. Default is return all job types.
							&lt;br&gt;&lt;br&gt;
							Each of the Bulk Data Exchange job types corresponds to a Merchant Data
							request or response with the same name. The requests or responses included
							within a data file are uploaded or downloaded after the job is created. For
							instance, if you create an AddFixedPriceItem job, then the file you are
							going to upload must contain AddFixedPriceItem requests - one request for
							each item in your data file.
							&lt;br&gt;&lt;br&gt;
							Each Bulk Data Exchange job can only have one job type per job. For
							instance, if you are uploading a data file, it can not have both
							AddFixedPriceItem requests and ReviseFixedPriceItem requests within the
							same data file.
							&lt;br&gt;&lt;br&gt;
							The following value definitions describe the request or response associated
							with each job type.
							&lt;br&gt;&lt;br&gt;
							For more information about creating and uploading Merchant Data files, see
							the Large Merchant Services User Guide.
							&lt;br&gt;&lt;br&gt;
							&lt;dl&gt;
							&lt;lh&gt;Applicable values:&lt;br&gt;&lt;/lh&gt;

							&lt;dt&gt;AddFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Defines a single new fixed price item and lists it on a
							specified eBay site.
							&lt;/dd&gt;

							&lt;dt&gt;AddItem&lt;/dt&gt;
							&lt;dd&gt;Defines a single new item and lists it on a specified eBay site.
							&lt;/dd&gt;

							&lt;dt&gt;EndFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Ends the specified item listing before the date and time at
							which it would normally end (per the listing duration).
							&lt;/dd&gt;

							&lt;dt&gt;EndItem&lt;/dt&gt;
							&lt;dd&gt;Ends the specified item listing before the date and time at
							which it would normally end (per the listing duration).
							&lt;/dd&gt;

							&lt;dt&gt;OrderAck&lt;/dt&gt;
							&lt;dd&gt;Request that acknowledges that an order has been received. Use
							the OrderAck request to acknowledge each line item in a SoldReport by
							order ID or line item ID.
							&lt;br&gt;&lt;br&gt;
							After you send the first OrderAck call, future SoldReports will only
							contain unacknowledged orders or line items.
							&lt;/dd&gt;

							&lt;dt&gt;RelistFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to take a single item (or a single multi-item
							listing) that ended without bidders or buyers and re-list it on a
							specified eBay site.
							&lt;br&gt;&lt;br&gt;
							A listing may be re-listed with the same item
							properties as the original or the seller may change a number of the
							item's defining properties at re-listing time. The new listing will
							have a different item ID than the original one.
							&lt;/dd&gt;

							&lt;dt&gt;RelistItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to take a single item (or a single multi-item 
							listing) and re-list it on a specified eBay site.
							&lt;/dd&gt;

							&lt;dt&gt;ReviseFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to change the properties of a currently
							active listing.
							&lt;br&gt;&lt;br&gt;
							If the listing contains multiple items, you can revise most of the fields
							in the listing (except Title, currency, product ID, photo display type,
							variation details, duration, format, or eBay Giving Works charity), even
							after one of the items in the listing has been purchased. To revise
							multiple listings, include a ReviseFixedPriceItemRequest once for each
							item or listing in your data file, with new information for each item or
							listing.
							&lt;/dd&gt;

							&lt;dt&gt;ReviseInventoryStatus&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to change the price and quantity of a currently
							active fixed-price listing. Inputs are the item IDs or SKUs of the
							listings being revised, and price and quantity that are being changed for
							each revision.
							&lt;br&gt;&lt;br&gt;
							You can use SKU as input only for fixed-price listings that are managed by
							SKU (i.e., InventoryTrackingMethod is set to SKU). ItemID can be used in
							either case.
							&lt;/dd&gt;

							&lt;dt&gt;ReviseItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to change the properties of a currently active
							listing.
							&lt;/dd&gt;

							&lt;dt&gt;SetShipmentTrackingInfo&lt;/dt&gt;
							&lt;dd&gt;Includes information about a specific item and the shipping
							information associated with it.
							&lt;/dd&gt;

							&lt;dt&gt;UploadSiteHostedPictures&lt;/dt&gt;
							&lt;dd&gt;Uploads a picture to EPS (eBay Picture Services) when you supply
							a URL in the ExternalPictureURL field (the location of the picture on an
							external web server). Unlike what the call name implies, you can only
							upload one picture per request.
							&lt;/dd&gt;

							&lt;dt&gt;VerifyAddFixedPriceItem&lt;/dt&gt;
							&lt;dd&gt;Acknowledges that the data for a single new fixed price item
							matches the schema and can be added without data errors.
							&lt;/dd&gt;

							&lt;dt&gt;VerifyAddItem&lt;/dt&gt;
							&lt;dd&gt;Enables a seller to specify the definition of a new item and
							submit the definition to eBay without creating a listing.
							&lt;/dd&gt;
							&lt;/dl&gt;
						</xs:documentation>
                  <xs:appinfo>
                    <ListBasedOn />
                    <CallInfo>
                      <CallName>getJobs</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="jobStatus" type="ns0:JobStatus">
                <xs:annotation>
                  <xs:documentation>
							The current state of a Bulk Data Exchange job. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getJobs</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetJobStatusRequest">
        <xs:annotation>
          <xs:documentation>
		Get job status for the provided job ID.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
			Get job status for the provided job ID..
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="jobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							upload or download job. Use the &lt;b class="con"&gt;jobId&lt;/b&gt; value
							returned in the &lt;b class="con"&gt;createUploadJob&lt;/b&gt; response or
							the &lt;b class="con"&gt;startDownloadJob&lt;/b&gt; response. You can also
							use &lt;b class="con"&gt;getJobs&lt;/b&gt; to retrieve job IDs for any of
							your upload or download jobs.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getJobStatus</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="StartDownloadJobRequest">
        <xs:annotation>
          <xs:documentation>
		Begins processing the data for a report file to download. You must use the getJobStatus or
		getRecurringJobExecutionStatus calls to determine when the report data is available for download.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Begins processing the data for a report file the you will download.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="downloadJobType" type="xs:token">
                <xs:annotation>
                  <xs:documentation>
							Specifies the report you want to download.
							Each Bulk Data Exchange job can only have one job type per job. For
							instance, if you are downloading a SoldReport, it will only have
							pre-defined SoldReport data within the file.
							&lt;br&gt;&lt;br&gt;
							&lt;dl&gt;
							&lt;lh&gt;Applicable values:&lt;br&gt;&lt;/lh&gt;
							&lt;dt&gt;ActiveInventoryReport&lt;/dt&gt;
							&lt;dd&gt;A report that contains all of the active listings for a specific
							seller ID. The eBay servers read the credential information passed in by
							the seller's application to determine which seller's data to retrieve.
							&lt;/dd&gt;
							&lt;dt&gt;FeeSettlementReport&lt;/dt&gt;
							&lt;dd&gt;A report that contains all of the fees that you have incurred
							as invoices are generated by the eBay servers. This report gives large
							merchants the ability to look at their fees for many listings in one file.
							&lt;/dd&gt;
							&lt;dt&gt;SoldReport&lt;/dt&gt;
							&lt;dd&gt;Lists all items that have been sold by this seller (sold items
							that were submitted to the Large Merchant Service by the seller's
							application).
							&lt;br&gt;&lt;br&gt;
							When an item is sold, the eBay application creates an 'order' for the
							seller. If only one item is sold, there is one order ID and one line item
							ID associated with the sale. However, if multiple items are sold as part
							of the same transaction, there is one order ID for the sale, and multiple
							line item IDs - one line item ID for each item sold.
							&lt;br&gt;&lt;br&gt;
							Therefore, the Sold Report returns the order IDs and line item IDs for
							every order associated with the seller who is making the request. Sellers
							use this information to make inventory updates and start order fulfillment.
							&lt;br&gt;&lt;br&gt;
							When orders have been fulfilled, the seller will probably want to remove
							them from the list of all orders that comes back every time they receive a
							SoldReport. To do this, they can acknowledge each order that has been
							fulfulled (using order ID or line item ID) by uploading a list of the
							fulfulled order information using an OrderAck request.
							&lt;br&gt;&lt;br&gt;
							After you upload a data file with an OrderAck request, the orders (or line
							items within an order) will no longer appear in the SoldReport. (After you
							send the first OrderAck call, future SoldReports that you request will only
							contain unacknowledged orders and line items.)
							&lt;/dd&gt;
							&lt;/dl&gt;
						</xs:documentation>
                  <xs:appinfo>
                    <ListBasedOn />
                    <CallInfo>
                      <CallName>startDownloadJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="UUID" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							A Universally Unique Identifier (UUID) provided by the seller's
							application.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>startDownloadJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="downloadRequestFilter" type="ns0:DownloadRequestFilter">
                <xs:annotation>
                  <xs:documentation>
						Request filter.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>startDownloadJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="recurringJob" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
						It is an internal tag used to specify whether the download job
						is started as part of the recurring job request or not.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>startDownloadJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="DownloadRequestFilter">
        <xs:annotation>
          <xs:documentation>
			Lets you request only the data within specific parameters, such as a date range.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="feeSettlementReportFilter" type="ns0:FeeSettlementReportFilter">
            <xs:annotation>
              <xs:documentation>
					Lets you request only the data within specific parameters, such as a date
					range.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="getItemInfoReportFilter" type="ns0:GetItemInfoReportFilter">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="siteFilter" type="ns0:SiteFilter">
            <xs:annotation>
              <xs:documentation>
				Reserved for future use.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="activeInventoryReportFilter" type="ns0:ActiveInventoryReportFilter">
            <xs:annotation>
              <xs:documentation>
					Specify what needs to be included as part of active inventory report.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="SiteFilter">
        <xs:annotation>
          <xs:documentation>
		Reserved for future use.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="globalId" type="xs:token">
            <xs:annotation>
              <xs:documentation>
				Reserved for future use.
				</xs:documentation>
              <xs:appinfo>
                <ListBasedOn />
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>Yes</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FeeSettlementReportFilter">
        <xs:annotation>
          <xs:documentation>
			Reserved for future use. Lets you request only the eBay fees you have incurred
			since the specified start time.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="startTime" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
					The start time of the invoice period.
					&lt;br&gt;&lt;br&gt;
					An 'invoice' is the eBay term for the bill that is sent to the seller by the
					eBay application.
					&lt;br&gt;&lt;br&gt;
					The FeeSettlementReport is based on fees from a given billing cycle for which
					there is an invoice. The FeeSettlementReport will be generated based on the
					last available invoice since the specified start time.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>Yes</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ActiveInventoryReportFilter">
        <xs:annotation>
          <xs:documentation>
			Specify in this filter what exactly needs to be included in the active inventory report.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="includeListingType" type="ns0:IncludeListingType">
            <xs:annotation>
              <xs:documentation>
					Specify the type of listing(s) you would like the report to include - Chinese, FixedPriceItem or both.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="fixedPriceItemDetails" type="ns0:FixedPriceItemDetails">
            <xs:annotation>
              <xs:documentation>
					Specify filters specific to fixed price items.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="auctionItemDetails" type="ns0:AuctionItemDetails">
            <xs:annotation>
              <xs:documentation>
					Specify filters specific to auction items.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="FixedPriceItemDetails">
        <xs:annotation>
          <xs:documentation>
			Specify filters specific to fixed price items.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="includeVariations" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
					Specify if variation details are needed to be included as part of the report.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AuctionItemDetails">
        <xs:annotation>
          <xs:documentation>
			Specify filters specific to auction items.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="includeBidCount" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
					Specify if bid count on the auction needs to be included as part of the report.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="includeReservePriceMet" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
					Specify if report needs to included if reserve price has been met.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>startDownloadJob</CallName>
                  <RequiredInput>No</RequiredInput>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetItemInfoReportFilter">
        <xs:annotation>
          <xs:documentation>
			Reserved for future use.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="jobAction" type="ns0:GetItemJobActionType">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="filterType" type="ns0:ItemEventType">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="includeAttributes" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
						Reserved for future use.
					</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="includeDescription" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
						Reserved for future use.
					</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reportDateFrom" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reportDateTo" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="timeFrame" type="xs:token">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="changedFieldSelector" type="xs:token">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="ItemEventType">
        <xs:annotation>
          <xs:documentation>
			Reserved for future use.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
          <xs:enumeration value="New">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Changed">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="IncludeListingType">
        <xs:annotation>
          <xs:documentation>
			Subset of ListingType's allowed in Active inventory report.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Auction">
            <xs:annotation>
              <xs:documentation>
					Chinese Acution type.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="FixedPrice">
            <xs:annotation>
              <xs:documentation>
					Listing type is fixed price.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="AuctionAndFixedPrice">
            <xs:annotation>
              <xs:documentation>
					Listing type is chinese Auction or fixed price.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="GetItemJobActionType">
        <xs:annotation>
          <xs:documentation>
			Reserved for future use.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="action" type="xs:token">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateRecurringJobRequest">
        <xs:annotation>
          <xs:documentation>
			Creates a recurring Bulk Data Exchange job and assigns it a &lt;b 
			class="con"&gt;recurringJobId&lt;/b&gt;.
			When you create a recurring job, you must specify a recurrence interval, such
			as daily, weekly, monthly, or a frequency in minutes.
			&lt;br&gt;&lt;br&gt;
			Once a recurring job has been created, a separate job ID is created for each
			job that is created/executed. For example, if a job runs every hour, it will
			have a single &lt;b class="con"&gt;recurringJobId&lt;/b&gt; and each hourly job 
			will have a unique &lt;b class="con"&gt;jobId&lt;/b&gt; and &lt;b 
			class="con"&gt;fileReferenceI&lt;/b&gt;d.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Creates a recurring Bulk Data Exchange Job.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="UUID" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							A Universally Unique Identifier (UUID) provided by the seller's
							application.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createRecurringJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="frequencyInMinutes" type="xs:int">
                <xs:annotation>
                  <xs:documentation>
							Use this element to specify job recurrence interval in minutes.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <Min>101</Min>
                      <CallName>createRecurringJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="downloadJobType" type="xs:token">
                <xs:annotation>
                  <xs:documentation>
							Specifies the report you want to download. Each Bulk Data Exchange
							job can only have one job type per job. For instance, if you are
							downloading a SoldReport, it will only have pre-defined SoldReport
							data within the file.

						&lt;br&gt;&lt;br&gt;
						&lt;dl&gt;
						&lt;lh&gt;Applicable values:&lt;br&gt;&lt;/lh&gt;

							&lt;dt&gt;ActiveInventoryReport&lt;/dt&gt;
							&lt;dd&gt;A report that contains all of the active listings for a specific
							seller ID. The eBay servers read the credential information passed in by
							the seller's application to determine which seller's data to retrieve.
							&lt;/dd&gt;

							&lt;dt&gt;FeeSettlementReport&lt;/dt&gt;
							&lt;dd&gt;A report that contains all of the fees that you have incurred
							as invoices are generated by the eBay servers. This report gives large
							merchants the ability to look at their fees for many listings in one file.
							&lt;/dd&gt;

							&lt;dt&gt;SoldReport&lt;/dt&gt;
							&lt;dd&gt;Lists all items that have been sold by this seller (sold items
							that were submitted to the Large Merchant Service by the seller's
							application).
							&lt;br&gt;&lt;br&gt;
							When an item is sold, the eBay application creates an 'order' for the
							seller. If only one item is sold, there is one order ID and one line item
							ID associated with the sale. However, if multiple items are sold as part
							of the same transaction, there is one order ID for the sale, and multiple
							line item IDs - one line item ID for each item sold.
							&lt;br&gt;&lt;br&gt;
							Therefore, the Sold Report returns the order IDs and line item IDs for
							every order associated with the seller who is making the request. Sellers
							use this information to make inventory updates and start order fulfillment.
							&lt;br&gt;&lt;br&gt;
							When orders have been fulfilled, the seller will probably want to remove
							them from the list of all orders that comes back every time they receive a
							SoldReport. To do this, they can acknowledge each order that has been
							fulfulled (using order ID or line item ID) by uploading a list of the
							fulfulled order information using an OrderAck request.
							&lt;br&gt;&lt;br&gt;
							After you upload a data file with an OrderAck request, the orders (or line
							items within an order) will no longer appear in the SoldReport. (After you
							send the first OrderAck call, future SoldReports that you request will only
							contain unacknowledged orders and line items.)
						&lt;/dd&gt;

						&lt;dl&gt;

						</xs:documentation>
                  <xs:appinfo>
                    <ListBasedOn />
                    <CallInfo>
                      <CallName>createRecurringJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="monthlyRecurrence" type="ns0:MonthlyRecurrence">
                <xs:annotation>
                  <xs:documentation>
							Optional element to specify a monthly schedule for a recurring job.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createRecurringJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="weeklyRecurrence" type="ns0:WeeklyRecurrence">
                <xs:annotation>
                  <xs:documentation>
							Optional element to specify a weekly schedule for a recurring job.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createRecurringJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="dailyRecurrence" type="ns0:DailyRecurrence">
                <xs:annotation>
                  <xs:documentation>
							Optional element to specify a daily schedule for a recurring job.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createRecurringJob</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="DeleteRecurringJobRequest">
        <xs:annotation>
          <xs:documentation>
			Deletes the recurring job. If you only want to delete a single instance of the
			recurring job, use &lt;b class="con"&gt;abortRecurringJob&lt;/b&gt;. If you only 
			want to stop the recurring job, but plan to start it again later, use &lt;b 
			class="con"&gt;suspendRecurringJob&lt;/b&gt;.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Deletes recurring job.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							recurring job. Use the &lt;b class="con"&gt;recurringJobId&lt;/b&gt; value 
							returned in the &lt;b class="con"&gt;createRecurringJob&lt;/b&gt; response. 
							You can also use &lt;b class="con"&gt;getRecurringJobs&lt;/b&gt; to 
							retrieve IDs for any recurring jobs you have created. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>deleteRecurringJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetRecurringJobsRequest">
        <xs:annotation>
          <xs:documentation>
			Get all recurring jobs submitted by this seller. There should only be one
			recurring job per job type.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
		Get all recurring jobs submitted by this seller.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetRecurringJobExecutionStatusRequest">
        <xs:annotation>
          <xs:documentation>
			Returns the status information for the latest instance of a recurring job.
			To see all instances of a recurring job, use &lt;b 
			class="con"&gt;getRecurringJobExecutionHistory&lt;/b&gt;.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Check recurring job execution status.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							recurring job. Use the &lt;b class="con"&gt;recurringJobId&lt;/b&gt; value 
							returned in the &lt;b class="con"&gt;createRecurringJob&lt;/b&gt; response. 
							You can also use &lt;b class="con"&gt;getRecurringJobs&lt;/b&gt; to 
							retrieve IDs for any recurring jobs you have created. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionStatus</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetRecurringJobExecutionHistoryRequest">
        <xs:annotation>
          <xs:documentation>
			Returns all instances of a recurring job that have occurred so far. To see only
			the status information for the latest instance of a recurring job, use
			getRecurringJobExecutionStatus.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Returns all instances of a recurring job that have occurred so far.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element minOccurs="0" name="startTime" type="xs:dateTime">
                <xs:annotation>
                  <xs:documentation>
						Filter on job start time. Default is 30 days.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionHistory</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="endTime" type="xs:dateTime">
                <xs:annotation>
                  <xs:documentation>
						Filter on job start time. Default is current time.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionHistory</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							recurring job. Use the &lt;b class="con"&gt;recurringJobId&lt;/b&gt; value 
							returned in the &lt;b class="con"&gt;createRecurringJob&lt;/b&gt; response. 
							You can also use &lt;b class="con"&gt;getRecurringJobs&lt;/b&gt; to 
							retrieve IDs for any recurring jobs you have created. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionHistory</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="jobStatus" type="ns0:JobStatus">
                <xs:annotation>
                  <xs:documentation>
							The current state of a Bulk Data Exchange job. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionHistory</CallName>
                      <RequiredInput>No</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="ActivateRecurringJobRequest">
        <xs:annotation>
          <xs:documentation>
			Re-starts recurring job that has been suspended.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Re-activates a recurring job that has been suspended.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							recurring job. Use the &lt;b class="con"&gt;recurringJobId&lt;/b&gt; value 
							returned in the &lt;b class="con"&gt;createRecurringJob&lt;/b&gt; response. 
							You can also use &lt;b class="con"&gt;getRecurringJobs&lt;/b&gt; to 
							retrieve IDs for any recurring jobs you have created. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>activateRecurringJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="SuspendRecurringJobRequest">
        <xs:annotation>
          <xs:documentation>
		Stops processing of recurring job. When your application makes this call, the
		processing will stop, but it may not stop immediately. To determine which data
		was processed and which data still needs to be processed, see the
		SuspendRecurringJobResponse that is returned by this call.
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Stops the processing for a recurring job.
			</Summary>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Recurring job Id, returned by call to CreateRecurrringJob operation
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>suspendRecurringJob</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="AbortRecurringJobExecutionRequest">
        <xs:annotation>
          <xs:documentation>
			Suspends the next instance of a recurring job. The recurring job will resume with
			subsequent job instances. Use &lt;b 
			class="con"&gt;getRecurringJobExecutionHistory&lt;/b&gt; and &lt;b 
			class="con"&gt;getRecurringJobExecutionStatus&lt;/b&gt; to identify any reporting 
			gaps. 
		</xs:documentation>
          <xs:appinfo>
            <Summary>
				Deletes the next instance of a recurring job.
			</Summary>
            <RelatedCalls>getRecurringJobExecutionHistory,getRecurringJobExecutionStatus</RelatedCalls>
            <TempInfo>samples</TempInfo>
          </xs:appinfo>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceRequest">
            <xs:sequence>
              <xs:element name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							recurring job. Use the &lt;b class="con"&gt;recurringJobId&lt;/b&gt; value 
							returned in the &lt;b class="con"&gt;createRecurringJob&lt;/b&gt; response. 
							You can also use &lt;b class="con"&gt;getRecurringJobs&lt;/b&gt; to 
							retrieve IDs for any recurring jobs you have created. 
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>abortRecurringJobExecution</CallName>
                      <RequiredInput>Yes</RequiredInput>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="BaseServiceRequest" abstract="true">
        <xs:annotation>
          <xs:documentation>
		This is the base class for request container for all service operations.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BaseServiceResponse" abstract="true">
        <xs:annotation>
          <xs:documentation>
			Base response container for all service operations. Contains error information
			associated with the request.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="ack" type="ns0:AckValue">
            <xs:annotation>
              <xs:documentation>
					Returns the acknowledgement of the call success or failure.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="errorMessage" type="ns0:ErrorMessage">
            <xs:annotation>
              <xs:documentation>
					Description of an error or warning that occurred when eBay processed the
					request. Not returned if the ack value is Success.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="version" type="xs:string">
            <xs:annotation>
              <xs:documentation>
					The release version that eBay used to process the request. Developer
					Technical Support may ask you for the version value if you work with them
					to troubleshoot issues.
					&lt;br&gt;&lt;br&gt;
					&lt;span class="tablenote"&gt;&lt;strong&gt;Note:&lt;/strong&gt;
					The version in use is normally the latest release version, as specified
					in the release notes. Note that eBay releases the API to international
					sites about a week after the API version is released to the US site.
					&lt;/span&gt;
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="timestamp" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
					This value represents the date and time when eBay processed the request.
					This value is returned in GMT, the ISO 8601 date and time format (YYYY-
					MM- DDTHH:MM:SS.SSSZ). See the "dateTime" type for information about the
					time format, and for details on converting to and from the GMT time zone.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CreateUploadJobResponse">
        <xs:annotation>
          <xs:documentation>
		Returns job id and a file reference id, as well as the maximum upload file size for
		your data file. You need to add these ids to all Bulk Data Exchange calls that
		are related to your job, such as getJobStatusRequest.
		&lt;br&gt;
		&lt;br&gt;
		You will also need to add this information to File Transfer Service requests
		for this job.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" name="jobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Unique ID assigned by the Bulk Data Exchange service for managing your
							upload job. Use this &lt;b class="con"&gt;jobId&lt;/b&gt; to activate 
							(&lt;b class="con"&gt;startUploadJo&lt;/b&gt;b) or abort (&lt;b 
							class="con"&gt;abortJob&lt;/b&gt;) processing of an uploaded file. You can 
							use &lt;b class="con"&gt;jobId&lt;/b&gt; in &lt;b
							class="con"&gt;getJobStatus&lt;/b&gt; to check on processing progress for
							your job.
							&lt;br&gt;&lt;br&gt;
							Before you can start an upload job, you must upload the corresponding data
							file, using the File Transfer API. In the File Transfer API, &lt;b 
							class="con"&gt;jobId&lt;/b&gt; maps to &lt;b 
							class="con"&gt;taskReferenceId&lt;/b&gt; in the &lt;b 
							class="con"&gt;uploadFile&lt;/b&gt; call.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createUploadJob</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="fileReferenceId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							A unique ID assigned to a file by the Bulk Data Exchange Service. Pass this
							fileReferenceId into a File Transfer Service uploadFile call.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createUploadJob</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element minOccurs="0" name="maxFileSize" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Maximum size of a file that may be uploaded or downloaded. Currently, the
							default maximum size is 15MB. The number of calls allowed in a data file
							that you want to upload varies with the size of the Item description, the
							type of data in the description, and the complexity of each call in your
							file.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createUploadJob</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="StartUploadJobResponse">
        <xs:annotation>
          <xs:documentation>
			Reports successful or unsuccessful attempt to process the data in the uploaded
			file.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="AbortJobResponse">
        <xs:annotation>
          <xs:documentation>
		Reports job aborted. To determine which data was processed and which data still
		needs to be processed, see the AbortJobResponse that is returned by this call.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetJobsResponse">
        <xs:annotation>
          <xs:documentation>
		Returns the list of jobs requested by this seller.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="jobProfile" type="ns0:JobProfile">
                <xs:annotation>
                  <xs:documentation>
							The job profile is a collection of data about a job that includes:
							jobId, jobType, jobStatus, job creation time, job completion time,
							errorCount, percentComplete, and inputFileReferenceId (for upload jobs).
							&lt;br&gt;&lt;br&gt;
							If upload job processing has finished, a new fileReferenceId is also returned.
							&lt;br&gt;&lt;br&gt;
							The job profile returns data about the state of the Bulk Data Exchange job,
							but does not return information about the status of the processing for any
							data file that is sent with the job request or returned with the job
							response.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getJobs</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetJobStatusResponse">
        <xs:annotation>
          <xs:documentation>
			Returns the status of jobs submitted by this seller.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="jobProfile" type="ns0:JobProfile">
                <xs:annotation>
                  <xs:documentation>
						The job profile is a collection of data about a job that includes:
							jobId, jobType, jobStatus, job creation time, job completion time,
							errorCount, percentComplete, and inputFileReferenceId (for upload jobs).
							&lt;br&gt;&lt;br&gt;
							If upload job processing has finished, a new fileReferenceId is also returned.
							&lt;br&gt;&lt;br&gt;
							The job profile returns data about the state of the Bulk Data Exchange job,
							but does not return information about the status of the processing for any
							data file that is sent with the job request or returned with the job
							response.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getJobStatus</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="StartDownloadJobResponse">
        <xs:annotation>
          <xs:documentation>
		Indicates that a report or response is being processed by the eBay servers.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" name="jobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Job ID assigned by the Bulk Data Exchange service
						when startDownloadJobRequest is called. Pass this
						jobId into a File Transfer service downloadJobRequest.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>startDownloadJob</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="CreateRecurringJobResponse">
        <xs:annotation>
          <xs:documentation>
			Returns the job ID for a successfully created recurring job, or returns
			failure along with the reason the recurring job could not be created.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" name="recurringJobId" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
							Recurring Job ID obtained by calling createRecurringJobRequest.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>createRecurringJob</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="DeleteRecurringJobResponse">
        <xs:annotation>
          <xs:documentation>
			Returns a 'Success' or 'Failure' response to indicate whether a specified
			recurring job was deleted.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetRecurringJobsResponse">
        <xs:annotation>
          <xs:documentation>
			Returns the recurring job ID, creation time, frequency, job type, and job status
			for each recurring job created by the seller making this call.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="recurringJobDetail" type="ns0:RecurringJobDetail">
                <xs:annotation>
                  <xs:documentation>
							Recurring job ID, creation time, frequency, job type, and job status for a
							recurring job.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobs</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetRecurringJobExecutionStatusResponse">
        <xs:annotation>
          <xs:documentation>
			Returns the job profile for a specified recurring job ID. This job profile
			includes the job ID, job type, job status, creation time, completion time, error
			count, percent complete, and file reference ID.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" name="jobProfile" type="ns0:JobProfile">
                <xs:annotation>
                  <xs:documentation>
						The job profile is a collection of data about a job that includes:
							jobId, jobType, jobStatus, job creation time, job completion time,
							errorCount, percentComplete, and inputFileReferenceId (for upload jobs).
							&lt;br&gt;&lt;br&gt;
							If upload job processing has finished, a new fileReferenceId is also returned.
							&lt;br&gt;&lt;br&gt;
							The job profile returns data about the state of the Bulk Data Exchange job,
							but does not return information about the status of the processing for any
							data file that is sent with the job request or returned with the job
							response.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionStatus</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="GetRecurringJobExecutionHistoryResponse">
        <xs:annotation>
          <xs:documentation>
			Returns the job profile for each job instance for a specified recurring job ID.
			This job profile includes the job ID, job type, job status, creation time,
			completion time, error count, percent complete, and file reference ID.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence>
              <xs:element minOccurs="0" maxOccurs="unbounded" name="jobProfile" type="ns0:JobProfile">
                <xs:annotation>
                  <xs:documentation>
						The job profile is a collection of data about a job that includes:
							jobId, jobType, jobStatus, job creation time, job completion time,
							errorCount, percentComplete, and inputFileReferenceId (for upload jobs).
							&lt;br&gt;&lt;br&gt;
							If upload job processing has finished, a new fileReferenceId is also returned.
							&lt;br&gt;&lt;br&gt;
							The job profile returns data about the state of the Bulk Data Exchange job,
							but does not return information about the status of the processing for any
							data file that is sent with the job request or returned with the job
							response.
						</xs:documentation>
                  <xs:appinfo>
                    <CallInfo>
                      <CallName>getRecurringJobExecutionHistory</CallName>
                      <Returned>Always</Returned>
                    </CallInfo>
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="ActivateRecurringJobResponse">
        <xs:annotation>
          <xs:documentation>
			Returns Success or Failure to indicate whether a Recurring Job (that was
			suspended) has been re-activated correctly.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="SuspendRecurringJobResponse">
        <xs:annotation>
          <xs:documentation>
			Returns Success or Failure to indicate whether the scheduled processing for a
			recurring job has been stopped. To resume processing schedule, use
			activateRecurringJob.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="AbortRecurringJobExecutionResponse">
        <xs:annotation>
          <xs:documentation>
			Returns Success or Failure to indicate whether the next instance of a Recurring
			Job has been deleted. f so, the Recurring Job schedule remains active. If you want
			to remove the recurringJob completely, use DeleteRecurringJob. Use
			getRecurringJobExecutionStatus to see the last completed instance of a
			recurring job.
		</xs:documentation>
        </xs:annotation>
        <xs:complexContent mixed="false">
          <xs:extension base="ns0:BaseServiceResponse">
            <xs:sequence />
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="RecurringJobDetail">
        <xs:annotation>
          <xs:documentation>
			Recurring Job Detail for response. Job detail includes recurring job ID, creation
			time, frequency of recurrence, job type, and job status.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="recurringJobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>
						Recurring job ID, returned by call to createRecurrringJobRequest.
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="creationTime" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
					The date and time a Bulk Data Exchange job was created.
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="frequencyInMinutes" type="xs:int">
            <xs:annotation>
              <xs:documentation>
					Use this element to specify job recurrence interval in minutes.
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="downloadJobType" type="xs:token">
            <xs:annotation>
              <xs:documentation>
						Specifies the report you want to download.
					Each Bulk Data Exchange job can only have one job type per job. For instance,
						if you are downloading a SoldReport, it will only have pre-defined
						SoldReport data within the file.

					&lt;br&gt;&lt;br&gt;
					&lt;dl&gt;
					&lt;lh&gt;Applicable values:&lt;br&gt;&lt;/lh&gt;

						&lt;dt&gt;ActiveInventoryReport&lt;/dt&gt;
						&lt;dd&gt;A report that contains all of the active listings for a specific
						seller ID. The eBay servers read the credential information passed in by
						the seller's application to determine which seller's data to retrieve.
						&lt;/dd&gt;

						&lt;dt&gt;FeeSettlementReport&lt;/dt&gt;
						&lt;dd&gt;A report that contains all of the fees that you have incurred
						as invoices are generated by the eBay servers. This report gives large
						merchants the ability to look at their fees for many listings in one file.
					&lt;/dd&gt;

						&lt;dt&gt;SoldReport&lt;/dt&gt;
						&lt;dd&gt;Lists all items that have been sold by this seller (sold items
						that were submitted to the Large Merchant Service by the seller's
						application).
						&lt;br&gt;&lt;br&gt;
						When an item is sold, the eBay application creates an 'order' for the
						seller. If only one item is sold, there is one order ID and one line item
						ID associated with the sale. However, if multiple items are sold as part
						of the same transaction, there is one order ID for the sale, and multiple
						line item IDs - one line item ID for each item sold.
						&lt;br&gt;&lt;br&gt;
						Therefore, the Sold Report returns the order IDs and line item IDs for
						every order associated with the seller who is making the request. Sellers
						use this information to make inventory updates and start order fulfillment.
						&lt;br&gt;&lt;br&gt;
						When orders have been fulfilled, the seller will probably want to remove
						them from the list of all orders that comes back every time they receive a
						SoldReport. To do this, they can acknowledge each order that has been
						fulfulled (using order ID or line item ID) by uploading a list of the
						fulfulled order information using an OrderAck request.
						&lt;br&gt;&lt;br&gt;
						After you upload a data file with an OrderAck request, the orders (or line
						items within an order) will no longer appear in the SoldReport. (After you
						send the first OrderAck call, future SoldReports that you request will only
						contain unacknowledged orders and line items.)
					&lt;/dd&gt;

					&lt;dl&gt;

					</xs:documentation>
              <xs:appinfo>
                <ListBasedOn />
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobStatus" type="ns0:RecurringJobStatus">
            <xs:annotation>
              <xs:documentation>
						The current state of a recurring Bulk Data Exchange job. 
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="monthlyRecurrence" type="ns0:MonthlyRecurrence">
            <xs:annotation>
              <xs:documentation>
						Optional element to define the recurrence interval for monthly jobs.
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="weeklyRecurrence" type="ns0:WeeklyRecurrence">
            <xs:annotation>
              <xs:documentation>
						Optional element to define the recurrence interval for weekly jobs.
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="dailyRecurrence" type="ns0:DailyRecurrence">
            <xs:annotation>
              <xs:documentation>
						Optional element to define the recurrence interval for daily jobs.
					</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="FileType">
        <xs:annotation>
          <xs:documentation>
		Type of file to be uploaded or downloaded.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="XML">
            <xs:annotation>
              <xs:documentation>
				XML file.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="JobProfile">
        <xs:annotation>
          <xs:documentation>
		The job profile is a collection of data about a job that includes:
			jobId, jobType, jobStatus, job creation time, job completion time,
			errorCount, percentComplete, and inputFileReferenceId (for upload jobs).
			&lt;br&gt;&lt;br&gt;
			If upload job processing has finished, a new fileReferenceId is also returned.
			&lt;br&gt;&lt;br&gt;
			The job profile returns data about the state of the Bulk Data Exchange job,
			but does not return information about the status of the processing for any
			data file that is sent with the job request or returned with the job
			response.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="jobId" type="xs:string">
            <xs:annotation>
              <xs:documentation>
				Job Id obtained by calling createUploadJob.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobType" type="xs:token">
            <xs:annotation>
              <xs:documentation>
					Each of the Bulk Data Exchange job types corresponds to a Merchant Data request
					or response with the same name. The requests or responses are included within a
					data file that will be uploaded or downloaded after the job is created. For
					instance, if you create an AddFixedPriceItem job, then the file you are going
					to upload must contain AddFixedPriceItem requests - one request for each item
					in your data file.
					&lt;br&gt;&lt;br&gt;
					Each Bulk Data Exchange job can only have one job type per job. For example, if
					you are uploading a data file it can not have both AddFixedPriceItem requests
					and ReviseFixedPriceItem requests within the same data file.
					&lt;br&gt;&lt;br&gt;
					The following value definitions describe the request or response associated
					with each job type.
					&lt;br&gt;&lt;br&gt;
					For more information about creating and uploading Merchant Data files, see the
					Large Merchant Services User Guide.

					&lt;br&gt;&lt;br&gt;
					&lt;dl&gt;
					&lt;lh&gt;Applicable values:&lt;br&gt;&lt;/lh&gt;

					&lt;dt&gt;AddFixedPriceItem&lt;/dt&gt;
					&lt;dd&gt;Defines a single new fixed price item and lists it on a
					specified eBay site.
					&lt;/dd&gt;

					&lt;dt&gt;AddItem&lt;/dt&gt;
					&lt;dd&gt;Defines a single new item and lists it on a specified eBay site.
					&lt;/dd&gt;

					&lt;dt&gt;EndFixedPriceItem&lt;/dt&gt;
					&lt;dd&gt;Ends the specified item listing before the date and time at
					which it would normally end (per the listing duration).
					&lt;/dd&gt;

					&lt;dt&gt;EndItem&lt;/dt&gt;
					&lt;dd&gt;Ends the specified item listing before the date and time at
					which it would normally end (per the listing duration).
					&lt;/dd&gt;

					&lt;dt&gt;OrderAck&lt;/dt&gt;
					&lt;dd&gt;Request that acknowledges that an order has been received. Use
					the OrderAck request to acknowledge each line item in a SoldReport by
					order ID or line item ID.
					&lt;br&gt;&lt;br&gt;
					After you send the first OrderAck call, future SoldReports will only
					contain unacknowledged orders or line items.
					&lt;/dd&gt;

					&lt;dt&gt;RelistFixedPriceItem&lt;/dt&gt;
					&lt;dd&gt;Enables a seller to take a single item (or a single multi-item
					listing) that ended without bidders or buyers and re-list it on a
					specified eBay site.
					&lt;br&gt;&lt;br&gt;
					A listing may be re-listed with the same item
					properties as the original or the seller may change a number of the
					item's defining properties at re-listing time. The new listing will
					have a different item ID than the original one.
					&lt;/dd&gt;

					&lt;dt&gt;RelistItem&lt;/dt&gt;
					&lt;dd&gt;Enables a seller to take a single item (or a single multi-item 
					listing) and re-list it on a specified eBay site.
					&lt;/dd&gt;

					&lt;dt&gt;ReviseFixedPriceItem&lt;/dt&gt;
					&lt;dd&gt;Enables a seller to change the properties of a currently
					active listing.
					&lt;br&gt;&lt;br&gt;
					If the listing contains multiple items, you can revise most of the fields
					in the listing (except Title, currency, product ID, photo display type,
					variation details, duration, format, or eBay Giving Works charity), even
					after one of the items in the listing has been purchased. To revise
					multiple listings, include a ReviseFixedPriceItemRequest once for each
					item or listing in your data file, with new information for each item or
					listing.
					&lt;/dd&gt;

					&lt;dt&gt;ReviseInventoryStatus&lt;/dt&gt;
					&lt;dd&gt;Enables a seller to change the price and quantity of a currently
					active fixed-price listing. Inputs are the item IDs or SKUs of the
					listings being revised, and price and quantity that are being changed for
					each revision.
					&lt;br&gt;&lt;br&gt;
					You can use SKU as input only for fixed-price listings that are managed by
					SKU (i.e., InventoryTrackingMethod is set to SKU). ItemID can be used in
					either case.
					&lt;/dd&gt;

					&lt;dt&gt;ReviseItem&lt;/dt&gt;
					&lt;dd&gt;Enables a seller to change the properties of a currently active
					listing.
					&lt;/dd&gt;

					&lt;dt&gt;SetShipmentTrackingInfo&lt;/dt&gt;
					&lt;dd&gt;Includes information about a specific item and the shipping
					information associated with it.
					&lt;/dd&gt;

					&lt;dt&gt;UploadSiteHostedPictures&lt;/dt&gt;
					&lt;dd&gt;Uploads a picture to EPS (eBay Picture Services) when you supply
					a URL in the ExternalPictureURL field (the location of the picture on an
					external web server). Unlike what the call name implies, you can only
					upload one picture per request.
					&lt;/dd&gt;

					&lt;dt&gt;VerifyAddFixedPriceItem&lt;/dt&gt;
					&lt;dd&gt;Acknowledges that the data for a single new fixed price item
					matches the schema and can be added without data errors.
					&lt;/dd&gt;

					&lt;dt&gt;VerifyAddItem&lt;/dt&gt;
					&lt;dd&gt;Enables a seller to specify the definition of a new item and
					submit the definition to eBay without creating a listing.
					&lt;/dd&gt;
					&lt;/dl&gt;
				</xs:documentation>
              <xs:appinfo>
                <ListBasedOn />
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="jobStatus" type="ns0:JobStatus">
            <xs:annotation>
              <xs:documentation>
					The current state of a Bulk Data Exchange job. 
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="creationTime" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
					The date and time a Bulk Data Exchange job was created.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="completionTime" type="xs:dateTime">
            <xs:annotation>
              <xs:documentation>
				The date and time that job processing was completed. Use this with creationTime
					to determine the average processing time for your jobs. If job processing has
					not completed, this field will not be returned.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="errorCount" type="xs:int">
            <xs:annotation>
              <xs:documentation>
					The number of non-fatal (informational) errors that occurred during file
					processing (uploads or reports) after you sent the Bulk Data Exchange
					startUploadJobRequest call or the startDownloadJobRequest call.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="percentComplete" type="xs:double">
            <xs:annotation>
              <xs:documentation>
				The percentage of your file that has been processed after sending the
					Bulk Data Exchange startUploadJobRequest call or the startDownloadJobRequest
					call.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="fileReferenceId" type="xs:string">
            <xs:annotation>
              <xs:documentation>
					A unique ID that references the response file when the job created via
					createUploadJob or startDownloadJob completes. Pass the fileReferenceId into a
					File Transfer Service uploadFile or downloadFile call.
					&lt;br&gt;&lt;br&gt;
					If a job has not completed processing, only the inputFileReferenceId
					(original fileReferenceId from the createUploadJobResponse) will be
					returned. Once the upload job has finished processing, a new fileReferenceId
					is assigned by the Bulk Data Exchange service and returned by the job
				status calls.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <CallName>getRecurringJobExecutionStatus</CallName>
                  <CallName>getRecurringJobExecutionHistory</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="inputFileReferenceId" type="xs:string">
            <xs:annotation>
              <xs:documentation>
							The inputFileReferenceId is a unique ID that references the input data file
							for a job that is created via createUploadJob. Preserves the original
							fileReferenceId value for an upload job. Once the data file has been
							uploaded and the upload job has finished processing, a new fileReferenceId
							is assigned by the Bulk Data Exchange Service for downloading the
							corresponding responses.
						</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>getJobs</CallName>
                  <CallName>getJobStatus</CallName>
                  <Returned>Always</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="AckValue">
        <xs:annotation>
          <xs:documentation>
		Indicates whether the error is a severe error (causing the request to fail)
		or an informational error (a warning) that should be communicated to the
		user.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Success">
            <xs:annotation>
              <xs:documentation>
				The request was processed successfully, but something occurred that may
				affect your application or the user.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Failure">
            <xs:annotation>
              <xs:documentation>
				The request that triggered the error was not processed successfully.
				When a serious application-level error occurs, the error is returned
				instead of the business data.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Warning">
            <xs:annotation>
              <xs:documentation>
					The request that triggered the error was processed successfully but with some
					warnings.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="PartialFailure">
            <xs:annotation>
              <xs:documentation>
					Reserved for future use.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="ErrorMessage">
        <xs:annotation>
          <xs:documentation>
			ErrorMessage to indicate any Error/Warning occurred as part of service call.
		Any run time error will not be reported here, but will be reported aspart of
		soap fault.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="error" nillable="true" type="ns0:ErrorData">
            <xs:annotation>
              <xs:documentation>
				Details about a single error.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ErrorData">
        <xs:annotation>
          <xs:documentation>
		This represents error details.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="errorId" type="xs:long">
            <xs:annotation>
              <xs:documentation>
				A unique code that identifies the particular error condition that occurred.
				Your application can use error codes as identifiers in your customized
				error-handling algorithms.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="domain" type="xs:string">
            <xs:annotation>
              <xs:documentation>
					Name of the domain upon which the error occurred.
					&lt;dl&gt;
					&lt;lh&gt;Domains include:&lt;/lh&gt;
					&lt;dt&gt;
						Marketplace
					&lt;/dt&gt;
					&lt;dd&gt;
						A business or validation error occurred for the Bulk Data Exchange service.
					&lt;/dd&gt;
					&lt;dt&gt;
						SOA
					&lt;/dt&gt;
					&lt;dd&gt;
						An exception occurred in the Service Oriented Architecture (SOA) framework.
					&lt;/dd&gt;
					&lt;/dl&gt;
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="severity" type="ns0:ErrorSeverity">
            <xs:annotation>
              <xs:documentation>
					Indicates whether the error caused the request to fail (Error) or not
					(Warning).
					&lt;br&gt;&lt;br&gt;
					If the request fails and the source of the problem is within the application
					(such as a missing required element), please change the application before you
					retry the request. If the problem is due to end-user input data, please alert
					the end-user to the problem and provide the means for them to correct the data.
					Once the problem in the application or data is resolved, you can attempt to re-
					send the request to eBay.
					&lt;br&gt;&lt;br&gt;
					If the source of the problem is on eBay's side, you can retry the request as-is
					a reasonable number of times (eBay recommends twice). If the error persists,
					contact Developer Technical Support. Once the problem has been resolved, the
					request may be resent in its original form.
					&lt;br&gt;&lt;br&gt;
					When a warning occurs, the error is returned in addition to the business data.
					In this case, you do not need to retry the request (as the original request was
					successful). However, depending on the cause or nature of the warning, you
					might need to contact either the end user or eBay to effect a long term
					solution to the problem to prevent it from reoccurring in the future.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="category" type="ns0:ErrorCategory">
            <xs:annotation>
              <xs:documentation>
				There are three categories of errors: request errors, application errors, and
				system errors.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="message" type="xs:string">
            <xs:annotation>
              <xs:documentation>
				A detailed description of the condition that resulted in the error.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subdomain" type="xs:string">
            <xs:annotation>
              <xs:documentation>
					Name of the subdomain upon which the error occurred.
					&lt;dl&gt;
					&lt;lh&gt;Subdomains include:&lt;/lh&gt;
					&lt;dt&gt;
						BulkDataExchangeService
					&lt;/dt&gt;
					&lt;dd&gt;
						The error is specific to the BulkDataExchangeService service.
					&lt;/dd&gt;
					&lt;dt&gt;
						MarketplaceCommon
					&lt;/dt&gt;
					&lt;dd&gt;
						The error is common to all Marketplace services.
					&lt;/dd&gt;
					&lt;/dl&gt;
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="exceptionId" type="xs:token">
            <xs:annotation>
              <xs:documentation>
				Unique identifier for an exception associated with an error.
				</xs:documentation>
              <xs:appinfo>
                <ListBasedOn />
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="parameter" nillable="true" type="ns0:ErrorParameter">
            <xs:annotation>
              <xs:documentation>
				Some warning and error messages return one or more variables that contain
				contextual information about the error. This is often the field or value that
				triggered the error.
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <AllCalls />
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ErrorParameter">
        <xs:annotation>
          <xs:documentation>
		Contextual information associated with an error.
		</xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute name="name" type="xs:string">
              <xs:annotation>
                <xs:documentation>
					The name of the parameter in the get of parameter types returned
					within the error type.
					</xs:documentation>
                <xs:appinfo>
                  <CallInfo>
                    <AllCalls />
                    <Returned>Conditionally</Returned>
                  </CallInfo>
                </xs:appinfo>
              </xs:annotation>
            </xs:attribute>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>
      <xs:simpleType name="ErrorSeverity">
        <xs:annotation>
          <xs:documentation>
		Indicates whether the error is a severe error (causing the request to fail)
		or an informational error (a warning) that should be communicated to the
		user.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Error">
            <xs:annotation>
              <xs:documentation>
				The request that triggered the error was not processed successfully.
				When a serious application-level error occurs, the error is returned
				instead of the business data.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Warning">
            <xs:annotation>
              <xs:documentation>
				The request was processed successfully, but something occurred that may
				affect your application or the user. For example, eBay may have changed a
				value the user sent in. In this case, eBay returns a normal, successful
				response and also returns the warning.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="ErrorCategory">
        <xs:annotation>
          <xs:documentation>
		There are three categories of error: request errors, application errors,
		and system errors. Request and application errors are caused primarily by
		invalid data passed in the request. System errors are caused primarily by
		application failures and cannot be corrected by changing request values.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="System">
            <xs:annotation>
              <xs:documentation>
				Indicates that an error has occurred on the eBay system side, such as a
				database or server down. An application can retry the request as-is a
				reasonable number of times (eBay recommends twice). If the error
				persists, contact Developer Technical Support. Once the problem has been
				resolved, the request may be resent in its original form.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Application">
            <xs:annotation>
              <xs:documentation>
				An error occurred due to a problem with the request, such as missing or
				invalid fields. The problem must be corrected before the request can be
				made again. If the problem is due to something in the application (such
				as a missing required field), the application must be changed. Once the
				problem in the application or data is resolved, resend the corrected
				request to eBay.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Request">
            <xs:annotation>
              <xs:documentation>
				An error occurred due to a problem with the request, such as invalid or
				missing data. The problem must be corrected before the request can be
				made again. If the problem is a result of end-user data, the application
				must alert the end-user to the problem and provide the means for the
				end-user to correct the data. Once the problem in the data is resolved,
				resend the request to eBay with the corrected data.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="JobStatus">
        <xs:annotation>
          <xs:documentation>
			Returns the current state of a Bulk Data Exchange job. Use getJobStatus to find
			out where your job is in the processing cycle. Use getRecurringJobExecutionStatus
			to find out the status of a recurring job.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Created">
            <xs:annotation>
              <xs:documentation>
					The job ID and file reference ID have been created as a result of the
					createUploadJobRequest or the startDownloadJobRequest.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Scheduled">
            <xs:annotation>
              <xs:documentation>
					The job has been internally scheduled for processing by the Bulk Data
					Exchange service.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="InProcess">
            <xs:annotation>
              <xs:documentation>
					Processing on the data file or the report has begun.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Completed">
            <xs:annotation>
              <xs:documentation>
					Processing on the data file or the report has finished.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Aborted">
            <xs:annotation>
              <xs:documentation>
					The Bulk Data Exchange has been aborted due to the abortJobRequset call.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Failed">
            <xs:annotation>
              <xs:documentation>
					The Bulk Data Exchange job has not completed successfully, due to
					incorrect data format, request errors, or Bulk Data Exchange
					service errors.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="RecurringJobStatus">
        <xs:annotation>
          <xs:documentation>
			Returns the current state of a recurring Bulk Data Exchange job.
		</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Active">
            <xs:annotation>
              <xs:documentation>
					Job is active. 
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
          <xs:enumeration value="Suspended">
            <xs:annotation>
              <xs:documentation>
					Job is suspended. Use &lt;b class="con"&gt;activateRecurringJob&lt;/b&gt; to
					restart a suspended recurring job.
				</xs:documentation>
            </xs:annotation>
          </xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="MonthlyRecurrence">
        <xs:annotation>
          <xs:documentation>
		Include this element when creating a recurring job that runs monthly.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="dayOfMonth" type="xs:token">
            <xs:annotation>
              <xs:documentation>
					Specify a day of the month by number (e.g., Day_1, Day_2, Day_3, ...) up to the 
					28th day of the month (i.e., Day_28) or the last day of the month (i.e., 
					Day_Last).
				</xs:documentation>
              <xs:appinfo>
                <ListBasedOn />
                <CallInfo>
                  <CallName>createRecurringJob</CallName>
                  <RequiredInput>Conditionally</RequiredInput>
                </CallInfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="timeOfDay" type="xs:time">
            <xs:annotation>
              <xs:documentation>
					The time of day you want the job to execute, based on a 24-hour clock and GMT.
					You must specify hours (HH), minutes (MM), and seconds (SS) in the form
					HH:MM:SS (for example, 05:00:00 for 5AM).
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>createRecurringJob</CallName>
                  <RequiredInput>Conditionally</RequiredInput>
                </CallInfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="WeeklyRecurrence">
        <xs:annotation>
          <xs:documentation>
		Include this element when creating a recurring job that runs weekly.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="dayOfWeek" type="xs:token">
            <xs:annotation>
              <xs:documentation>
				Allowed Values: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
				</xs:documentation>
              <xs:appinfo>
                <ListBasedOn />
                <CallInfo>
                  <CallName>createRecurringJob</CallName>
                  <RequiredInput>Conditionally</RequiredInput>
                </CallInfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="timeOfDay" type="xs:time">
            <xs:annotation>
              <xs:documentation>
					Recurring Time for the  job to run ex:08:00:00.000Z
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>createRecurringJob</CallName>
                  <RequiredInput>Conditionally</RequiredInput>
                </CallInfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DailyRecurrence">
        <xs:annotation>
          <xs:documentation>
		Include this element when creating a recurring job that runs daily.
		</xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="timeOfDay" type="xs:time">
            <xs:annotation>
              <xs:documentation>
					Recurring Time for the  job to run ex:08:00:00.000Z
				</xs:documentation>
              <xs:appinfo>
                <CallInfo>
                  <CallName>createRecurringJob</CallName>
                  <RequiredInput>Conditionally</RequiredInput>
                </CallInfo>
                <CallInfo>
                  <CallName>getRecurringJobs</CallName>
                  <Returned>Conditionally</Returned>
                </CallInfo>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="getRecurringJobsResponse">
    <wsdl:part name="params" element="ns0:getRecurringJobsResponse" />
  </wsdl:message>
  <wsdl:message name="startDownloadJobRequest">
    <wsdl:part name="params" element="ns0:startDownloadJobRequest" />
  </wsdl:message>
  <wsdl:message name="getRecurringJobExecutionStatusRequest">
    <wsdl:part name="params" element="ns0:getRecurringJobExecutionStatusRequest" />
  </wsdl:message>
  <wsdl:message name="getJobStatusResponse">
    <wsdl:part name="params" element="ns0:getJobStatusResponse" />
  </wsdl:message>
  <wsdl:message name="getJobStatusRequest">
    <wsdl:part name="params" element="ns0:getJobStatusRequest" />
  </wsdl:message>
  <wsdl:message name="startUploadJobRequest">
    <wsdl:part name="params" element="ns0:startUploadJobRequest" />
  </wsdl:message>
  <wsdl:message name="startDownloadJobResponse">
    <wsdl:part name="params" element="ns0:startDownloadJobResponse" />
  </wsdl:message>
  <wsdl:message name="suspendRecurringJobRequest">
    <wsdl:part name="params" element="ns0:suspendRecurringJobRequest" />
  </wsdl:message>
  <wsdl:message name="getRecurringJobExecutionHistoryResponse">
    <wsdl:part name="params" element="ns0:getRecurringJobExecutionHistoryResponse" />
  </wsdl:message>
  <wsdl:message name="createRecurringJobRequest">
    <wsdl:part name="params" element="ns0:createRecurringJobRequest" />
  </wsdl:message>
  <wsdl:message name="getRecurringJobsRequest">
    <wsdl:part name="params" element="ns0:getRecurringJobsRequest" />
  </wsdl:message>
  <wsdl:message name="getJobsResponse">
    <wsdl:part name="params" element="ns0:getJobsResponse" />
  </wsdl:message>
  <wsdl:message name="abortRecurringJobExecutionResponse">
    <wsdl:part name="params" element="ns0:abortRecurringJobExecutionResponse" />
  </wsdl:message>
  <wsdl:message name="abortRecurringJobExecutionRequest">
    <wsdl:part name="params" element="ns0:abortRecurringJobExecutionRequest" />
  </wsdl:message>
  <wsdl:message name="deleteRecurringJobRequest">
    <wsdl:part name="params" element="ns0:deleteRecurringJobRequest" />
  </wsdl:message>
  <wsdl:message name="getJobsRequest">
    <wsdl:part name="params" element="ns0:getJobsRequest" />
  </wsdl:message>
  <wsdl:message name="abortJobRequest">
    <wsdl:part name="params" element="ns0:abortJobRequest" />
  </wsdl:message>
  <wsdl:message name="suspendRecurringJobResponse">
    <wsdl:part name="params" element="ns0:suspendRecurringJobResponse" />
  </wsdl:message>
  <wsdl:message name="createRecurringJobResponse">
    <wsdl:part name="params" element="ns0:createRecurringJobResponse" />
  </wsdl:message>
  <wsdl:message name="getRecurringJobExecutionHistoryRequest">
    <wsdl:part name="params" element="ns0:getRecurringJobExecutionHistoryRequest" />
  </wsdl:message>
  <wsdl:message name="activateRecurringJobRequest">
    <wsdl:part name="params" element="ns0:activateRecurringJobRequest" />
  </wsdl:message>
  <wsdl:message name="startUploadJobResponse">
    <wsdl:part name="params" element="ns0:startUploadJobResponse" />
  </wsdl:message>
  <wsdl:message name="getRecurringJobExecutionStatusResponse">
    <wsdl:part name="params" element="ns0:getRecurringJobExecutionStatusResponse" />
  </wsdl:message>
  <wsdl:message name="activateRecurringJobResponse">
    <wsdl:part name="params" element="ns0:activateRecurringJobResponse" />
  </wsdl:message>
  <wsdl:message name="createUploadJobRequest">
    <wsdl:part name="params" element="ns0:createUploadJobRequest" />
  </wsdl:message>
  <wsdl:message name="abortJobResponse">
    <wsdl:part name="params" element="ns0:abortJobResponse" />
  </wsdl:message>
  <wsdl:message name="deleteRecurringJobResponse">
    <wsdl:part name="params" element="ns0:deleteRecurringJobResponse" />
  </wsdl:message>
  <wsdl:message name="createUploadJobResponse">
    <wsdl:part name="params" element="ns0:createUploadJobResponse" />
  </wsdl:message>
  <wsdl:portType name="BulkDataExchangeServicePort">
    <wsdl:operation name="createUploadJob">
      <wsdl:input message="ns0:createUploadJobRequest" />
      <wsdl:output message="ns0:createUploadJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="startUploadJob">
      <wsdl:input message="ns0:startUploadJobRequest" />
      <wsdl:output message="ns0:startUploadJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="abortJob">
      <wsdl:input message="ns0:abortJobRequest" />
      <wsdl:output message="ns0:abortJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="getJobs">
      <wsdl:input message="ns0:getJobsRequest" />
      <wsdl:output message="ns0:getJobsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getJobStatus">
      <wsdl:input message="ns0:getJobStatusRequest" />
      <wsdl:output message="ns0:getJobStatusResponse" />
    </wsdl:operation>
    <wsdl:operation name="startDownloadJob">
      <wsdl:input message="ns0:startDownloadJobRequest" />
      <wsdl:output message="ns0:startDownloadJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="createRecurringJob">
      <wsdl:input message="ns0:createRecurringJobRequest" />
      <wsdl:output message="ns0:createRecurringJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="deleteRecurringJob">
      <wsdl:input message="ns0:deleteRecurringJobRequest" />
      <wsdl:output message="ns0:deleteRecurringJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobs">
      <wsdl:input message="ns0:getRecurringJobsRequest" />
      <wsdl:output message="ns0:getRecurringJobsResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobExecutionStatus">
      <wsdl:input message="ns0:getRecurringJobExecutionStatusRequest" />
      <wsdl:output message="ns0:getRecurringJobExecutionStatusResponse" />
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobExecutionHistory">
      <wsdl:input message="ns0:getRecurringJobExecutionHistoryRequest" />
      <wsdl:output message="ns0:getRecurringJobExecutionHistoryResponse" />
    </wsdl:operation>
    <wsdl:operation name="activateRecurringJob">
      <wsdl:input message="ns0:activateRecurringJobRequest" />
      <wsdl:output message="ns0:activateRecurringJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="suspendRecurringJob">
      <wsdl:input message="ns0:suspendRecurringJobRequest" />
      <wsdl:output message="ns0:suspendRecurringJobResponse" />
    </wsdl:operation>
    <wsdl:operation name="abortRecurringJobExecution">
      <wsdl:input message="ns0:abortRecurringJobExecutionRequest" />
      <wsdl:output message="ns0:abortRecurringJobExecutionResponse" />
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="BulkDataExchangeServiceHttpBinding" type="ns0:BulkDataExchangeServicePort">
    <http:binding verb="POST" />
    <wsdl:operation name="createUploadJob">
      <http:operation location="BulkDataExchangeService/createUploadJob" />
      <wsdl:input>
        <mime:content part="createUploadJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="createUploadJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="startUploadJob">
      <http:operation location="BulkDataExchangeService/startUploadJob" />
      <wsdl:input>
        <mime:content part="startUploadJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="startUploadJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="abortJob">
      <http:operation location="BulkDataExchangeService/abortJob" />
      <wsdl:input>
        <mime:content part="abortJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="abortJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getJobs">
      <http:operation location="BulkDataExchangeService/getJobs" />
      <wsdl:input>
        <mime:content part="getJobs" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getJobs" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getJobStatus">
      <http:operation location="BulkDataExchangeService/getJobStatus" />
      <wsdl:input>
        <mime:content part="getJobStatus" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getJobStatus" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="startDownloadJob">
      <http:operation location="BulkDataExchangeService/startDownloadJob" />
      <wsdl:input>
        <mime:content part="startDownloadJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="startDownloadJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createRecurringJob">
      <http:operation location="BulkDataExchangeService/createRecurringJob" />
      <wsdl:input>
        <mime:content part="createRecurringJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="createRecurringJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteRecurringJob">
      <http:operation location="BulkDataExchangeService/deleteRecurringJob" />
      <wsdl:input>
        <mime:content part="deleteRecurringJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="deleteRecurringJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobs">
      <http:operation location="BulkDataExchangeService/getRecurringJobs" />
      <wsdl:input>
        <mime:content part="getRecurringJobs" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getRecurringJobs" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobExecutionStatus">
      <http:operation location="BulkDataExchangeService/getRecurringJobExecutionStatus" />
      <wsdl:input>
        <mime:content part="getRecurringJobExecutionStatus" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getRecurringJobExecutionStatus" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobExecutionHistory">
      <http:operation location="BulkDataExchangeService/getRecurringJobExecutionHistory" />
      <wsdl:input>
        <mime:content part="getRecurringJobExecutionHistory" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getRecurringJobExecutionHistory" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateRecurringJob">
      <http:operation location="BulkDataExchangeService/activateRecurringJob" />
      <wsdl:input>
        <mime:content part="activateRecurringJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="activateRecurringJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="suspendRecurringJob">
      <http:operation location="BulkDataExchangeService/suspendRecurringJob" />
      <wsdl:input>
        <mime:content part="suspendRecurringJob" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="suspendRecurringJob" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="abortRecurringJobExecution">
      <http:operation location="BulkDataExchangeService/abortRecurringJobExecution" />
      <wsdl:input>
        <mime:content part="abortRecurringJobExecution" type="text/xml" />
      </wsdl:input>
      <wsdl:output>
        <mime:content part="abortRecurringJobExecution" type="text/xml" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="BulkDataExchangeServiceSOAPBinding" type="ns0:BulkDataExchangeServicePort">
    <soap12:binding transport="http://schemas.xmlsoap.org/soap/http" />
    <wsdl:operation name="createUploadJob">
      <soap12:operation soapAction="urn:createUploadJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="startUploadJob">
      <soap12:operation soapAction="urn:startUploadJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="abortJob">
      <soap12:operation soapAction="urn:abortJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getJobs">
      <soap12:operation soapAction="urn:getJobs" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getJobStatus">
      <soap12:operation soapAction="urn:getJobStatus" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="startDownloadJob">
      <soap12:operation soapAction="urn:startDownloadJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="createRecurringJob">
      <soap12:operation soapAction="urn:createRecurringJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteRecurringJob">
      <soap12:operation soapAction="urn:deleteRecurringJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobs">
      <soap12:operation soapAction="urn:getRecurringJobs" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobExecutionStatus">
      <soap12:operation soapAction="urn:getRecurringJobExecutionStatus" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecurringJobExecutionHistory">
      <soap12:operation soapAction="urn:getRecurringJobExecutionHistory" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateRecurringJob">
      <soap12:operation soapAction="urn:activateRecurringJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="suspendRecurringJob">
      <soap12:operation soapAction="urn:suspendRecurringJob" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="abortRecurringJobExecution">
      <soap12:operation soapAction="urn:abortRecurringJobExecution" style="document" />
      <wsdl:input>
        <soap12:body use="literal" />
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal" />
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="BulkDataExchangeService">
    <wsdl:documentation>
      <Version>1.4.1</Version>
    </wsdl:documentation>
    <wsdl:port name="BulkDataExchangeServiceHttp" binding="ns0:BulkDataExchangeServiceHttpBinding">
      <http:address location="https://webservices.ebay.com/BulkDataExchangeService" />
    </wsdl:port>
    <wsdl:port name="BulkDataExchangeServiceSOAP" binding="ns0:BulkDataExchangeServiceSOAPBinding">
      <soap12:address location="https://webservices.ebay.com/BulkDataExchangeService" />
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>