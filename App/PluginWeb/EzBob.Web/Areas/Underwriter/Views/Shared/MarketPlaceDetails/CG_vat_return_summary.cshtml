<% (function() {
if (m.CGData && m.CGData.VatReturn) {
	var oBoxRegEx = /\(Box (\d+)\)$/;

	var nEntryCount = m.CGData.VatReturn.length;

	var oByBusiness = {};

	for (var nIdx = 0; nIdx < nEntryCount; nIdx++) {
		var oEntry = m.CGData.VatReturn[nIdx];

		if (typeof(oEntry.DateFrom) === 'string')
			oEntry.DateFrom = Date.parse(oEntry.DateFrom);

		if (typeof(oEntry.DateTo) === 'string')
			oEntry.DateTo = Date.parse(oEntry.DateTo);

		if (typeof(oEntry.DateDue) === 'string')
			oEntry.DateDue = Date.parse(oEntry.DateDue);

		oEntry.UniqueBusinessID = oEntry.RegistrationNo + '\n' + oEntry.BusinessName + '\n' + oEntry.BusinessAddress.join('\n');

		oEntry.BoxData = [];
		
		for (var oDetail in oEntry.Data) {
			var oMatch = oBoxRegEx.exec(oDetail);

			if (!oMatch)
				continue;

			oEntry.BoxData[parseInt(oMatch[1])] = {
				amount: oEntry.Data[oDetail].Amount,
				currency_code: oEntry.Data[oDetail].CurrencyCode
			};
		} // for

		if (!oByBusiness[oEntry.UniqueBusinessID])
			oByBusiness[oEntry.UniqueBusinessID] = [];

		oByBusiness[oEntry.UniqueBusinessID].push(oEntry);
	} // for each

	for (var sBusinessID in oByBusiness) {
		var aryBusiness = oByBusiness[sBusinessID];

		aryBusiness.sort(function(a, b) { return a.DateFrom - b.DateFrom; });

		var aryTotals = [];

		// Start index for totals is for last four quarters only.
		var nStartIdx = (aryBusiness.length <= 4) ? 0 : aryBusiness.length - 4;

		for (var i = nStartIdx; i < aryBusiness.length; i++) {
			var oEntry = aryBusiness[i];

			for (var j = 0; j < oEntry.BoxData.length; j++) {
				if (!aryTotals[j])
					aryTotals[j] = 0;

				if (!oEntry.BoxData[j])
					continue;

				// TODO: convert to pounds (or whatever) if currency is not pounds.

				aryTotals[j] += oEntry.BoxData[j].amount;
			} // for each box
		} // for each quarter

		// Start index for displaying is for up to last five quarters.
		nStartIdx = (aryBusiness.length <= 5) ? 0 : aryBusiness.length - 5;

		var arySalary = [];

		var nOneMonthSalary = null;

		if (personalInfoModel) {
			var cec = personalInfoModel.get('CompanyEmployeeCountInfo');
			
			if (cec && cec.HasData)
				nOneMonthSalary = cec.TotalMonthlySalary;
		} // if

		for (var i = 0; i < aryBusiness.length; i++) {
			var oDateFrom = moment.utc(aryBusiness[i].DateFrom).local();
			var oDateTo = moment.utc(aryBusiness[i].DateTo).local();

			var nSalary = 0;

			if (nOneMonthSalary != null) {
				var nMonthCount = 0;

				if (oDateFrom.year() == oDateTo.year())
					nMonthCount = oDateTo.month() - oDateFrom.month() + 1;
				else
					nMonthCount = 13 - oDateFrom.month() + oDateTo.month();

				nSalary = nOneMonthSalary * nMonthCount;
			} // if

			arySalary.push({
				dateFrom: oDateFrom.year() * 100 + oDateFrom.month(),
				dateTo: oDateTo.year() * 100 + oDateTo.month(),
				salary: nSalary,
			});
		} // for each relevant data item
		%><table class="table centered">
		<thead class="box"><tr class="box-title">
			<th>Business Details</th>
			<th>&nbsp;</th>
			<th>Last Tax Return</th><%
			for (var i = nStartIdx; i < aryBusiness.length; i++)
				%><th><%- EzBob.formatDateMY(aryBusiness[i].DateFrom) %> - <%- EzBob.formatDateMY(aryBusiness[i].DateTo) %></th><%
			%><th>Last Four Periods</th>
			<th>Bank Statement<%
				if (m.CGData.BankStatement.Period)
					print(m.CGData.BankStatement.Period);
			%></th>
		</tr></thead><% 
		if ((nOneMonthSalary === null) && m.CGData.RtiTaxMonths) {
			for (var j = 0; j < m.CGData.RtiTaxMonths.length; j++) {
				var oMonth = m.CGData.RtiTaxMonths[j];

				var oDate = moment.utc(oMonth.DateStart).local();
				var nDate = oDate.year() * 100 + oDate.month();

				for (var i = 0; i < arySalary.length; i++) {
					var s = arySalary[i];

					if (s.dateFrom <= nDate && nDate <= s.dateTo)
						s.salary += oMonth.AmountPaid.Amount;
				} // for each quarter
			} // for each RTI month
		} // if
		%><tbody>
			<tr>
				<td class="no-padding" rowspan=11>
					<table class="internal-table">
						<% var aryDetails = sBusinessID.split('\n'); %>
						<tr>
							<td>Registration #:</td>
							<td><%- aryDetails[0] %></td>
						</tr>
						<tr>
							<td>Business Details:</td>
							<td>
								<div><%- aryDetails[1] %></div>
								<% for (var nAddrIdx = 2; nAddrIdx < aryDetails.length; nAddrIdx++) {
									%><div><%- aryDetails[nAddrIdx] %></div><%
								} %>
							</td>
						</tr>
					</table>
				</td>
				<th>% of annual</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><%
						if ((i >= aryBusiness.length - 4) && (aryTotals[6])) {
							%><%- EzBob.formatPercents(aryBusiness[i].BoxData[6].amount * 1.0 / aryTotals[6]) %><%
						}
						else {
							%>-<%
						}
					%></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPercents(1) %></td>
				<td>-</td>
			</tr>
			<tr>
				<th>Revenues</th><td></td><%
				var oRevenues = {};
				var nRevenuesSum = aryTotals[6];

				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					oRevenues[i] = aryBusiness[i].BoxData[6].amount;

					%><td class=r><%- EzBob.formatPoundsAsInt(oRevenues[i]) %></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPoundsAsInt(nRevenuesSum) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.Revenues)%></td>
			</tr>
			<tr>
				<th>Opex</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><%- EzBob.formatPoundsAsInt(aryBusiness[i].BoxData[7].amount) %></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPoundsAsInt(aryTotals[7]) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.Opex)%></td>
			</tr>
			<tr class=chkpt>
				<th>Total value added</th><td></td><%
				var oTotalValueAdded = {};
				var nTotalValueAdded = aryTotals[7];

				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					oTotalValueAdded[i] = aryBusiness[i].BoxData[6].amount - aryBusiness[i].BoxData[7].amount;
					%><td class=r><%- EzBob.formatPoundsAsInt(oTotalValueAdded[i]) %></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPoundsAsInt(nRevenuesSum - nTotalValueAdded) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.TotalValueAdded)%></td>
			</tr>
			<tr>
				<th>% of revenues</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><%
						print(EzBob.formatPercents0(oTotalValueAdded[i], oRevenues[i]) || '&ndash;');
					%></td><%
				} // for each relevant data item
				%><td class=r><% print(EzBob.formatPercents0(nRevenuesSum - nTotalValueAdded, nRevenuesSum) || '&ndash;'); %></td>
				<td><%=EzBob.formatPercents(m.CGData.BankStatement.PercentOfRevenues,2)%></td>
			</tr>
			<tr>
				<th>Salaries</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><%- EzBob.formatPoundsAsInt(arySalary[i].salary) %></td><%
				} // for each relevant data item
				%><td class=r><%
					var nSalarySum = 0;

					for (var i = (arySalary.length <= 4 ? 0 : arySalary.length - 4); i < arySalary.length; i++)
						nSalarySum += arySalary[i].salary;

				%><%- EzBob.formatPoundsAsInt(nSalarySum) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.Salaries)%></td>
			</tr>
			<tr>
				<th>Tax</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r>&ndash;</td><%
				} // for each relevant data item
				%><td class=r>&ndash;</td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.Tax)%></td>
			</tr>
			<tr class=chkpt>
				<th>EBIDA</th><td></td><%
				var oEBIDA = {};
				var nEBIDASum = 0;

				var nSumStartIdx = aryBusiness.length <= 4 ? 0 : aryBusiness.length - 4;

				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					oEBIDA[i] = oTotalValueAdded[i] - arySalary[i].salary; // TODO: subtract Tax from the previous row.

					if (i >= nSumStartIdx)
						nEBIDASum += oEBIDA[i];

					%><td class=r><%- EzBob.formatPoundsAsInt(oEBIDA[i]) %></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPoundsAsInt(nEBIDASum) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.Ebida)%></td>
			</tr>
			<tr>
				<th>% of annual</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><% print(EzBob.formatPercents0(oEBIDA[i], oRevenues[i]) || '&ndash;'); %></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPercents0(nEBIDASum, nRevenuesSum) %></td>
				<td>-</td>
			</tr>
			<tr>
				<th>Actual loans repayment</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><%- EzBob.formatPoundsAsInt(0) %></td><%
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPoundsAsInt(0) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.ActualLoansRepayment)%></td>
			</tr>
			<tr class="chkpt lastchkpt">
				<th>Free cash flow</th><td></td><%
				for (var i = nStartIdx; i < aryBusiness.length; i++) {
					%><td class=r><%- EzBob.formatPoundsAsInt(oEBIDA[i]) %></td><% // TODO: subtract Actual loans repayment from the previous row.
				} // for each relevant data item
				%><td class=r><%- EzBob.formatPoundsAsInt(nEBIDASum) %></td>
				<td><%=EzBob.formatPoundsAsInt(m.CGData.BankStatement.FreeCashFlow)%></td>
			</tr>
		</tbody></table><%
	} // for each business
}
else {
	%>No data found.<%
}
})();
%>
