@using EZBob.DatabaseLib.Model.Database
@using EzBob.Web.Areas.Underwriter.Models
@using EzBob.Web.Code
@using Ezbob.Backend.Models
@using Ezbob.Utils.Extensions
@using PersonalInfo = EZBob.DatabaseLib.Model.Database.PersonalInfo
@model CrossCheckModel

@{
    Layout = null;
    Model.PayPal = Model.PayPal ?? new EzBob.Web.Areas.Underwriter.Models.PersonalInfo();
    Model.PrevAddress = Model.PrevAddress ?? new CustomerAddress();
    Model.PayPalAddress = Model.PayPalAddress ?? new CustomerAddress();
    Model.EBay.SellerInfo = Model.EBay.SellerInfo ?? new EbaySellerInfo();
    Model.EBay.SellerInfo.SellerPaymentAddress = Model.EBay.SellerInfo.SellerPaymentAddress ?? new MP_EbayUserAddressData();
    Model.Customer.PersonalInfo = Model.Customer.PersonalInfo ?? new PersonalInfo();
    CrossCheckModel.TriState nIsKnownToExperian = Model.IsExperianDirector(Model.Application);

    string sNameClass = "";
    string sNameTitle = "";

    switch (nIsKnownToExperian)
    {
        case CrossCheckModel.TriState.No:
            sNameClass = "unknown-as-experian-director";
            sNameTitle = "Not found in Experian directors list.";
            break;

        case CrossCheckModel.TriState.Yes:
            sNameClass = "known-as-experian-director";
            sNameTitle = "Found in Experian directors list.";
            break;

        default:
            sNameTitle = "No data in Experian directors list.";
            break;
    } // switch

    string sManualAddressTitle = "Customer has entered this address manually.";
}
<div class="box row">
    <div class="box-content">

        <h3>Summary</h3>
        <table class="cross-check-summary-table table centered squeezed">
            <tbody>
                <tr>
                    <th class="narrow-as-possible"><a href="javascript:document.getElementById('cross-check-business-info-section').scrollIntoView()">Company name</a></th>
                    <td><b class="marking cross-check-summary-company-name"></b></td>
                </tr>
                <tr>
                    <th class="narrow-as-possible"><a href="javascript:document.getElementById('cross-check-business-info-section').scrollIntoView()">Company address</a></th>
                    <td><b class="marking cross-check-summary-company-address"></b></td>
                </tr>
                <tr>
                    <th class="narrow-as-possible"><a href="javascript:document.getElementById('cross-check-directors-section').scrollIntoView()">Directors</a></th>
                    <td><b class="marking cross-check-summary-directors"></b></td>
                </tr>
            </tbody>
        </table>

        <h3>Personal info</h3>
        <table class="table centered squeezed cross-check-director-details" director-name="@string.Join("\n", new[] { Model.Application.FirstName, Model.Application.MiddleInitial, Model.Application.Surname })">
            <thead class="box">
                <tr class="box-title">
                    <th style="width: 20%;">Personal Info</th>
                    <th style="width: 20%;">Application</th>
                    <th style="width: 30%;">eBay</th>
                    <th style="width: 30%;">PayPal</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><b>E-Mail</b><b class="marking pull-right @Model.CrossCheckStatus.Email"></b></td>
                    <td class="cross-check-customer-email" isoffline="@{ WriteLiteral(Model.Customer.SegmentType() == "Offline" ? "y" : "n"); }">@Model.Application.Email</td>
                    <td>@Model.EBay.Email</td>
                    <td>@Model.PayPal.Email</td>
                </tr>
                <tr>
                    <td><b>Billing Email</b></td>
                    <td></td>
                    <td>@Model.EBay.BillingEmail</td>
                    <td></td>
                </tr>
                <tr>
                    <td><b>FirstName</b><b class="marking pull-right  @Model.CrossCheckStatus.FirstName"></b></td>
                    <td class="@sNameClass" title="@sNameTitle">@Model.Application.FirstName</td>
                    <td>@Model.EBay.FirstName</td>
                    <td>@Model.PayPal.FirstName</td>
                </tr>
                <tr>
                    <td><b>MiddleInitial</b><b class="marking pull-right  @Model.CrossCheckStatus.MiddleInitial"></b> </td>
                    <td class="@sNameClass" title="@sNameTitle">@Model.Application.MiddleInitial</td>
                    <td>@Model.EBay.MiddleInitial</td>
                    <td>@Model.PayPal.MiddleInitial</td>
                </tr>
                <tr>
                    <td><b>Surname</b><b class="marking pull-right  @Model.CrossCheckStatus.Surname"></b></td>
                    <td class="@sNameClass" title="@sNameTitle">@Model.Application.Surname</td>
                    <td>@Model.EBay.Surname</td>
                    <td>@Model.PayPal.Surname</td>
                </tr>
                <tr>
                    <td><b>Fullname</b><b class="marking pull-right  @Model.CrossCheckStatus.FullName"></b></td>
                    <td>@Model.Application.Fullname</td>
                    <td>@Model.EBay.Fullname</td>
                    <td>@Model.PayPal.Fullname</td>
                </tr>
                <tr>
                    <td><b>Date Of Birth</b><b class="marking pull-right  @Model.CrossCheckStatus.DateOfBirth"></b></td>
                    <td>@GetDate(Model.Application.DateOfBirth) @( Model.Application.DateOfBirth != null ? "(" + (DateTime.Now.Year - (Model.Application.DateOfBirth ?? DateTime.Now).Year) + " years)" : "")</td>
                    <td>@GetDate(Model.EBay.DateOfBirth) @( Model.EBay.DateOfBirth != null ? "(" + (DateTime.Now.Year - (Model.EBay.DateOfBirth ?? DateTime.Now).Year) + " years)" : "")</td>
                    <td>@GetDate(Model.PayPal.DateOfBirth) @( Model.PayPal.DateOfBirth != null ? "(" + (DateTime.Now.Year - (Model.PayPal.DateOfBirth ?? DateTime.Now).Year) + " years)" : "")</td>
                </tr>
                <tr>
                    <td><b>Mobile Phone</b></td>
                    <td>@Model.Application.MobilePhone</td>
                    <td>@Model.EBay.MobilePhone</td>
                    <td>@Model.PayPal.MobilePhone</td>
                </tr>
                <tr>
                    <td><b>Residential Status</b></td>
                    <td>@Model.Application.ResidentialStatus</td>
                    <td>@Model.EBay.ResidentialStatus</td>
                    <td>@Model.PayPal.ResidentialStatus</td>
                </tr>
                <tr>
                    <td><b>Gender</b></td>
                    <td>@Model.Application.Gender</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td><b>Marital Status</b></td>
                    <td>@Model.Application.MaritalStatus</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td><b>Type Of Business</b><b class="marking pull-right  @Model.CrossCheckStatus.TypeOfBussnes"></b></td>
                    <td>@Model.Customer.PersonalInfo.TypeOfBusiness</td>
                    <td>@Model.EBay.SellerInfo.SellerInfoSellerBusinessType</td>
                    <td></td>
                </tr>
                <tr>
                    <td><b>Industry Type</b><b class="marking pull-right  @Model.CrossCheckStatus.TypeOfBussnes"></b></td>
                    <td>@Model.Customer.PersonalInfo.IndustryType.DescriptionAttr()</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td><b>Daytime Phone</b><b class="marking pull-right  @Model.CrossCheckStatus.DaytimePhone"></b></td>
                    <td>@Model.Application.DaytimePhone</td>
                    <td>@Model.EBay.DaytimePhone</td>
                    <td>@Model.PayPal.DaytimePhone</td>
                </tr>
                <tr>
                    <td><b>Business Name</b><b class="marking pull-right  @Model.CrossCheckStatus.BusinessName"></b></td>
                    <td></td>
                    <td></td>
                    <td>@Model.PayPal.BusinessName</td>
                </tr>
                <tr>
                    <td><b>SkypeID</b></td>
                    <td></td>
                    <td>@Model.EBay.SkypeID</td>
                    <td></td>
                </tr>

                @if (@Model.Customer.PersonalInfo.TypeOfBusiness == TypeOfBusiness.Entrepreneur)
                {
                    <tr>
                        <td><b>Overall turnover</b></td>
                        <td>@Model.Customer.PersonalInfo.OverallTurnOver</td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td><b>WebSite turnover</b></td>
                        <td>@Model.Customer.PersonalInfo.WebSiteTurnOver</td>
                        <td></td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>Residential address</h3>
        <table class="table centered squeezed">
            <thead class="box">
                <tr class="box-title">
                    <th style="width: 20%;">Address</th>
                    <th style="width: 20%;">Current</th>
                    <th style="width: 20%;">Previous</th>
                    <th style="width: 20%;">eBay seller</th>
                    <th style="width: 20%;">PayPal</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.CurrentAddress != null)
                {
                    <tr>
                        <td><b>Line1</b><b class="marking pull-right  @Model.CrossCheckStatus.Line1"></b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.CurrentAddress.Line1</td>
                        <td>@Model.PrevAddress.Line1</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.Street</td>
                        <td>@Model.PayPalAddress.Line1</td>
                    </tr>
                    <tr>
                        <td><b>Line2</b><b class="marking pull-right  @Model.CrossCheckStatus.Line2"></b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL"))
                            {
                                WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\"");
                            }>@Model.CurrentAddress.Line2</td>
                        <td>@Model.PrevAddress.Line2</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.Street1</td>
                        <td>@Model.PayPalAddress.Line2</td>
                    </tr>
                    <tr>
                        <td><b>Line3</b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL"))
                            {
                                WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\"");
                            }>@Model.CurrentAddress.Line3</td>
                        <td>@Model.PrevAddress.Line3</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.Street2</td>
                        <td>@Model.PayPalAddress.Line3</td>
                    </tr>
                    <tr>
                        <td><b>Town</b><b class="marking pull-right  @Model.CrossCheckStatus.Town"></b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL"))
                            {
                                WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\"");
                            }>@Model.CurrentAddress.Town</td>
                        <td>@Model.PrevAddress.Town</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.CityName</td>
                        <td>@Model.PayPalAddress.Town</td>
                    </tr>
                    <tr>
                        <td><b>County</b><b class="marking pull-right @Model.CrossCheckStatus.County"></b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL"))
                            {
                                WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\"");
                            }>@Model.CurrentAddress.County</td>
                        <td>@Model.PrevAddress.County</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.County</td>
                        <td>@Model.PayPalAddress.County</td>
                    </tr>
                    <tr>
                        <td><b>Postcode</b><b class="marking pull-right  @Model.CrossCheckStatus.Postcode"></b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL"))
                            {
                                WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\"");
                            }>@Model.CurrentAddress.Postcode</td>
                        <td>@Model.PrevAddress.Postcode</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.PostalCode</td>
                        <td>@Model.PayPalAddress.Postcode</td>
                    </tr>
                    <tr>
                        <td><b>Country</b><b class="marking pull-right @Model.CrossCheckStatus.Country"></b></td>
                        <td @if (Model.CurrentAddress.Id.StartsWith("MANUAL"))
                            {
                                WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\"");
                            }>@Model.CurrentAddress.Country</td>
                        <td>@Model.PrevAddress.Country</td>
                        <td>@Model.EBay.SellerInfo.SellerPaymentAddress.CountryName</td>
                        <td>@Model.PayPalAddress.Country</td>
                    </tr>
                }
                <tr>
                    <td><b>Zoopla LR Copy Image</b></td>
                    <td>@copyAddress("Current", @Model.CurrentAddress)</td>
                    <td>@copyAddress("Previous", @Model.PrevAddress)</td>
                    <td>@copyAddress("Ebay", @Model.EBayAddress)</td>
                    <td>@copyAddress("PayPal", @Model.PayPalAddress)</td>
                </tr>
                <tr>
                    <td><b>Zoopla Estimate</b></td>
                    <td colspan="4">@if (Model.CurrentAddress != null)
                                    {
                        @GetZooplaEstimate(Model.CurrentAddress.ZooplaEstimate, Model.CurrentAddress.ZooplaAverage, Model.CurrentAddress.ZooplaUpdateDate);
                                    }
                        <button class="btn btn-mini btn-primary zooplaRecheck" title="Recheck"><i class="fa fa-refresh"></i></button>
                    </td>
                </tr>
                <tr>
                    <td><b>Mortgage</b></td>
                    <td colspan="4">@GetMortgage()</td>
                </tr>
                <tr>
                    <td><b>Property net worth</b></td>
                    <td colspan="4">
                        @if (@Model.Application.ResidentialStatus != null && Model.Application.ResidentialStatus.Contains("Home owner"))
                        {
                            @Html.Raw("£")
                            @Model.AssetWorth.ToString("N0")
                        }
                        else
                        {
                            @Html.Raw("Not home owner")
                        }
                    </td>
                </tr>
            </tbody>
        </table>

        @if (Model.LandRegistries.Any())
        {
            <div class="box">
                <div class="box-title">
                    <h3>Land Registry</h3>
                </div>
                <div class="box-content">
                    @foreach (var lr in Model.LandRegistries)
                    {
                        <div class="accordion-heading">
                            <a class="accordion-toggle" data-toggle="collapse" href="#@lr.TitleNumber">Title Number: @lr.TitleNumber</a>
                        </div>
                        <div id="@lr.TitleNumber" class="accordion-body collapse">
                            <div class="accordion-inner">
                                @LandRegistryRes(lr)
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @if (Model.Customer.SegmentType() == "Offline")
        {
            <table class="table centered squeezed">
                <thead class="box">
                    <tr class="box-title">
                        <th colspan="2">
                            <h3>Other property ownership</h3>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.OtherPropertyAddress == null)
                    {
                        <tr>
                            <td colspan="2">Does not own another property</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td><b>Line1</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.Line1</td>
                        </tr>
                        <tr>
                            <td><b>Line2</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.Line2</td>
                        </tr>
                        <tr>
                            <td><b>Line3</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.Line3</td>
                        </tr>
                        <tr>
                            <td><b>Town</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.Town</td>
                        </tr>
                        <tr>
                            <td><b>County</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.County</td>
                        </tr>
                        <tr>
                            <td><b>Postcode</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.Postcode</td>
                        </tr>
                        <tr>
                            <td><b>Country</b></td>
                            <td @if (Model.OtherPropertyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@Model.OtherPropertyAddress.Country</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        @{
            string companyRefNum = null, companyNum = null, companyName = null, industryType = null, vatReporting = null;
            Iesi.Collections.Generic.ISet<CustomerAddress> postcode = null;
            bool propertyOwnedByCompany = false;
            var company = Model.Customer.Company;

            var companyType = (Model.Customer.PersonalInfo.TypeOfBusiness.Reduce() == TypeOfBusinessReduced.Limited ? "L" : "N");
            industryType = Model.Customer.PersonalInfo.IndustryType.DescriptionAttr<IndustryType?>();
            if (company != null)
            {
                companyRefNum = company.ExperianRefNum;
                companyNum = company.CompanyNumber;
                postcode = company.CompanyAddress; //todo experian
                companyName = company.CompanyName; //todo experian
                propertyOwnedByCompany = company.PropertyOwnedByCompany.HasValue ? company.PropertyOwnedByCompany.Value : false;
                vatReporting = company.VatReporting.DescriptionAttr<VatReporting?>();
            }
    
        }

        <h3 id="cross-check-business-info-section">Business info</h3>
        <table class="table centered squeezed">
            <thead class="box">
                <tr class="box-title">
                    <th></th>
                    <th>Application</th>
                    <th>Experian</th>
                    <th class="hmrc">HMRC</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><b>Business Type</b></td>
                    <td>@Model.Customer.PersonalInfo.TypeOfBusinessName</td>
                    <td></td>
                    <td class="hmrc"></td>
                </tr>
                <tr>
                    <td><b>Industry Type</b></td>
                    <td>@industryType</td>
                    <td></td>
                    <td class="hmrc"></td>
                </tr>
                @if (Model.Customer.PersonalInfo.TypeOfBusiness.Reduce() != TypeOfBusinessReduced.Personal)
                {
                    <tr>
                        <td><b>Targeting Status</b></td>
                        <td>
                            <a class="btn btn-mini pull-right @(String.IsNullOrEmpty(companyRefNum) ? "btn-primary" : "btn-success") disabled" style="margin-left: 10px;">
                                <i class="@(String.IsNullOrEmpty(companyRefNum) ? "fa fa-times" : "fa fa-check")"></i>
                                @(String.IsNullOrEmpty(companyRefNum) ? "Not performed" : "Performed")
                            </a>
                            <a id="recheck-targeting"
                    class="btn btn-mini btn-primary pull-right"
                    href="#"
                    data-postcode="@postcode.Select(x => x.Postcode).FirstOrDefault()"
                    data-company-name="@companyName"
                    data-company-legal-status="@companyType"
                    data-company-number="@companyNum">Recheck</a>
                        </td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>

                    <tr>
                        <td><b>Ref Number</b></td>
                        <td>@companyRefNum</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr> 
         
                    if (Model.Customer.PersonalInfo.TypeOfBusiness.Reduce() == TypeOfBusinessReduced.NonLimited)
                    {
                    <tr>
                        <td><b>Time In Business</b></td>
                        <td>@(company != null ? company.TimeInBusiness : "")</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>
                    }

                    if (Model.Customer.PersonalInfo.TypeOfBusiness.Reduce() == TypeOfBusinessReduced.Limited)
                    {
                    <tr>
                        <td><b>Company Number</b></td>
                        <td>@(companyNum ?? "")</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>
                    }

                    <tr id="cross-check-company-name">
                        <td><b>Company Name</b><b class="marking pull-right checkoutcome"></b></td>
                        <td class="application">@((companyName ?? "").ToUpper())</td>
                        <td class="experian"></td>
                        <td class="hmrc"></td>
                    </tr>
                    <tr id="cross-check-company-address">
                        <td><b>Company Address</b><b class="marking pull-right checkoutcome"></b></td>
                        @{
                    string sCrossCheckCompanyAddress = "";
                    CustomerAddress oCompanyAddress = null;

                    switch (Model.Customer.PersonalInfo.TypeOfBusiness)
                    {
                        case TypeOfBusiness.LLP:
                        case TypeOfBusiness.Limited:
                            oCompanyAddress = company.CompanyAddress.OrderBy(x => x.AddressId).LastOrDefault();
                            break;

                        case TypeOfBusiness.PShip:
                        case TypeOfBusiness.PShip3P:
                        case TypeOfBusiness.SoleTrader:
                            oCompanyAddress = company.CompanyAddress.OrderBy(x => x.AddressId).LastOrDefault();
                            break;
                    } // switch

                    if (oCompanyAddress != null)
                    {
                        sCrossCheckCompanyAddress = string.Join("\n",
                            oCompanyAddress.AddressArray()
                            .Where(s => !string.IsNullOrWhiteSpace(s))
                            .Select(s => s.Replace(".", "").Trim())
                            .Where(s => !string.IsNullOrWhiteSpace(s))
                        ).ToUpper();
                    } // if
                        }
                        <td class="application" @if ((oCompanyAddress != null) && oCompanyAddress.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@sCrossCheckCompanyAddress</td>
                        <td class="experian"></td>
                        <td class="hmrc"></td>
                    </tr>
                    <tr>
                        <td><b>Time At Address</b></td>
                        <td>@(company != null ? company.TimeAtAddress : null)</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>
                    <tr>
                        <td><b>Business Phone</b></td>
                        <td>@(company != null ? company.BusinessPhone : "")</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>

                                                if (Model.Customer.SegmentType() == "Offline")
                                                {
                    <tr>
                        <td><b>Property owned by company</b></td>
                        <td>@(propertyOwnedByCompany ? "Yes" : "No")</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>

                                                    if (!propertyOwnedByCompany)
                                                    {
                    <tr>
                        <td><b>How many years in the property</b></td>
                        <td>@(company.YearsInCompany)</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>
                    <tr>
                        <td><b>How many month are left for the rent contract</b></td>
                        <td>@(company.RentMonthLeft)</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr>
                                                    }
                                                }
                    <tr>
                        <td><b>VAT Reporting</b></td>
                        <td>@vatReporting</td>
                        <td></td>
                        <td class="hmrc"></td>
                    </tr> 
                }
            </tbody>
        </table>

        <h3 id="cross-check-directors-section">Directors
    @if (Model.Customer.PersonalInfo.TypeOfBusiness != TypeOfBusiness.Entrepreneur)
    {
        <button class="btn btn-mini btn-primary add-director">Add director</button>
    }
        </h3>

        <div class="alert duplicate-director-detected" style="display: none;">You are going to add a duplicate director.</div>

        <div class="add-director-container"></div>

        <fieldset id="cross-check-experian-only-directors">
            <legend>Directors received from Experian and not specified by the customer</legend>
            <ul></ul>
        </fieldset>

        @if (Model.Directors.Count == 0)
        {
            <text>Customer did not specify any additional directors.</text>
        }

        @for (int i = 0; i < Model.Directors.Count; i++)
        {
            var d = Model.Directors[i];
            var addressInfo = d.DirectorAddressInfo;
            var address = addressInfo != null && addressInfo.AllAddresses.Any() ? addressInfo.AllAddresses.First() : new CustomerAddress() { Id = String.Empty };

            CrossCheckModel.TriState nIsKnownDirector = Model.IsExperianDirector(d);

            string sDirNameClass = "";
            string sDirNameTitle = "";

            switch (nIsKnownDirector)
            {
                case CrossCheckModel.TriState.No:
                    sDirNameClass = "unknown-as-experian-director";
                    sDirNameTitle = "Not found in Experian directors list.";
                    break;

                case CrossCheckModel.TriState.Yes:
                    sDirNameClass = "known-as-experian-director";
                    sDirNameTitle = "Found in Experian directors list.";
                    break;

                default:
                    sDirNameTitle = "No data in Experian directors list.";
                    break;
            } // switch


            <fieldset>
                <legend>Director #@(i + 1) Info</legend>

                <table class="table table-bordered cross-check-director-details" director-name="@string.Join("\n", new[] { d.Name, d.Middle, d.Surname })">
                    <tbody>
                        <tr>
                            <td><b>Name</b></td>
                            <td class="@sDirNameClass" title="@sDirNameTitle">@d.Name</td>
                        </tr>
                        <tr>
                            <td><b>Middle</b></td>
                            <td class="@sDirNameClass" title="@sDirNameTitle">@d.Middle</td>
                        </tr>
                        <tr>
                            <td><b>Surname</b></td>
                            <td class="@sDirNameClass" title="@sDirNameTitle">@d.Surname</td>
                        </tr>
                        <tr>
                            <td><b>Gender</b></td>
                            <td>@d.Gender</td>
                        </tr>
                        <tr>
                            <td><b>Date Of Birth</b></td>
                            <td>@GetDate(d.DateOfBirth) @( d.DateOfBirth != null ? "(" + (DateTime.Now.Year - (d.DateOfBirth ?? DateTime.Now).Year) + " years)" : "")</td>
                        </tr>
                        <tr>
                            <td><b>Email</b></td>
                            <td>@d.Email</td>
                        </tr>
                        <tr>
                            <td><b>Phone</b></td>
                            <td>@d.Phone</td>
                        </tr>
                        <tr>
                            <td><b>Organisation</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Organisation</td>
                        </tr>
                        <tr>
                            <td><b>Line1</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Line1</td>
                        </tr>
                        <tr>
                            <td><b>Line2</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Line2</td>
                        </tr>
                        <tr>
                            <td><b>Line3</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Line3</td>
                        </tr>
                        <tr>
                            <td><b>Town</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Town</td>
                        </tr>
                        <tr>
                            <td><b>County</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.County</td>
                        </tr>
                        <tr>
                            <td><b>Postcode</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Postcode</td>
                        </tr>
                        <tr>
                            <td><b>Country</b></td>
                            <td @if (address.Id.StartsWith("MANUAL")) { WriteLiteral("class=manually-entered-address title=\"" + sManualAddressTitle + "\""); }>@address.Country</td>
                        </tr>
                    </tbody>
                </table>
            </fieldset>
        }

    </div>
</div>


@helper GetDate(DateTime? d)
{
    if (d.HasValue)
    {@FormattingUtils.FormatDateToString(d.Value)}
}

@{
    Html.RenderPartial("~/Areas/Customer/Views/Shared/_TargetingTemplate.cshtml");
    Html.RenderPartial("Zoopla");
    Html.RenderPartial("LandRegistryEnquiry");
    Html.RenderPartial("LandRegistryEnquiryResults");
}

@helper copyAddress(string name, CustomerAddress currentAddress)
{
    if (currentAddress != null && currentAddress.FormattedAddress != null)
    {
    <div class="copy-buttons">
        @if (name == "Current")
        {
            <button class="btn btn-primary" id="zoopla">Zoopla</button>
            <button class="btn btn-primary" id="landregistry" data-postcode="@currentAddress.Postcode" data-address="@currentAddress.FormattedAddress">Land Registry</button>
        }
        <button class="btn btn-primary btn-copy" data-address="@currentAddress.FormattedAddress" >@name Copy</button>
        <a class="btn btn-primary" href="http://maps.googleapis.com/maps/api/streetview?size=640x640&sensor=false&location=@Uri.EscapeDataString(currentAddress.FormattedAddress)" target="_blank">@name Image</a>
    </div>
    }
}

@helper GetZooplaEstimate(string estimate, string average, DateTime? date)
{
    <span>@WebUtility.HtmlDecode(estimate)</span>
    if (date.HasValue)
    {
    <span>, updated: @date.Value.ToString("dd/MM/yyyy")</span>
    }
    <span>(average: £@average)</span>
}

@helper GetMortgage()
{
    <span>£@Model.ExperianMortgage.ToString("N0")</span>
    if (Model.ExperianMortgageCount > 0)
    {
    <span>(@Model.ExperianMortgageCount)</span>
    } 
}

@AddDirectorInfoTemplate.Render(this, Url.Action("AddDirector", "CrossCheck", new { Area = "Underwriter" }))

<script id="address-popup-template" type="text/template">
    @{Html.RenderPartial("~/Areas/Customer/Views/Shared/_AddressPopupTemplate.cshtml");}
</script>

<script id="address-template" type="text/template">
    @{Html.RenderPartial("~/Areas/Customer/Views/Shared/_AddressTemplate.cshtml");}
</script>

@helper LandRegistryRes(LandRegistryLib.LandRegistryResModel lr)
{
    <div class="tabbable">
        @if (lr == null)
        {
            <h3>Error parsing the data</h3>
        }
        else if (lr.Rejection != null)
        {
            <h3>Rejection: @lr.Rejection.Reason
                <br />
                @lr.Rejection.OtherDescription</h3>
        }
        else if (lr.Acknowledgement != null)
        {
            <h3>Acknowledgment: <b>tell developer about it!!!</b><br />
                @lr.Acknowledgement.Description%> @lr.Acknowledgement.PollDate</h3>
        }
        else
        {

            <div class="tab-content">
                <span>Title Number: @lr.TitleNumber</span>
            </div>

            <div class="tab-content">
                @if (lr.PropertyAddresses.Count == 1)
                {
                    <div>Property Address: @lr.PropertyAddresses[0].Lines @lr.PropertyAddresses[0].PostCode</div>
                }
                else
                {
                    <table class="table centered squeezed">
                        <thead class="box">
                            <tr class="box-title">
                                <td colspan="2">Property Address</td>
                            </tr>
                            <tr class="box-title">
                                <td>Address</td>
                                <td>Postcode</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var a in lr.PropertyAddresses)
                            {
                                <tr>
                                    <td class="narrow-as-possible">@a.Lines</td>
                                    <td>@a.PostCode</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

            <div class="tab-content">
                @if (lr.PricePaidInfills != null && lr.PricePaidInfills.Count > 0)
                {
                    <table class="table centered squeezed">
                        <thead class="box">
                            <tr class="box-title">
                                <td colspan="2">Price Paid</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in lr.PricePaidInfills)
                            {
                                <tr>
                                    <td class="narrow-as-possible">@p.Key</td>
                                    <td>@p.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div><span>No price paid specified.</span></div>
                }
            </div>

            <div class="tab-content">
                <table class="table centered squeezed">
                    <thead class="box">
                        <tr class="box-title">
                            <td>Proprietorship</td>
                            @if (lr.Proprietorship.CurrentProprietorshipDate.HasValue)
                            {
                                <td>Current Proprietorship Date: @lr.Proprietorship.CurrentProprietorshipDate.Value.ToString("dd/MM/yyyy")</td>
                                <td colspan="3"></td>
                            }
                            else
                            {
                                <td colspan="4"></td>
                            }
                            
                        </tr>
                        <tr class="box-title">
                            <td>Type</td>
                            <td>Party Type</td>
                            <td>Private Individual Name</td>
                            <td>Company Name / Registration Number</td>
                            <td>Proprietorship Addresses</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in lr.Proprietorship.ProprietorshipParties)
                        {
                            <tr>
                                <td>@p.ProprietorshipType</td>
                                <td>@p.ProprietorshipPartyType</td>
                                <td>@p.PrivateIndividualForename @p.PrivateIndividualSurname</td>
                                <td>@p.CompanyName @p.CompanyRegistrationNumber</td>
                                <td>
                                    <table class="table centered squeezed">
                                        <tbody>
                                            @foreach (var a in p.ProprietorshipAddresses)
                                            {
                                                <tr>
                                                    <td>@a.Lines</td>
                                                    <td>@a.PostCode</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="tab-content">
                @if (lr.Charges != null && lr.Charges.Count > 0)
                {
                    <table class="table centered squeezed">
                        <thead class="box">
                            <tr class="box-title">
                                <td colspan="6">Charges</td>
                            </tr>
                            <tr class="box-title">
                                <td>Date</td>
                                <td>Entry Text</td>
                                <td>Proprietorship</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var c in lr.Charges)
                            {
                                <tr>
                                    <td>@c.ChargeDate.ToString("dd/MM/yyyy")</td>
                                    <td>@c.Description</td>
                                    <td>
                                        <table class="table centered squeezed">
                                            <thead class="box">
                                                <tr class="box-title">
                                                    <td>Type</td>
                                                    <td>Party Type</td>
                                                    <td>Name</td>
                                                    <td>Proprietorship Addresses</td>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var p in c.Proprietorship.ProprietorshipParties)
                                                {
                                                    <tr>
                                                        <td>@p.ProprietorshipType</td>
                                                        <td>@p.ProprietorshipPartyType</td>
                                                        <td>@p.CompanyName@p.PrivateIndividualForename @p.PrivateIndividualSurname</td>
                                                        <td>
                                                            <table class="table centered squeezed">
                                                                <tbody>
                                                                    @foreach (var a in p.ProprietorshipAddresses)
                                                                    {
                                                                        <tr>
                                                                            <td>@a.Lines</td>
                                                                            <td>@a.PostCode</td>
                                                                        </tr>
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <span>No charges specified</span>
                }
            </div>

            <div class="tab-content">
                @if (lr.Restrictions != null && lr.Restrictions.Count > 0)
                {
                    <table class="table centered squeezed">
                        <thead class="box">
                            <tr class="box-title">
                                <td colspan="6">Restrictions</td>
                            </tr>
                            <tr class="box-title">
                                <td>Entry Num</td>
                                <td>Entry Text</td>
                                <td>Type</td>
                                <td>SubRegister Code</td>
                                <td>Schedule Code</td>
                                <td>In fills</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var r in lr.Restrictions)
                            {
                                <tr>
                                    <td>@r.EntryNumber</td>
                                    <td>@r.EntryText</td>
                                    <td>@r.Type</td>
                                    <td>@r.SubRegisterCode</td>
                                    <td>@r.ScheduleCode</td>
                                    <td>
                                        <table class="table centered squeezed">
                                            <tbody>
                                                @foreach (var i in r.Infills)
                                                {
                                                    <tr>
                                                        <td>@i.Key</td>
                                                        <td>@i.Value</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <span>No restrictions specified</span>
                }
            </div>

            <div class="tab-content">
                <table class="table centered squeezed">
                    <thead class="box">
                        <tr class="box-title">
                            <td>Indicators</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var i in lr.Indicators)
                        {
                            <tr>
                                <td>@i</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}
