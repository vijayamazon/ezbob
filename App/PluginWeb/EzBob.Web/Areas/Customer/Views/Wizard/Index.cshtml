@using System.Globalization
@using ConfigManager
@using EZBob.DatabaseLib
@using EzBob.CommonLib
@using EzBob.Web.Infrastructure
@using EZBob.DatabaseLib.Model.Database
@using StructureMap
@model EzBob.Web.Models.WizardModel
@{
	UiCustomerOrigin.Set(ViewBag, Model.WhiteLabel == null ? null : Model.WhiteLabel.Phone);

    ViewBag.Title = "Create an  " + ViewBag.CustomerOrigin.Name + "  account";
	ViewBag.WhiteLabel = Model.WhiteLabel == null ? null : Model.WhiteLabel.Name;
	ViewBag.FooterText = Model.WhiteLabel == null ? null : Model.WhiteLabel.FooterText;
    var customer = Model.Customer;
    customer.IsProfile = false;
    var oDBHelper = ObjectFactory.GetInstance<IDatabaseDataHelper>() as DatabaseDataHelper;

	bool bAllowFinishOnlineWizardWithoutMarketplaces = CurrentValues.Instance.AllowFinishOnlineWizardWithoutMarketplaces;
	bool bAllowFinishOfflineWizardWithoutMarketplaces = CurrentValues.Instance.AllowFinishOfflineWizardWithoutMarketplaces;
}

@section head{
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
}

@section css{
@if (ViewBag.CustomerOrigin.GetOrigin() != CustomerOriginEnum.everline)
{
    @BundleHelper.RenderWizardCss()
}
 

	@if (Model.WhiteLabel != null) {
		<style>
			.newlogo {
				background-image:url(data:@Model.WhiteLabel.LogoImageType;base64,@Model.WhiteLabel.Logo);
				background-repeat: no-repeat;
				background-size: contain;
				width: @Html.Raw(Model.WhiteLabel.LogoWidthPx.ToString() + "px");
				height: @Html.Raw(Model.WhiteLabel.LogoHeightPx.ToString() + "px");
			}

			.header-logo,
			.header-bg-strip {
				background: @Model.WhiteLabel.LeadingColor;
			}
			.login_btn {
				display: none;
			}
			.lpchat-container {
				display: none !important;
			}
		</style>
	}
}

<div class="row-fluid wizard-wrapper">
    <div id="wizard"></div>
</div>

<div style="display: none;" class="hide"
	id="allowFinishWizardWithoutMarketplaces"
	data-online="@bAllowFinishOnlineWizardWithoutMarketplaces"
	data-offline="@bAllowFinishOfflineWizardWithoutMarketplaces"
></div>

<div style="display: none;" class="hide" id="wizard-step-sequence">@oDBHelper.WizardStepSequence</div>

@section Js{
    @{Html.RenderPartial("_Wizard", new ViewDataDictionary(ViewData));}
    @{Html.RenderPartial("_SignUpTemplate");}
	@{Html.RenderPartial("_PersonalInfoTemplate");}
    @{Html.RenderPartial("_CompanyDetails");}
    @{Html.RenderPartial("StoreInfoMain");}
    @{Html.RenderPartial("StoreButton");}
    @{Html.RenderPartial("AmazonStoreInfo");}
    @{Html.RenderPartial("Shops/EKMAccoutInfoTemplate");}
    @{Html.RenderPartial("Shops/PayPointAccoutInfoTemplate");}
    @{Html.RenderPartial("Shops/YodleeAccoutInfoTemplate");}
    @{Html.RenderPartial("Shops/CGAccountInfoTemplate");}
    @{Html.RenderPartial("Shops/HMRCAccountInfoTemplate");}
    @{Html.RenderPartial("Shops/CompanyFilesAccountInfoTemplate");}
    @BundleHelper.RenderWizardJs()
    <script type="text/javascript">
        EzBob.Config.SessionTimeout = @CurrentValues.Instance.SessionTimeout.Value;

        EzBob.Config.CaptchaMode = '@ViewData["CaptchaMode"]';

        EzBob.Config.MarketPlaces = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewData["MarketPlaces"]));
        EzBob.Config.MarketPlaceGroups = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewData["MarketPlaceGroups"]));

        SetCaptchaMode();

        EzBob.Config.WizardTopNaviagtionEnabled = @CurrentValues.Instance.WizardTopNaviagtionEnabled.Value.ToLower(CultureInfo.InvariantCulture);

        EzBob.Config.TargetsEnabled = @ViewData["TargetsEnabled"].ToString().ToLower(CultureInfo.InvariantCulture);

        EzBob.Config.TargetsEnabledEntrepreneur = @ViewData["TargetsEnabledEntrepreneur"].ToString().ToLower(CultureInfo.InvariantCulture);

        EzBob.Config.PayPalEnabled = @CurrentValues.Instance.PayPalEnabled.Value.ToLower(CultureInfo.InvariantCulture);
        EzBob.Config.PasswordPolicyType = '@CurrentValues.Instance.PasswordPolicyType.Value.ToLower(CultureInfo.InvariantCulture)';
		@{
			OneUploadLimitation oHmrcOul = CurrentValues.Instance.GetUploadLimitations("HmrcController", "SaveFile");
			OneUploadLimitation oComanyFilesOul = CurrentValues.Instance.GetUploadLimitations("CompanyFilesMarketPlaces", "UploadedFiles");
		}

		EzBob.Config.HmrcMaxFileSize = +(@oHmrcOul.FileSize / 1048576.0).toFixed(2);
		EzBob.Config.HmrcAcceptedFiles = '@oHmrcOul.AcceptedFiles';

		EzBob.Config.CompanyFilesMaxFileSize = +(@oComanyFilesOul.FileSize / 1048576.0).toFixed(2);
		EzBob.Config.CompanyFilesAcceptedFiles = '@oComanyFilesOul.AcceptedFiles';

		EzBob.Config.WhiteLabel = '@Model.WhiteLabel';
    	
    	$(function() {
            var options = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(customer));
            options.el = $('#wizard');

            var customer = new EzBob.CustomerModel(options);
            options.customer = customer;

            var signupWizard = new EzBob.WizardView(options);
            signupWizard.render();

            var strengthPasswordModel = new EzBob.StrengthPassword();
            var strengthPasswordView = new EzBob.StrengthPasswordView({ model: strengthPasswordModel, el: $('#strength-password-view') });
            strengthPasswordView.render();
        });
    </script>
}