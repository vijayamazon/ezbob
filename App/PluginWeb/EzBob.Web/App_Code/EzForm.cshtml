@using System.Web.Mvc
@*Renders select*@
@helper Select(string id, string caption, IEnumerable<string> values, string css = "", string placeHolder = "")
{
      <div class="control-group">
          <label class="control-label" for="@id">@caption</label>
          <div class="controls">
              <select id="@id" name="@id" class="@css" data-placeholder="@placeHolder" >
                  <option>-</option>
                  @foreach (var v in values)
                  {
                      <option value="@v">@v</option>
                  }
              </select>
          </div>
      </div>
}

@helper SelectInline(string id, string caption, IEnumerable<string> values, string css)
{
    <label class="control-label" for="@id">@caption</label>
    <select id="@id" class="@css">
        @foreach (var v in values)
        {
            <option>@v</option>
        }
    </select>
}

@helper CheckBox(string id, string caption)
{
    <div class="control-group">      
        <div class="controls">
            <label for="@id" class="editor-label-with-checkbox checkbox"><input id="@id" name="@id" type="checkbox" value="true"/>@caption</label>
        </div>
    </div>
}

@helper InputText(string id, string caption, string value, string cls = "", bool isDisabled = false, int size = 0)
{
    
    var identificator = new HtmlString(id);
    var val = new HtmlString(value);
    <div class="control-group">
        <label for="@identificator" class="control-label">@caption</label>
        <div class="controls">
            <input 
                id="@identificator" 
                name="@identificator" 
                type="text" 
                value="@val" 
                class="@cls" 
                @if (isDisabled)
                {
                    @:disabled="disabled"
                } 
                @if (size > 0)
                {
                    @:size = "@size"
                } 
                />
        </div>
    </div>
}

@helper Password(string id, string caption, string value, string cls = "", bool isDisabled = false)
{
    
    var identificator = new HtmlString(id);
    var val = new HtmlString(value);
    <div class="control-group">
        <label for="@identificator" class="control-label">@caption</label>
        <div class="controls">
            <input 
                id="@identificator" 
                name="@identificator" 
                type="password" 
                value="@val" 
                class="@cls" 
                @if (isDisabled)
                {
                    @:disabled="disabled"
                }  
            />
        </div>
    </div>
}

@helper InputTextCash(string id, string caption, string value, string cls = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption (£)</label>
        <div class="controls cashControlls">
            <input id="@id" name="@id" type="text" value="@value" class="@cls cashInput" />
        </div>
    </div>
}

@helper InputTextWithHelp(System.Web.Mvc.HtmlHelper page, string id, string caption, string value, string help, string cls = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@page.Raw(caption) </label>
        <div class="controls cashControlls ">           
            <div>
                <input id="@id" name="@id" type="text" value="@value" class="@cls cashInput" data-content="We require 3 years of residence addresses as part of your credit profile analysis." rel="popover" />
                <img class="help-btn" style="float: right;margin-right: 10px;" width="25" height="25" src="@UrlHelper.GenerateContentUrl("~/Content/img/question.png", page.ViewContext.HttpContext)" rel="popover" data-content="@help" alt="" />
            </div>
        </div>
    </div>
}

@helper InputTextReadOnly(string id, string caption, string value, string cls = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <input id="@id" readonly="readonly" name="@id" type="text" value="@value" class="@cls" />
        </div>
    </div>
}

@helper InputTextSmallReadOnly(string id, string caption, string value)
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <input class="input-small" id="@id" name="@id" readonly="readonly" type="text" value="@value" />
        </div>
    </div>
}

@helper InputTextSmall(string id, string caption, string value, string divClass = "")
{
    <div class="control-group @divClass">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <input class="input-small" id="@id" name="@id"  type="text" value="@value" />
        </div>
    </div>
}

@helper TextArea(string id, string caption, string value, string css = "span9")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <textarea id="@id" name="@id" rows="10" cols="300" class="@css" style=" resize: none; ">@value</textarea>
        </div>
    </div>
}

@helper TextAreaSmall(string id, string caption, string value, string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <textarea id="@id" name="@id" rows="5" cols="10" class="@css" style=" resize: none; ">@value</textarea>
        </div>
    </div>
}

@helper TextAreaReadOnly(string id, string caption, string value, string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <textarea id="@id" name="@id" rows="10" cols="28" readonly="readonly" class="@css">@value</textarea>
        </div>
    </div>
}

@helper DatePicker(string id, string date, string css = "span2")
{
            <div class="input-append date dp-inline" id="@id" data-date="@date" data-date-format="dd-mm-yyyy">
                <input class="@css datepicker" size="16" type="text" value="@date" name="@id">
                <span class="add-on"><i class="icon-th"></i></span>
            </div>
}

@helper DatePickerInline(string id, string caption, string date, string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            @DatePicker(id, date, css)
        </div>
    </div>
}

@helper Cell(params string[] arguments)
{
    <tr>
        @foreach (var s in arguments)
        {
            <td>@s</td>    
        }
    </tr>
}

@helper AddressInput(string name, string title, string css = "")
{
    var identificator = new HtmlString(name);

    <div class="control-group">
        <label for="@identificator" class="control-label">@title <span class="required">*</span></label>
        <div class="controls">
            <div id="@identificator" class="address-field @css"></div>
        </div>
    </div>
}

@helper DateInput(string name, string title, bool required = true, DateTime[] minMaxDefaultDate = null)
{
    var month = new[] { "Jan.", "Feb.", "Mar.", "Apr.", "May.", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec." };
    var validationClass = required ? "requiredDate" : "";
    var identificator = new HtmlString(name);

    <div class="control-group" >
        @if (required)
        {
            <label for="day" class="control-label">@title <span class="required">*</span></label>
        }
        else
        {
            <label for="day" class="control-label">@title</label>
        }
        <div class="controls ezDateTime">
            <select name="day" style="width: 113px;height:30px" >
                <option value="-">-</option>
                @{ for (var i = 1; i <= 31; i++)
                   {
                       <option @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Day == i)
                               {
                                   @:selected="selected"
                               }
                        value="@i">@i</option>
                   } }
            </select>

            <select name="month" style="width: 113px;height:30px" >
                <option value="-">-</option>
                @{ for (var i = 1; i <= 12; i++)
                   {
                       <option @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Month == i)
                               {
                                   @:selected="selected"
                               }
                           value="@i"> @month[i - 1]</option>
                   } 
                 }
            </select>

            <select name="year" style="width: 113px;height:30px">
                <option value="-">-</option>
                @{
                    var minYear = (minMaxDefaultDate == null) ? 1900 : minMaxDefaultDate[0].Year;
                    var maxYear = (minMaxDefaultDate == null) ? DateTime.Now.Year - 18 : minMaxDefaultDate[1].Year;
                    for (var i = minYear; i <= maxYear; i++)
                    {
                        <option @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Year == i)
                                {
                                    @:selected="selected"
                                }
                            value="@i">@i</option>
                    }
                }
            </select>
            
            <input type="hidden" id='@identificator' class="@identificator @validationClass required" name="@identificator"/>
        </div>
        
    </div>
}

@helper SelectAdvanced(string id, string caption, Dictionary<string, string> values, string placeHolder = "", string css = "", int defVal = 0, string defStrVal = "")
{
    var identificator = new HtmlString(id);
    var i = 0;
    <div class="control-group">
        <label class="control-label" for="@identificator">@caption</label>
        <div class="controls">
            @defStrVal
            <select id="@identificator" name="@identificator" class="@css" data-placeholder="@placeHolder">
                @foreach (var v in values)
                {
                    if (i == defVal || v.Key == defStrVal)
                    {
                        <option selected="selected" value="@v.Key">@v.Value</option>
                    }
                    else
                    {
                        <option value="@v.Key">@v.Value</option>
                    }
                    i++;
                }
            </select>
        </div>
    </div>
}

@helper Captcha(string captchaType, string cls = "")
{     
    <div class="control-group">
        <div class="controls">
            <div class="captcha">
                <div>
                    <p class="captcha-head">Please enter the following characters in the field below <span class="required">*</span></p>
                </div>
                <div id="captcha">
                </div>
            </div>
        </div>
    </div>
}

@helper Button(string id, string labelText, string buttonText, string cls = "", string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@labelText</label>
        <div class="controls">
            <input type="button" id="@id" class="@cls btn input-medium" style="@css" value="@buttonText"/>
        </div>
    </div>
}
@helper RawHeaderCell(params string[] arguments)
{
    <tr>
        <th colspan="@arguments.Length">@arguments[0]</th>
    </tr>
}

@helper RawCell(params string[] arguments)
{
    <tr>
        @foreach (var s in arguments)
        {
            <td>@(new HtmlString(s))</td>    
        }
    </tr>
}

@helper RawCellBold(params string[] arguments)
{
    <tr>
        @foreach (var s in arguments)
        {
            <td><b>@(new HtmlString(s))</b></td>
        }
    </tr>
}