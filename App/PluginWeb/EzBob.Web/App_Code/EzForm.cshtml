@using System
@using System.Collections.Generic
@using System.Web
@using System.Web.WebPages
@using ConfigManager
@*Renders select*@
@helper Select(string id, string caption, IEnumerable<string> values, string css = "", string placeHolder = "", string divClass = "")
{
    <div class="form-group @divClass">
        <label class="control-label" for="@id">@caption</label>
        <div class="controls">
            <select id="@id" name="@id" class="selectheight @css" data-placeholder="@placeHolder" >
                <option>-</option>
                @foreach (var v in values)
                {
                    <option value="@v">@v</option>
                }
            </select>
        </div>
    </div>
}

@helper SelectInline(string id, string caption, IEnumerable<string> values, string css)
{
    <label class="control-label" for="@id">@caption</label>
    <select id="@id" class="@css">
        @foreach (var v in values)
        {
            <option>@v</option>
        }
    </select>
}

@helper CheckBox(string id, string caption)
{
    <div class="control-group">
        <div class="controls">
            <label for="@id" class="editor-label-with-checkbox checkbox">
                <input id="@id" name="@id" type="checkbox" value="true"/>@caption</label>
        </div>
    </div>
}

@helper InputText(string id, string caption, string value = "", string type = "text", string cls = "", bool isDisabled = false, bool isRequired = false, bool statusIcon = false, int tabIndex = 0, int maxLength = 0, string uiEventControlID = "")
{
    var identificator = new HtmlString(id);
    var val = new HtmlString(value);

    
    <div class="form_field_container control-group">
        <div class="controls">
            <label class="attardi-input">
                <span>@caption</span>
                <input 
                    type="@type" 
                    name="@identificator" 
                    id="@identificator" 
                    class="@cls" 
                    value="@val"
                    @if (isDisabled)
                    { 
                        @:disabled="disabled"
                    } 
                    @if (tabIndex > 0)
                    {
                        @:tabindex="@tabIndex"
                    }
                    @if (maxLength > 0)
                    {
                        @:maxlength="@maxLength"
                    }
                    @if (!string.IsNullOrWhiteSpace(uiEventControlID))
                    {
                        @:ui-event-control-id="@uiEventControlID"
                    }
                    />
                @if (statusIcon)
                {
                    var sId = identificator + "Image";
                    var sReq = isRequired ? "required" : "";
                    <img id="@sId" class="field_status @sReq"/>
                }
                else if (isRequired)
                {
                    <span class="required">*</span>
                }
            </label>
        </div>
    </div>
}

@helper InputTextUnderwriter(WebPageBase page, string id, string caption, string value, string cls = "", bool isDisabled = false)
{
	var identificator = new HtmlString(id);

	var sInput = string.Format(
		"<input id=\"{0}\" name=\"{0}\" type=text value=\"{1}\" class=\"{2} form-control\" {3}>",
		id, value, cls, isDisabled ? "disabled=disabled" : ""
	);

	<div class="form-group">
		<label for="@identificator" class="control-label">@(new HtmlString(caption))</label>
		<div class="controls">@{ page.WriteLiteral(sInput); }</div>
	</div>
}

@helper Password(string id, string caption, string value = "", string cls = "", bool isDisabled = false, bool isRequired = true, bool statusIcon = false, string uiEventControlID = "")
{
    var identificator = new HtmlString(id);
    var val = new HtmlString(value);
    
    <div class="form_field_container control-group">
        <div class="controls">
            <label class="attardi-input">
                <span>@caption</span>
                <input 
                    type="password" 
                    name="@identificator" 
                    id="@identificator" 
                    class="@cls" 
                    value="@val"
                    @if (isDisabled)
                    { 
                        @:disabled="disabled"
                    } 
                    @if (!string.IsNullOrWhiteSpace(uiEventControlID))
                    {
                        @:ui-event-control-id="@uiEventControlID"
                    }
                    />
                @if (statusIcon)
                {
                    var sId = identificator + "Image";
                    var sReq = isRequired ? "required" : "";
                    <img id="@sId" class="field_status @sReq"/>
                }
                else if (isRequired)
                {
                    <span class="required">*</span>
                }
            </label>
        </div>
    </div>
}

@helper InputTextCash(string id, string caption, string value, string cls = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption (£)</label>
        <div class="controls cashControlls">
            <input id="@id" name="@id" type="text" value="@value" class="@cls cashInput" />
        </div>
    </div>
}

@helper InputTextReadOnly(string id, string caption, string value, string cls = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <input id="@id" readonly="readonly" name="@id" type="text" value="@value" class="@cls" />
        </div>
    </div>
}

@helper InputTextSmallReadOnly(string id, string caption, string value)
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <input class="input-small" id="@id" name="@id" readonly="readonly" type="text" value="@value" />
        </div>
    </div>
}

@helper InputTextSmall(string id, string caption, string value, string divClass = "")
{
    <div class="control-group @divClass">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <input class="input-small" id="@id" name="@id"  type="text" value="@value" />
        </div>
    </div>
}

@helper TextArea(string id, string caption, string value, string css = "span9")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <textarea id="@id" name="@id" rows="10" cols="300" class="@css" style="-moz-resize: none; -ms-resize: none; -o-resize: none; resize: none;">@value</textarea>
        </div>
    </div>
}

@helper TextAreaSmall(string id, string caption, string value, string css = "")
{
    <div class="form-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <textarea id="@id" name="@id" rows="5" cols="10" class="@css" style="-moz-resize: none; -ms-resize: none; -o-resize: none; resize: none;" >@value</textarea>
        </div>
    </div>
}

@helper TextAreaReadOnly(string id, string caption, string value, string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            <textarea id="@id" name="@id" rows="10" cols="28" readonly="readonly" class="@css">@value</textarea>
        </div>
    </div>
}

@helper DatePicker(string id, string date, string css = "span2")
{
    <div class="input-append date dp-inline" id="@id" data-date="@date" data-date-format="dd-mm-yyyy">
        <input class="@css datepicker" size="16" type="text" value="@date" name="@id">
        <span class="add-on"><i class="icon-white icon-th"></i></span>
    </div>
}

@helper DatePickerInline(string id, string caption, string date, string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@caption</label>
        <div class="controls">
            @DatePicker(id, date, css)
        </div>
    </div>
}

@helper Cell(params string[] arguments)
{
    <tr>
        @foreach (var s in arguments)
        {
            <td>@s</td>	
        }
    </tr>
}

@helper AddressInput(WebPageBase page, string name, string title, string sUiEventControlID, string css = "")
{
    sUiEventControlID = string.IsNullOrWhiteSpace(sUiEventControlID) ? string.Empty : sUiEventControlID;

    var identificator = new HtmlString(name);

    HtmlString oByPostcode = null;
    HtmlString oById = null;

    if ((CurrentValues.Instance.DummyPostcodeSearchResult.Value != string.Empty) && (CurrentValues.Instance.DummyAddressSearchResult.Value != string.Empty))
    {
        oByPostcode = new HtmlString(CurrentValues.Instance.DummyPostcodeSearchResult.Value);
        oById = new HtmlString(CurrentValues.Instance.DummyAddressSearchResult.Value);
    } // if

    var input = string.Format("<div id={0} class='address-field' data-ui-event-control-id-prefix='{1}'></div>", identificator, sUiEventControlID);
    <div class="control-group form_field_container @css">
        <label class="control-label addressCaption">@title</label>
        <div class="controls">
            <label class="control-label">
                @{ page.WriteLiteral(input);}
            </label>
        </div>
    </div>

    if (oByPostcode != null)
    { // !!! intentional inline style in the following line
    <div style="display: none;" class="dummy_address_search_result">
        <div class="by_postcode">@oByPostcode</div>
        <div class="by_id">@oById</div>
    </div>
    }
}

@helper DateInput(WebPageBase page, string name, string title, bool required = true, DateTime[] minMaxDefaultDate = null, bool statusIcon = false, string css = "", string uiEventControlID = "", string hiddenFieldAuxClass = "", string labelCss = "")
{
    var month = new[] { "Jan.", "Feb.", "Mar.", "Apr.", "May.", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec." };
    var validationClass = required ? "requiredDate" : "";
    var identificator = new HtmlString(name);

    if (string.IsNullOrWhiteSpace(hiddenFieldAuxClass))
    {
        hiddenFieldAuxClass = string.Empty;
    }

    var dayIdentificator = new HtmlString(identificator + "Day");
    var monthIdentificator = new HtmlString(identificator + "Month");
    var yearIdentificator = new HtmlString(identificator + "Year");
    
    var sDayUiEventControlID = "";
    var sMonthUiEventControlID = "";
    var sYearUiEventControlID = "";
    
    if (!string.IsNullOrWhiteSpace(uiEventControlID))
    {
        sDayUiEventControlID = "ui-event-control-id=" + uiEventControlID + "_day";
        sMonthUiEventControlID = "ui-event-control-id=" + uiEventControlID + "_month";
        sYearUiEventControlID = "ui-event-control-id=" + uiEventControlID + "_year";
    }

    var daySelect = string.Format("<select id='{0}' name='day' class='selectheight form_field form_field_date {1}' empty_value='-' {2}>", dayIdentificator, css, sDayUiEventControlID);
    var monthSelect = string.Format("<select id='{0}' name='month' class='selectheight form_field form_field_date {1}' empty_value='-' {2}>", monthIdentificator, css, sMonthUiEventControlID);
    var yearSelect = string.Format("<select id='{0}' name='year' class='selectheight form_field form_field_date {1}' empty_value='-' {2}>", yearIdentificator, css, sYearUiEventControlID);
    const string endSelect = "</select>";
    var hidden = string.Format("<input id='{0}' class='{0} {1} hidden-field {2} ' style='display: none !important' name='{0}'/>", identificator, validationClass, hiddenFieldAuxClass);
    
    <div class="control-group form_field_container">
        <div class="fs16">@title</div>
        <div class="controls ezDateTime">
            <label class="attardi-input @labelCss">
                <span>Day</span>
                @{ page.WriteLiteral(daySelect); }
                   
                <option value="-"></option>
                @for (var i = 1; i <= 31; i++)
                {
                    <option
                        @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Day == i)
                        {
                            @:selected="selected"
                        }
                        value="@i"
                        >@i</option>
                }
                 
                @{ page.WriteLiteral(endSelect); }
                 
            </label>

            <label class="attardi-input @labelCss">
                <span>Month</span>
                @{ page.WriteLiteral(monthSelect); }
                <option value="-"></option>
                @for (var i = 1; i <= 12; i++)
                {
                    <option
                        @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Month == i)
                        {
                            @:selected="selected"
                        }
                        value="@i"
                        >@month[i - 1]</option>
                }
                @{ page.WriteLiteral(endSelect); }
            </label>

            <label class="attardi-input @labelCss">
                <span>Year</span>
                @{ page.WriteLiteral(yearSelect); }
                <option value="-"></option>
                @{
                    var minYear = (minMaxDefaultDate == null) ? 1900 : minMaxDefaultDate[0].Year;
                    var maxYear = (minMaxDefaultDate == null) ? DateTime.Now.Year - 18 : minMaxDefaultDate[1].Year;
                    for (var i = maxYear; i >= minYear; i--)
                    {
                        <option
                            @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Year == i)
                            {
                                @:selected="selected"
                            }
                            value="@i"
                            >@i</option>
                    }
                }
                @{ page.WriteLiteral(endSelect); }
            </label>
            
            @{ page.WriteLiteral(hidden); }

            @if (statusIcon)
            {
                var sReq = required ? "required" : "";
                var sId = new HtmlString(identificator + "Image");
                page.WriteLiteral(string.Format("<img id='{0}' class='field_status {1}'/>", sId, sReq));
                
            }
        </div>
    </div>
}

@helper DateInputUnderwriter(string name, string title, bool required = true, DateTime[] minMaxDefaultDate = null)
{
    var month = new[] { "Jan.", "Feb.", "Mar.", "Apr.", "May.", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec." };
    var validationClass = required ? "requiredDate" : "";
    var identificator = new HtmlString(name);

    <div class="form-group">
        <label for="day" class="control-label">@title</label>
        <div class="controls ezDateTime">
            <select name="day" style="width: 33%;" class="form-control selectheight">
                <option value="-">-</option>
                @{ for (var i = 1; i <= 31; i++)
                   {
                    <option @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Day == i)
                            {
                                   @:selected="selected"
                               }
                        value="@i">@i</option>
                   } }
            </select>

            <select name="month" style="width: 32%;" class="form-control selectheight">
                <option value="-">-</option>
                @{ for (var i = 1; i <= 12; i++)
                   {
                    <option @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Month == i)
                            {
                                   @:selected="selected"
                               }
                           value="@i">@month[i - 1]</option>
                   } 
                }
            </select>

            <select name="year" style="width: 32%;" class="form-control selectheight">
                <option value="-">-</option>
                @{
                    var minYear = (minMaxDefaultDate == null) ? 1900 : minMaxDefaultDate[0].Year;
                    var maxYear = (minMaxDefaultDate == null) ? DateTime.Now.Year - 18 : minMaxDefaultDate[1].Year;
                    for (var i = minYear; i <= maxYear; i++)
                    {
                    <option @if (minMaxDefaultDate != null && minMaxDefaultDate[2].Year == i)
                            {
                                    @:selected="selected"
                                }
                            value="@i">@i</option>
                    }
                }
            </select>

            <input  id='@identificator' class="@identificator @validationClass  hidden-field required" name="@identificator"/>
        </div>

    </div>
}

@helper SelectAdvanced(string id, string caption, Dictionary<string, string> values, string placeHolder = "", string css = "", int defVal = 0, string defStrVal = "")
{
    var identificator = new HtmlString(id);
    var i = 0;
    <div class="control-group">
        <label class="control-label" for="@identificator">@caption</label>
        <div class="controls">
            @defStrVal
            <select id="@identificator" name="@identificator" class="@css" data-placeholder="@placeHolder">
                @foreach (var v in values)
                {
                    if (i == defVal || v.Key == defStrVal)
                    {
                    <option selected="selected" value="@v.Key">@v.Value</option>
                    }
                    else
                    {
                    <option value="@v.Key">@v.Value</option>
                    }
                    i++;
                }
            </select>
        </div>
    </div>
}

@helper SelectSimple(string id, Dictionary<string, string> values, string placeHolder = "", string css = "", int defVal = 0, string defStrVal = "")
{
    var identificator = new HtmlString(id);
    var i = 0;
    <select id="@identificator" name="@identificator" class="@css" data-placeholder="@placeHolder">
        @foreach (var v in values)
        {
            if (i == defVal || v.Key == defStrVal)
            {
            <option selected="selected" value="@v.Key">@v.Value</option>
            }
            else
            {
            <option value="@v.Key">@v.Value</option>
            }
            i++;
        }
    </select>
}

@helper Captcha(string captchaType, string cls = "", string sId = "captcha")
{	 
    <div class="control-group">
        <div class="captcha">
            <div id="@sId">
            </div>
        </div>
    </div>
}

@helper Button(string id, string labelText, string buttonText, string cls = "", string css = "")
{
    <div class="control-group">
        <label for="@id" class="control-label">@labelText</label>
        <div class="controls">
            <input type="button" id="@id" class="@cls btn input-medium" style="@css" value="@buttonText"/>
        </div>
    </div>
}
@helper RawHeaderCell(params string[] arguments)
{
    <tr class="box-title">
        <th colspan="@arguments.Length">@arguments[0]</th>
    </tr>
}

@helper RawCell(params string[] arguments)
{
    <tr>
        @foreach (var s in arguments)
        {
            <td>@(new HtmlString(s))</td>	
        }
    </tr>
}

@helper RawCellBold(params string[] arguments)
{
    <tr class="box-title">
        @foreach (var s in arguments)
        {
            <td><b>@(new HtmlString(s))</b></td>
        }
    </tr>
}
