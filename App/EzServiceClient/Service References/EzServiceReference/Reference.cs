//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceClientProxy.EzServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionMetaData", Namespace="http://schemas.datacontract.org/2004/07/EzService", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ActionMetaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSynchronousField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.ActionStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActionID {
            get {
                return this.ActionIDField;
            }
            set {
                if ((this.ActionIDField.Equals(value) != true)) {
                    this.ActionIDField = value;
                    this.RaisePropertyChanged("ActionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSynchronous {
            get {
                return this.IsSynchronousField;
            }
            set {
                if ((this.IsSynchronousField.Equals(value) != true)) {
                    this.IsSynchronousField = value;
                    this.RaisePropertyChanged("IsSynchronous");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.ActionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionStatus", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    public enum ActionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminated = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Launched = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.StringActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BoolActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.IntActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.NLLongActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ReschedulingActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.PricingModelModelActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.VatReturnDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.UserLoginActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.SetPasswordActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.QuickOfferActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LotteryActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AlibabaSaleContractActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LoanCommissionDefaultsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.StringStringMapActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.MultiBrandLoanSummaryActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.MessagesListActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.MarketplacesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianLtdActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CrmLookupsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AvailableFundsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ConfigTableActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.DecimalActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.DateTimeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.WizardConfigsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.EsignatureFileActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.EsignatureListActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.NLModelActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ListNewLoanActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.PricingScenarioNameListActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.SalesForceActivityActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.SecurityUserActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LandRegistryActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ApplicationInfoResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.DecisionHistoryResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.SlidersDataActionResults))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CollectionSnailMailActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.InvestorActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AccountingDataResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ListInvestorsResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.TransactionsDataResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.SchedulerDataResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LogicalGlueResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LegalDocsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LegalDocActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.StringListActionResult))]
    public partial class ActionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.ActionMetaData MetaDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.ActionMetaData MetaData {
            get {
                return this.MetaDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetaDataField, value) != true)) {
                    this.MetaDataField = value;
                    this.RaisePropertyChanged("MetaData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomerFileContentsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomerFileContentsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Contents {
            get {
                return this.ContentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentsField, value) != true)) {
                    this.ContentsField = value;
                    this.RaisePropertyChanged("Contents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerLeadDetailsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerLeadDetailsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeadEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LeadIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeadEmail {
            get {
                return this.LeadEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.LeadEmailField, value) != true)) {
                    this.LeadEmailField = value;
                    this.RaisePropertyChanged("LeadEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeadID {
            get {
                return this.LeadIDField;
            }
            set {
                if ((this.LeadIDField.Equals(value) != true)) {
                    this.LeadIDField = value;
                    this.RaisePropertyChanged("LeadID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomerDetailsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomerDetailsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerCustomerDetails DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Esigner[] PotentialSignersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerCustomerDetails Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Esigner[] PotentialSigners {
            get {
                return this.PotentialSignersField;
            }
            set {
                if ((object.ReferenceEquals(this.PotentialSignersField, value) != true)) {
                    this.PotentialSignersField = value;
                    this.RaisePropertyChanged("PotentialSigners");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerLeadDetailsDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerLeadDetailsDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerLeadDataModel BrokerLeadDataModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerLeadDataModel BrokerLeadDataModel {
            get {
                return this.BrokerLeadDataModelField;
            }
            set {
                if ((object.ReferenceEquals(this.BrokerLeadDataModelField, value) != true)) {
                    this.BrokerLeadDataModelField = value;
                    this.RaisePropertyChanged("BrokerLeadDataModel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomerFilesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomerFilesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerCustomerFile[] FilesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerCustomerFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomersActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomersActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerCustomerEntry[] CustomersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerCustomerEntry[] Customers {
            get {
                return this.CustomersField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomersField, value) != true)) {
                    this.CustomersField = value;
                    this.RaisePropertyChanged("Customers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerPropertiesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerPropertiesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerProperties PropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerProperties Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerStaticDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerStaticDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CrmStaticModel CrmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.FileDescription[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPerNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPerPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TermsIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CrmStaticModel Crm {
            get {
                return this.CrmField;
            }
            set {
                if ((object.ReferenceEquals(this.CrmField, value) != true)) {
                    this.CrmField = value;
                    this.RaisePropertyChanged("Crm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.FileDescription[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPerNumber {
            get {
                return this.MaxPerNumberField;
            }
            set {
                if ((this.MaxPerNumberField.Equals(value) != true)) {
                    this.MaxPerNumberField = value;
                    this.RaisePropertyChanged("MaxPerNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPerPage {
            get {
                return this.MaxPerPageField;
            }
            set {
                if ((this.MaxPerPageField.Equals(value) != true)) {
                    this.MaxPerPageField = value;
                    this.RaisePropertyChanged("MaxPerPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Terms {
            get {
                return this.TermsField;
            }
            set {
                if ((object.ReferenceEquals(this.TermsField, value) != true)) {
                    this.TermsField = value;
                    this.RaisePropertyChanged("Terms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TermsID {
            get {
                return this.TermsIDField;
            }
            set {
                if ((this.TermsIDField.Equals(value) != true)) {
                    this.TermsIDField = value;
                    this.RaisePropertyChanged("TermsID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoolActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BoolActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class IntActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NLLongActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class NLLongActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReschedulingActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ReschedulingActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.NewLoan.ReschedulingResult ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.NewLoan.ReschedulingResult Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PricingModelModelActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class PricingModelModelActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.PricingModelModel ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.PricingModelModel Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VatReturnDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class VatReturnDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BankStatementDataModel BankStatementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BankStatementDataModel BankStatementAnnualizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.RtiTaxMonthRawData[] RtiTaxMonthRawDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.VatReturnSummary[] SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.VatReturnRawData[] VatReturnRawDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BankStatementDataModel BankStatement {
            get {
                return this.BankStatementField;
            }
            set {
                if ((object.ReferenceEquals(this.BankStatementField, value) != true)) {
                    this.BankStatementField = value;
                    this.RaisePropertyChanged("BankStatement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BankStatementDataModel BankStatementAnnualized {
            get {
                return this.BankStatementAnnualizedField;
            }
            set {
                if ((object.ReferenceEquals(this.BankStatementAnnualizedField, value) != true)) {
                    this.BankStatementAnnualizedField = value;
                    this.RaisePropertyChanged("BankStatementAnnualized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.RtiTaxMonthRawData[] RtiTaxMonthRawData {
            get {
                return this.RtiTaxMonthRawDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RtiTaxMonthRawDataField, value) != true)) {
                    this.RtiTaxMonthRawDataField = value;
                    this.RaisePropertyChanged("RtiTaxMonthRawData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.VatReturnSummary[] Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.VatReturnRawData[] VatReturnRawData {
            get {
                return this.VatReturnRawDataField;
            }
            set {
                if ((object.ReferenceEquals(this.VatReturnRawDataField, value) != true)) {
                    this.VatReturnRawDataField = value;
                    this.RaisePropertyChanged("VatReturnRawData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElapsedTimeInfoActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ElapsedTimeInfoActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Utils.ElapsedTimeInfo ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Utils.ElapsedTimeInfo Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class UserLoginActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RefNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RefNumber {
            get {
                return this.RefNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RefNumberField, value) != true)) {
                    this.RefNumberField = value;
                    this.RaisePropertyChanged("RefNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerDetailsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CustomerDetailsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CustomerDetails ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CustomerDetails Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetPasswordActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class SetPasswordActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBrokerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDisabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBroker {
            get {
                return this.IsBrokerField;
            }
            set {
                if ((this.IsBrokerField.Equals(value) != true)) {
                    this.IsBrokerField = value;
                    this.RaisePropertyChanged("IsBroker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDisabled {
            get {
                return this.IsDisabledField;
            }
            set {
                if ((this.IsDisabledField.Equals(value) != true)) {
                    this.IsDisabledField = value;
                    this.RaisePropertyChanged("IsDisabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailConfirmationTokenActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class EmailConfirmationTokenActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyStatusesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class PropertyStatusesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.PropertyStatusGroupModel[] GroupsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.PropertyStatusGroupModel[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuickOfferActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class QuickOfferActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.QuickOfferModel ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasValue {
            get {
                return this.HasValueField;
            }
            set {
                if ((this.HasValueField.Equals(value) != true)) {
                    this.HasValueField = value;
                    this.RaisePropertyChanged("HasValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.QuickOfferModel Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerManualAnnualizedRevenueActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CustomerManualAnnualizedRevenueActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CustomerManualAnnualizedRevenue ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CustomerManualAnnualizedRevenue Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LotteryActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class LotteryActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.LotteryResult ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.LotteryResult Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlibabaAvailableCreditActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AlibabaAvailableCreditActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.ExternalAPI.AlibabaAvailableCreditResult ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.ExternalAPI.AlibabaAvailableCreditResult Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlibabaSaleContractActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AlibabaSaleContractActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.ExternalAPI.AlibabaSaleContractResult ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.ExternalAPI.AlibabaSaleContractResult Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianTargetingActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianTargetingActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyInfo[] CompanyInfosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyInfo[] CompanyInfos {
            get {
                return this.CompanyInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyInfosField, value) != true)) {
                    this.CompanyInfosField = value;
                    this.RaisePropertyChanged("CompanyInfos");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoanCommissionDefaultsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class LoanCommissionDefaultsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BrokerCommissionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ManualSetupFeeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BrokerCommission {
            get {
                return this.BrokerCommissionField;
            }
            set {
                if ((this.BrokerCommissionField.Equals(value) != true)) {
                    this.BrokerCommissionField = value;
                    this.RaisePropertyChanged("BrokerCommission");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ManualSetupFee {
            get {
                return this.ManualSetupFeeField;
            }
            set {
                if ((this.ManualSetupFeeField.Equals(value) != true)) {
                    this.ManualSetupFeeField = value;
                    this.RaisePropertyChanged("ManualSetupFee");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringStringMapActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringStringMapActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> MapField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Map {
            get {
                return this.MapField;
            }
            set {
                if ((object.ReferenceEquals(this.MapField, value) != true)) {
                    this.MapField = value;
                    this.RaisePropertyChanged("Map");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiBrandLoanSummaryActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class MultiBrandLoanSummaryActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.MultiBrandLoanSummary SummaryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.MultiBrandLoanSummary Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessagesListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class MessagesListActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.MessagesModel[] MessagesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.MessagesModel[] Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketplacesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class MarketplacesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.MpModel MpModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.MpModel MpModel {
            get {
                return this.MpModelField;
            }
            set {
                if ((object.ReferenceEquals(this.MpModelField, value) != true)) {
                    this.MpModelField = value;
                    this.RaisePropertyChanged("MpModel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianLtdActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianLtdActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.CompaniesHouse.CompaniesHouseOfficerOrder CompaniesHouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.ScoreAtDate[] HistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Experian.ExperianLtd ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.CompaniesHouse.CompaniesHouseOfficerOrder CompaniesHouse {
            get {
                return this.CompaniesHouseField;
            }
            set {
                if ((object.ReferenceEquals(this.CompaniesHouseField, value) != true)) {
                    this.CompaniesHouseField = value;
                    this.RaisePropertyChanged("CompaniesHouse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.ScoreAtDate[] History {
            get {
                return this.HistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.HistoryField, value) != true)) {
                    this.HistoryField = value;
                    this.RaisePropertyChanged("History");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Experian.ExperianLtd Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CrmLookupsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CrmLookupsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.IdNameModel[] ActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.IdNameModel[] RanksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CrmStatusGroup[] StatusesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.IdNameModel[] Actions {
            get {
                return this.ActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionsField, value) != true)) {
                    this.ActionsField = value;
                    this.RaisePropertyChanged("Actions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.IdNameModel[] Ranks {
            get {
                return this.RanksField;
            }
            set {
                if ((object.ReferenceEquals(this.RanksField, value) != true)) {
                    this.RanksField = value;
                    this.RaisePropertyChanged("Ranks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CrmStatusGroup[] Statuses {
            get {
                return this.StatusesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusesField, value) != true)) {
                    this.StatusesField = value;
                    this.RaisePropertyChanged("Statuses");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountsToUpdateActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AccountsToUpdateActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.AccountsToUpdate AccountInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.AccountsToUpdate AccountInfo {
            get {
                return this.AccountInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountInfoField, value) != true)) {
                    this.AccountInfoField = value;
                    this.RaisePropertyChanged("AccountInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvailableFundsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AvailableFundsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AvailableFundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ReservedAmountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AvailableFunds {
            get {
                return this.AvailableFundsField;
            }
            set {
                if ((this.AvailableFundsField.Equals(value) != true)) {
                    this.AvailableFundsField = value;
                    this.RaisePropertyChanged("AvailableFunds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ReservedAmount {
            get {
                return this.ReservedAmountField;
            }
            set {
                if ((this.ReservedAmountField.Equals(value) != true)) {
                    this.ReservedAmountField = value;
                    this.RaisePropertyChanged("ReservedAmount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyCaisDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CompanyCaisDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyCaisAccount[] AccountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfCurrentDefaultAccountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfSettledDefaultAccountsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyCaisAccount[] Accounts {
            get {
                return this.AccountsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountsField, value) != true)) {
                    this.AccountsField = value;
                    this.RaisePropertyChanged("Accounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfCurrentDefaultAccounts {
            get {
                return this.NumOfCurrentDefaultAccountsField;
            }
            set {
                if ((this.NumOfCurrentDefaultAccountsField.Equals(value) != true)) {
                    this.NumOfCurrentDefaultAccountsField = value;
                    this.RaisePropertyChanged("NumOfCurrentDefaultAccounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfSettledDefaultAccounts {
            get {
                return this.NumOfSettledDefaultAccountsField;
            }
            set {
                if ((this.NumOfSettledDefaultAccountsField.Equals(value) != true)) {
                    this.NumOfSettledDefaultAccountsField = value;
                    this.RaisePropertyChanged("NumOfSettledDefaultAccounts");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDataForCompanyScoreActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CompanyDataForCompanyScoreActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyData DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyData Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDataForCreditBureauActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CompanyDataForCreditBureauActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyDataForCreditBureau ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyDataForCreditBureau Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NullableDateTimeActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class NullableDateTimeActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigTableActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ConfigTableActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EzBob.Backend.Models.ConfigTable[] TableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EzBob.Backend.Models.ConfigTable[] Table {
            get {
                return this.TableField;
            }
            set {
                if ((object.ReferenceEquals(this.TableField, value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecimalActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class DecimalActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasValue {
            get {
                return this.HasValueField;
            }
            set {
                if ((this.HasValueField.Equals(value) != true)) {
                    this.HasValueField = value;
                    this.RaisePropertyChanged("HasValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateTimeActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class DateTimeActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WizardConfigsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class WizardConfigsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSmsValidationActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfMobileCodeAttemptsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSmsValidationActive {
            get {
                return this.IsSmsValidationActiveField;
            }
            set {
                if ((this.IsSmsValidationActiveField.Equals(value) != true)) {
                    this.IsSmsValidationActiveField = value;
                    this.RaisePropertyChanged("IsSmsValidationActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfMobileCodeAttempts {
            get {
                return this.NumberOfMobileCodeAttemptsField;
            }
            set {
                if ((this.NumberOfMobileCodeAttemptsField.Equals(value) != true)) {
                    this.NumberOfMobileCodeAttemptsField = value;
                    this.RaisePropertyChanged("NumberOfMobileCodeAttempts");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EsignatureFileActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class EsignatureFileActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Contents {
            get {
                return this.ContentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentsField, value) != true)) {
                    this.ContentsField = value;
                    this.RaisePropertyChanged("Contents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EsignatureListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class EsignatureListActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Esignature[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Esigner[] PotentialSignersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Esignature[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Esigner[] PotentialSigners {
            get {
                return this.PotentialSignersField;
            }
            set {
                if ((object.ReferenceEquals(this.PotentialSignersField, value) != true)) {
                    this.PotentialSignersField = value;
                    this.RaisePropertyChanged("PotentialSigners");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianConsumerActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianConsumerActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerData ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerData Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianConsumerMortgageActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianConsumerMortgageActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerMortgagesData ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerMortgagesData Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VatReturnPeriodsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class VatReturnPeriodsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.VatReturnPeriod[] PeriodsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.VatReturnPeriod[] Periods {
            get {
                return this.PeriodsField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodsField, value) != true)) {
                    this.PeriodsField = value;
                    this.RaisePropertyChanged("Periods");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerInstantOfferResponseActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class BrokerInstantOfferResponseActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.BrokerInstantOfferResponse ResponseField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.BrokerInstantOfferResponse Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NLModelActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class NLModelActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListNewLoanActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class ListNewLoanActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.NewLoan.NL_Loans[] ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.NewLoan.NL_Loans[] Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PricingScenarioNameListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class PricingScenarioNameListActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.PricingScenarioName[] NamesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.PricingScenarioName[] Names {
            get {
                return this.NamesField;
            }
            set {
                if ((object.ReferenceEquals(this.NamesField, value) != true)) {
                    this.NamesField = value;
                    this.RaisePropertyChanged("Names");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SalesForceActivityActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class SalesForceActivityActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.GetActivityResultModel ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.GetActivityResultModel Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecurityUserActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class SecurityUserActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Authentication.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Authentication.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LandRegistryActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class LandRegistryActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.LandRegistryDB[] ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.LandRegistryDB[] Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationInfoResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class ApplicationInfoResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.ApplicationInfo.ApplicationInfoModel ModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.ApplicationInfo.ApplicationInfoModel Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecisionHistoryResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class DecisionHistoryResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.DecisionHistoryDBModel[] ModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.DecisionHistoryDBModel[] Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SlidersDataActionResults", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class SlidersDataActionResults : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.SlidersDataModel SlidersDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.SlidersDataModel SlidersData {
            get {
                return this.SlidersDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SlidersDataField, value) != true)) {
                    this.SlidersDataField = value;
                    this.RaisePropertyChanged("SlidersData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CollectionSnailMailActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class CollectionSnailMailActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.CollectionSnailMailMetadataModel SnailMailField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.CollectionSnailMailMetadataModel SnailMail {
            get {
                return this.SnailMailField;
            }
            set {
                if ((object.ReferenceEquals(this.SnailMailField, value) != true)) {
                    this.SnailMailField = value;
                    this.RaisePropertyChanged("SnailMail");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvestorActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class InvestorActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Investor.InvestorModel InvestorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Investor.InvestorModel Investor {
            get {
                return this.InvestorField;
            }
            set {
                if ((object.ReferenceEquals(this.InvestorField, value) != true)) {
                    this.InvestorField = value;
                    this.RaisePropertyChanged("Investor");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountingDataResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class AccountingDataResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Investor.AccountingDataModel[] AccountingDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Investor.AccountingDataModel[] AccountingData {
            get {
                return this.AccountingDataField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountingDataField, value) != true)) {
                    this.AccountingDataField = value;
                    this.RaisePropertyChanged("AccountingData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListInvestorsResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class ListInvestorsResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Investor.OneInvestorModel[] InvestorsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Investor.OneInvestorModel[] Investors {
            get {
                return this.InvestorsField;
            }
            set {
                if ((object.ReferenceEquals(this.InvestorsField, value) != true)) {
                    this.InvestorsField = value;
                    this.RaisePropertyChanged("Investors");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransactionsDataResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class TransactionsDataResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Investor.TransactionsDataModel[] TransactionsDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Investor.TransactionsDataModel[] TransactionsData {
            get {
                return this.TransactionsDataField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionsDataField, value) != true)) {
                    this.TransactionsDataField = value;
                    this.RaisePropertyChanged("TransactionsData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SchedulerDataResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class SchedulerDataResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Investor.SchedulerDataModel SchedulerDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Investor.SchedulerDataModel SchedulerData {
            get {
                return this.SchedulerDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SchedulerDataField, value) != true)) {
                    this.SchedulerDataField = value;
                    this.RaisePropertyChanged("SchedulerData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogicalGlueResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class LogicalGlueResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.Bucket BucketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BucketPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BucketStrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> FLScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHardRejectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTryoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyRepaymentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> NNScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ScoreIsReliableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UniqueIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.Bucket Bucket {
            get {
                return this.BucketField;
            }
            set {
                if ((object.ReferenceEquals(this.BucketField, value) != true)) {
                    this.BucketField = value;
                    this.RaisePropertyChanged("Bucket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BucketPercent {
            get {
                return this.BucketPercentField;
            }
            set {
                if ((this.BucketPercentField.Equals(value) != true)) {
                    this.BucketPercentField = value;
                    this.RaisePropertyChanged("BucketPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BucketStr {
            get {
                return this.BucketStrField;
            }
            set {
                if ((object.ReferenceEquals(this.BucketStrField, value) != true)) {
                    this.BucketStrField = value;
                    this.RaisePropertyChanged("BucketStr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> FLScore {
            get {
                return this.FLScoreField;
            }
            set {
                if ((this.FLScoreField.Equals(value) != true)) {
                    this.FLScoreField = value;
                    this.RaisePropertyChanged("FLScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHardReject {
            get {
                return this.IsHardRejectField;
            }
            set {
                if ((this.IsHardRejectField.Equals(value) != true)) {
                    this.IsHardRejectField = value;
                    this.RaisePropertyChanged("IsHardReject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTryout {
            get {
                return this.IsTryoutField;
            }
            set {
                if ((this.IsTryoutField.Equals(value) != true)) {
                    this.IsTryoutField = value;
                    this.RaisePropertyChanged("IsTryout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyRepayment {
            get {
                return this.MonthlyRepaymentField;
            }
            set {
                if ((this.MonthlyRepaymentField.Equals(value) != true)) {
                    this.MonthlyRepaymentField = value;
                    this.RaisePropertyChanged("MonthlyRepayment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> NNScore {
            get {
                return this.NNScoreField;
            }
            set {
                if ((this.NNScoreField.Equals(value) != true)) {
                    this.NNScoreField = value;
                    this.RaisePropertyChanged("NNScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ScoreIsReliable {
            get {
                return this.ScoreIsReliableField;
            }
            set {
                if ((this.ScoreIsReliableField.Equals(value) != true)) {
                    this.ScoreIsReliableField = value;
                    this.RaisePropertyChanged("ScoreIsReliable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UniqueID {
            get {
                return this.UniqueIDField;
            }
            set {
                if ((this.UniqueIDField.Equals(value) != true)) {
                    this.UniqueIDField = value;
                    this.RaisePropertyChanged("UniqueID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LegalDocsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class LegalDocsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate[] LoanAgreementTemplatesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate[] LoanAgreementTemplates {
            get {
                return this.LoanAgreementTemplatesField;
            }
            set {
                if ((object.ReferenceEquals(this.LoanAgreementTemplatesField, value) != true)) {
                    this.LoanAgreementTemplatesField = value;
                    this.RaisePropertyChanged("LoanAgreementTemplates");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LegalDocActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults.Investor")]
    [System.SerializableAttribute()]
    public partial class LegalDocActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate LoanAgreementTemplateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate LoanAgreementTemplate {
            get {
                return this.LoanAgreementTemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.LoanAgreementTemplateField, value) != true)) {
                    this.LoanAgreementTemplateField = value;
                    this.RaisePropertyChanged("LoanAgreementTemplate");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringListActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RecordsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Records {
            get {
                return this.RecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordsField, value) != true)) {
                    this.RecordsField = value;
                    this.RaisePropertyChanged("Records");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetActivityResultModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class GetActivityResultModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.ActivityResultModel[] ActivitiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.ActivityResultModel[] Activities {
            get {
                return this.ActivitiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivitiesField, value) != true)) {
                    this.ActivitiesField = value;
                    this.RaisePropertyChanged("Activities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityResultModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ActivityResultModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Originator {
            get {
                return this.OriginatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginatorField, value) != true)) {
                    this.OriginatorField = value;
                    this.RaisePropertyChanged("Originator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Place {
            get {
                return this.PlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceField, value) != true)) {
                    this.PlaceField = value;
                    this.RaisePropertyChanged("Place");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LandRegistryDB", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.LandRegistry", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class LandRegistryDB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AddressIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachmentPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InsertDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.LandRegistryOwnerDB[] OwnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostcodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AddressID {
            get {
                return this.AddressIDField;
            }
            set {
                if ((this.AddressIDField.Equals(value) != true)) {
                    this.AddressIDField = value;
                    this.RaisePropertyChanged("AddressID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttachmentPath {
            get {
                return this.AttachmentPathField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentPathField, value) != true)) {
                    this.AttachmentPathField = value;
                    this.RaisePropertyChanged("AttachmentPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InsertDate {
            get {
                return this.InsertDateField;
            }
            set {
                if ((this.InsertDateField.Equals(value) != true)) {
                    this.InsertDateField = value;
                    this.RaisePropertyChanged("InsertDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.LandRegistryOwnerDB[] Owners {
            get {
                return this.OwnersField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnersField, value) != true)) {
                    this.OwnersField = value;
                    this.RaisePropertyChanged("Owners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Postcode {
            get {
                return this.PostcodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostcodeField, value) != true)) {
                    this.PostcodeField = value;
                    this.RaisePropertyChanged("Postcode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Request {
            get {
                return this.RequestField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestField, value) != true)) {
                    this.RequestField = value;
                    this.RaisePropertyChanged("Request");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestType {
            get {
                return this.RequestTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestTypeField, value) != true)) {
                    this.RequestTypeField = value;
                    this.RaisePropertyChanged("RequestType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponseType {
            get {
                return this.ResponseTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseTypeField, value) != true)) {
                    this.ResponseTypeField = value;
                    this.RaisePropertyChanged("ResponseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleNumber {
            get {
                return this.TitleNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleNumberField, value) != true)) {
                    this.TitleNumberField = value;
                    this.RaisePropertyChanged("TitleNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LandRegistryOwnerDB", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.LandRegistry", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class LandRegistryOwnerDB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyRegistrationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LandRegistryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyRegistrationNumber {
            get {
                return this.CompanyRegistrationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyRegistrationNumberField, value) != true)) {
                    this.CompanyRegistrationNumberField = value;
                    this.RaisePropertyChanged("CompanyRegistrationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LandRegistryId {
            get {
                return this.LandRegistryIdField;
            }
            set {
                if ((this.LandRegistryIdField.Equals(value) != true)) {
                    this.LandRegistryIdField = value;
                    this.RaisePropertyChanged("LandRegistryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bucket", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Integration.LogicalGlue.Engine.Inte" +
        "rface")]
    [System.SerializableAttribute()]
    public partial class Bucket : ServiceClientProxy.EzServiceReference.EnumMemberOfint {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EnumMemberOfint", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Integration.LogicalGlue.Engine.Inte" +
        "rface")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.Bucket))]
    public partial class EnumMemberOfint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommunicationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommunicationCode {
            get {
                return this.CommunicationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CommunicationCodeField, value) != true)) {
                    this.CommunicationCodeField = value;
                    this.RaisePropertyChanged("CommunicationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class TaskModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOpportunityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpportunity {
            get {
                return this.IsOpportunityField;
            }
            set {
                if ((this.IsOpportunityField.Equals(value) != true)) {
                    this.IsOpportunityField = value;
                    this.RaisePropertyChanged("IsOpportunity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Originator {
            get {
                return this.OriginatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginatorField, value) != true)) {
                    this.OriginatorField = value;
                    this.RaisePropertyChanged("Originator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ActivityModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOpportunityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpportunity {
            get {
                return this.IsOpportunityField;
            }
            set {
                if ((this.IsOpportunityField.Equals(value) != true)) {
                    this.IsOpportunityField = value;
                    this.RaisePropertyChanged("IsOpportunity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Originator {
            get {
                return this.OriginatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginatorField, value) != true)) {
                    this.OriginatorField = value;
                    this.RaisePropertyChanged("Originator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OpportunityModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class OpportunityModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ApprovedAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CloseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DealCloseTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DealLostReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpectedEndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequestedAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TookAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ApprovedAmount {
            get {
                return this.ApprovedAmountField;
            }
            set {
                if ((this.ApprovedAmountField.Equals(value) != true)) {
                    this.ApprovedAmountField = value;
                    this.RaisePropertyChanged("ApprovedAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CloseDate {
            get {
                return this.CloseDateField;
            }
            set {
                if ((this.CloseDateField.Equals(value) != true)) {
                    this.CloseDateField = value;
                    this.RaisePropertyChanged("CloseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DealCloseType {
            get {
                return this.DealCloseTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DealCloseTypeField, value) != true)) {
                    this.DealCloseTypeField = value;
                    this.RaisePropertyChanged("DealCloseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DealLostReason {
            get {
                return this.DealLostReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.DealLostReasonField, value) != true)) {
                    this.DealLostReasonField = value;
                    this.RaisePropertyChanged("DealLostReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpectedEndDate {
            get {
                return this.ExpectedEndDateField;
            }
            set {
                if ((this.ExpectedEndDateField.Equals(value) != true)) {
                    this.ExpectedEndDateField = value;
                    this.RaisePropertyChanged("ExpectedEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Origin {
            get {
                return this.OriginField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginField, value) != true)) {
                    this.OriginField = value;
                    this.RaisePropertyChanged("Origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequestedAmount {
            get {
                return this.RequestedAmountField;
            }
            set {
                if ((this.RequestedAmountField.Equals(value) != true)) {
                    this.RequestedAmountField = value;
                    this.RaisePropertyChanged("RequestedAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Stage {
            get {
                return this.StageField;
            }
            set {
                if ((object.ReferenceEquals(this.StageField, value) != true)) {
                    this.StageField = value;
                    this.RaisePropertyChanged("Stage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TookAmount {
            get {
                return this.TookAmountField;
            }
            set {
                if ((this.TookAmountField.Equals(value) != true)) {
                    this.TookAmountField = value;
                    this.RaisePropertyChanged("TookAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PasswordResetTarget", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.UserManagement")]
    public enum PasswordResetTarget : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Customer = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broker = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianServiceType", Namespace="http://schemas.datacontract.org/2004/07/EZBob.DatabaseLib.Model.Database")]
    public enum ExperianServiceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Aml = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Askville = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bwa = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Consumer = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LimitedData = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonLimitedData = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Targeting = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditSafeLtd = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditSafeNonLtd = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditSafeNonLtdTargeting = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CallCredit = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EzServiceReference.IEzServiceAdmin")]
    public interface IEzServiceAdmin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Shutdown", ReplyAction="http://tempuri.org/IEzServiceAdmin/ShutdownResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Shutdown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Shutdown", ReplyAction="http://tempuri.org/IEzServiceAdmin/ShutdownResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ShutdownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Nop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NopResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Nop(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Nop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NopResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NopAsync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Noop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NoopResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Noop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Noop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NoopResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NoopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestAction", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestActionResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData StressTestAction(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestAction", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestActionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestActionAsync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestSync", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestSyncResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData StressTestSync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestSync", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestSyncResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestSyncAsync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Terminate", ReplyAction="http://tempuri.org/IEzServiceAdmin/TerminateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Terminate(System.Guid sActionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Terminate", ReplyAction="http://tempuri.org/IEzServiceAdmin/TerminateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TerminateAsync(System.Guid sActionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/ListActiveActions", ReplyAction="http://tempuri.org/IEzServiceAdmin/ListActiveActionsResponse")]
        ServiceClientProxy.EzServiceReference.StringListActionResult ListActiveActions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/ListActiveActions", ReplyAction="http://tempuri.org/IEzServiceAdmin/ListActiveActionsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> ListActiveActionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/WriteToLog", ReplyAction="http://tempuri.org/IEzServiceAdmin/WriteToLogResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData WriteToLog(string sSeverity, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/WriteToLog", ReplyAction="http://tempuri.org/IEzServiceAdmin/WriteToLogResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToLogAsync(string sSeverity, string sMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEzServiceAdminChannel : ServiceClientProxy.EzServiceReference.IEzServiceAdmin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EzServiceAdminClient : System.ServiceModel.ClientBase<ServiceClientProxy.EzServiceReference.IEzServiceAdmin>, ServiceClientProxy.EzServiceReference.IEzServiceAdmin {
        
        public EzServiceAdminClient() {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceAdminClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Shutdown() {
            return base.Channel.Shutdown();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ShutdownAsync() {
            return base.Channel.ShutdownAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Nop(int nLengthInSeconds, string sMsg) {
            return base.Channel.Nop(nLengthInSeconds, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NopAsync(int nLengthInSeconds, string sMsg) {
            return base.Channel.NopAsync(nLengthInSeconds, sMsg);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Noop() {
            return base.Channel.Noop();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NoopAsync() {
            return base.Channel.NoopAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData StressTestAction(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestAction(nLengthInSeconds, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestActionAsync(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestActionAsync(nLengthInSeconds, sMsg);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData StressTestSync(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestSync(nLengthInSeconds, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestSyncAsync(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestSyncAsync(nLengthInSeconds, sMsg);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Terminate(System.Guid sActionID) {
            return base.Channel.Terminate(sActionID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TerminateAsync(System.Guid sActionID) {
            return base.Channel.TerminateAsync(sActionID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringListActionResult ListActiveActions() {
            return base.Channel.ListActiveActions();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> ListActiveActionsAsync() {
            return base.Channel.ListActiveActionsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData WriteToLog(string sSeverity, string sMsg) {
            return base.Channel.WriteToLog(sSeverity, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToLogAsync(string sSeverity, string sMsg) {
            return base.Channel.WriteToLogAsync(sSeverity, sMsg);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EzServiceReference.IEzService")]
    public interface IEzService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyMedal", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyMedalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyMedal(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyMedal", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyMedalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyMedalAsync(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyApproval", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyApprovalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyApproval(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyApproval", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyApprovalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyApprovalAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyReapproval", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyReapprovalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReapproval(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyReapproval", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyReapprovalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyReapprovalAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyReject", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyRejectResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReject(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyReject", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyRejectResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRejectAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyRerejection", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyRerejectionResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyRerejection(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/VerifyRerejection", ReplyAction="http://tempuri.org/IEzAutomationVerification/VerifyRerejectionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRerejectionAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/SilentAutomation", ReplyAction="http://tempuri.org/IEzAutomationVerification/SilentAutomationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SilentAutomation(int customerID, int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzAutomationVerification/SilentAutomation", ReplyAction="http://tempuri.org/IEzAutomationVerification/SilentAutomationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SilentAutomationAsync(int customerID, int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAcceptTerms", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAcceptTermsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAcceptTerms(int nTermsID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAcceptTerms", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAcceptTermsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAcceptTermsAsync(int nTermsID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAddCustomerLead", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAddCustomerLeadResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddCustomerLead(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAddCustomerLead", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAddCustomerLeadResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddCustomerLeadAsync(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAddBank", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAddBankResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddBank(Ezbob.Backend.Models.BrokerAddBankModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAddBank", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAddBankResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddBankAsync(Ezbob.Backend.Models.BrokerAddBankModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerApproveAndResetCustomerPassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerApproveAndResetCustomerPasswordResponse" +
            "")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerApproveAndResetCustomerPassword(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerApproveAndResetCustomerPassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerApproveAndResetCustomerPasswordResponse" +
            "")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerApproveAndResetCustomerPasswordAsync(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAttachCustomer", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAttachCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAttachCustomer(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerAttachCustomer", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerAttachCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAttachCustomerAsync(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerBackFromCustomerWizard", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerBackFromCustomerWizardResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult BrokerBackFromCustomerWizard(int nLeadID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerBackFromCustomerWizard", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerBackFromCustomerWizardResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerBackFromCustomerWizardAsync(int nLeadID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerCheckCustomerRelevance", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerCheckCustomerRelevanceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCheckCustomerRelevance(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerCheckCustomerRelevance", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerCheckCustomerRelevanceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCheckCustomerRelevanceAsync(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerCustomerWizardComplete", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerCustomerWizardCompleteResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCustomerWizardComplete(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerCustomerWizardComplete", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerCustomerWizardCompleteResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCustomerWizardCompleteAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerDeleteCustomerFiles", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerDeleteCustomerFilesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerDeleteCustomerFiles(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerDeleteCustomerFiles", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerDeleteCustomerFilesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerDeleteCustomerFilesAsync(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerDownloadCustomerFile", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerDownloadCustomerFileResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult BrokerDownloadCustomerFile(string sCustomerRefNum, string sContactEmail, int nFileID, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerDownloadCustomerFile", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerDownloadCustomerFileResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult> BrokerDownloadCustomerFileAsync(string sCustomerRefNum, string sContactEmail, int nFileID, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerForceResetCustomerPassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerForceResetCustomerPasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerForceResetCustomerPassword(int nUserID, int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerForceResetCustomerPassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerForceResetCustomerPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerForceResetCustomerPasswordAsync(int nUserID, int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerInstantOffer", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerInstantOfferResponse")]
        ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult BrokerInstantOffer(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerInstantOffer", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerInstantOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult> BrokerInstantOfferAsync(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadAcquireCustomer", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadAcquireCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadAcquireCustomer(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadAcquireCustomer", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadAcquireCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadAcquireCustomerAsync(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadCanFillWizard", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadCanFillWizardResponse")]
        ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCanFillWizard(int nLeadID, string sLeadEmail, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadCanFillWizard", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadCanFillWizardResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCanFillWizardAsync(int nLeadID, string sLeadEmail, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadCheckToken", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadCheckTokenResponse")]
        ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCheckToken(string sToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadCheckToken", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadCheckTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCheckTokenAsync(string sToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadSendInvitation", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadSendInvitationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadSendInvitation(int nLeadID, string sBrokerContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLeadSendInvitation", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLeadSendInvitationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadSendInvitationAsync(int nLeadID, string sBrokerContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerDetails", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerDetailsResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult BrokerLoadCustomerDetails(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerDetails", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult> BrokerLoadCustomerDetailsAsync(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadLeadDetails", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadLeadDetailsResponse")]
        ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult BrokerLoadLeadDetails(int leadID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadLeadDetails", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadLeadDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult> BrokerLoadLeadDetailsAsync(int leadID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerFiles", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerFilesResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult BrokerLoadCustomerFiles(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerFiles", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerFilesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult> BrokerLoadCustomerFilesAsync(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerList", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerListResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomerList(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerList", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomerListResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomerListAsync(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomersByID", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomersByIDResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomersByID(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomersByID", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadCustomersByIDResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomersByIDAsync(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadOwnProperties", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadOwnPropertiesResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadOwnProperties(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadOwnProperties", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadOwnPropertiesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadOwnPropertiesAsync(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadPropertiesByID", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadPropertiesByIDResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadPropertiesByID(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadPropertiesByID", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadPropertiesByIDResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadPropertiesByIDAsync(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadSignedTerms", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadSignedTermsResponse")]
        ServiceClientProxy.EzServiceReference.StringListActionResult BrokerLoadSignedTerms(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadSignedTerms", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadSignedTermsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> BrokerLoadSignedTermsAsync(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadStaticData", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadStaticDataResponse")]
        ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult BrokerLoadStaticData(bool bLoadFilesOnly, int originID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLoadStaticData", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoadStaticDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult> BrokerLoadStaticDataAsync(bool bLoadFilesOnly, int originID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLogin", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoginResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLogin(string sEmail, Ezbob.Backend.Models.DasKennwort oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime, int uiOriginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerLogin", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerLoginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoginAsync(string sEmail, Ezbob.Backend.Models.DasKennwort oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime, int uiOriginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerRestorePassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerRestorePasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerRestorePassword(string sMobile, string sCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerRestorePassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerRestorePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerRestorePasswordAsync(string sMobile, string sCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerSaveCrmEntry", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerSaveCrmEntryResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult BrokerSaveCrmEntry(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerSaveCrmEntry", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerSaveCrmEntryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerSaveCrmEntryAsync(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerSaveUploadedCustomerFile", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerSaveUploadedCustomerFileResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerSaveUploadedCustomerFile(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerSaveUploadedCustomerFile", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerSaveUploadedCustomerFileResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerSaveUploadedCustomerFileAsync(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerSignup", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerSignupResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerSignup(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    Ezbob.Backend.Models.DasKennwort password, 
                    Ezbob.Backend.Models.DasKennwort passwordAgain, 
                    string sFirmWebSiteUrl, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber, 
                    int uiOriginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerSignup", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerSignupResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerSignupAsync(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    Ezbob.Backend.Models.DasKennwort password, 
                    Ezbob.Backend.Models.DasKennwort passwordAgain, 
                    string sFirmWebSiteUrl, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber, 
                    int uiOriginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerTransferCommission", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerTransferCommissionResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerTransferCommission();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerTransferCommission", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerTransferCommissionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerTransferCommissionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerUpdatePassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerUpdatePasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerUpdatePassword(string contactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword, Ezbob.Backend.Models.DasKennwort newPasswordAgain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerUpdatePassword", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerUpdatePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerUpdatePasswordAsync(string contactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword, Ezbob.Backend.Models.DasKennwort newPasswordAgain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/IsBroker", ReplyAction="http://tempuri.org/IEzServiceBroker/IsBrokerResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult IsBroker(string sContactEmail, int uiOrigin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/IsBroker", ReplyAction="http://tempuri.org/IEzServiceBroker/IsBrokerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> IsBrokerAsync(string sContactEmail, int uiOrigin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerUpdateEmail", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerUpdateEmailResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult BrokerUpdateEmail(int underwriterID, int brokerID, string newEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceBroker/BrokerUpdateEmail", ReplyAction="http://tempuri.org/IEzServiceBroker/BrokerUpdateEmailResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerUpdateEmailAsync(int underwriterID, int brokerID, string newEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/CreateInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/CreateInvestorResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult CreateInvestor(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investor, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/CreateInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/CreateInvestorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> CreateInvestorAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investor, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadInvestorResponse")]
        ServiceClientProxy.EzServiceReference.InvestorActionResult LoadInvestor(int underwriterID, int investorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadInvestorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.InvestorActionResult> LoadInvestorAsync(int underwriterID, int investorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/ManageInvestorContact", ReplyAction="http://tempuri.org/IEzServiceInvestor/ManageInvestorContactResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ManageInvestorContact(int underwriterID, Ezbob.Backend.Models.Investor.InvestorContactModel investorContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/ManageInvestorContact", ReplyAction="http://tempuri.org/IEzServiceInvestor/ManageInvestorContactResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManageInvestorContactAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorContactModel investorContact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/ManageInvestorBankAccount", ReplyAction="http://tempuri.org/IEzServiceInvestor/ManageInvestorBankAccountResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ManageInvestorBankAccount(int underwriterID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel investorBank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/ManageInvestorBankAccount", ReplyAction="http://tempuri.org/IEzServiceInvestor/ManageInvestorBankAccountResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManageInvestorBankAccountAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel investorBank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadAccountingData", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadAccountingDataResponse")]
        ServiceClientProxy.EzServiceReference.AccountingDataResult LoadAccountingData(int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadAccountingData", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadAccountingDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AccountingDataResult> LoadAccountingDataAsync(int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadInvestors", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadInvestorsResponse")]
        ServiceClientProxy.EzServiceReference.ListInvestorsResult LoadInvestors(int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadInvestors", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadInvestorsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ListInvestorsResult> LoadInvestorsAsync(int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadTransactionsData", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadTransactionsDataResponse")]
        ServiceClientProxy.EzServiceReference.TransactionsDataResult LoadTransactionsData(int underwriterID, int investorID, int bankAccountTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadTransactionsData", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadTransactionsDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.TransactionsDataResult> LoadTransactionsDataAsync(int underwriterID, int investorID, int bankAccountTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/SaveInvestorContactList", ReplyAction="http://tempuri.org/IEzServiceInvestor/SaveInvestorContactListResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult SaveInvestorContactList(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/SaveInvestorContactList", ReplyAction="http://tempuri.org/IEzServiceInvestor/SaveInvestorContactListResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> SaveInvestorContactListAsync(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/AddManualTransaction", ReplyAction="http://tempuri.org/IEzServiceInvestor/AddManualTransactionResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult AddManualTransaction(int underwriterID, int investorAccountID, decimal transactionAmount, System.DateTime transactionDate, int bankAccountTypeID, string transactionComment, string bankTransactionRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/AddManualTransaction", ReplyAction="http://tempuri.org/IEzServiceInvestor/AddManualTransactionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> AddManualTransactionAsync(int underwriterID, int investorAccountID, decimal transactionAmount, System.DateTime transactionDate, int bankAccountTypeID, string transactionComment, string bankTransactionRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/SaveInvestorBanksList", ReplyAction="http://tempuri.org/IEzServiceInvestor/SaveInvestorBanksListResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult SaveInvestorBanksList(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/SaveInvestorBanksList", ReplyAction="http://tempuri.org/IEzServiceInvestor/SaveInvestorBanksListResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> SaveInvestorBanksListAsync(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LinkLoanToInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/LinkLoanToInvestorResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LinkLoanToInvestor(int userID, int customerID, int loanID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LinkLoanToInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/LinkLoanToInvestorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LinkLoanToInvestorAsync(int userID, int customerID, int loanID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LinkLoanRepaymentToInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/LinkLoanRepaymentToInvestorResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LinkLoanRepaymentToInvestor(int userID, int customerID, int loanID, int loanTransactionID, decimal transactionAmount, System.DateTime transactionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LinkLoanRepaymentToInvestor", ReplyAction="http://tempuri.org/IEzServiceInvestor/LinkLoanRepaymentToInvestorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LinkLoanRepaymentToInvestorAsync(int userID, int customerID, int loanID, int loanTransactionID, decimal transactionAmount, System.DateTime transactionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadSchedulerData", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadSchedulerDataResponse")]
        ServiceClientProxy.EzServiceReference.SchedulerDataResult LoadSchedulerData(int underwriterID, int investorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/LoadSchedulerData", ReplyAction="http://tempuri.org/IEzServiceInvestor/LoadSchedulerDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SchedulerDataResult> LoadSchedulerDataAsync(int underwriterID, int investorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/ManageInvestorDetails", ReplyAction="http://tempuri.org/IEzServiceInvestor/ManageInvestorDetailsResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ManageInvestorDetails(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investorDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/ManageInvestorDetails", ReplyAction="http://tempuri.org/IEzServiceInvestor/ManageInvestorDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManageInvestorDetailsAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investorDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/UpdateSchedulerData", ReplyAction="http://tempuri.org/IEzServiceInvestor/UpdateSchedulerDataResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult UpdateSchedulerData(int underwriterID, int investorID, decimal monthlyFundingCapital, int fundsTransferDate, string fundsTransferSchedule, string repaymentsTransferSchedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceInvestor/UpdateSchedulerData", ReplyAction="http://tempuri.org/IEzServiceInvestor/UpdateSchedulerDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> UpdateSchedulerDataAsync(int underwriterID, int investorID, decimal monthlyFundingCapital, int fundsTransferDate, string fundsTransferSchedule, string repaymentsTransferSchedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetLastInference", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetLastInferenceResponse")]
        ServiceClientProxy.EzServiceReference.LogicalGlueResult LogicalGlueGetLastInference(int underwriterID, int customerID, System.Nullable<System.DateTime> date, bool includeTryouts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetLastInference", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetLastInferenceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LogicalGlueResult> LogicalGlueGetLastInferenceAsync(int underwriterID, int customerID, System.Nullable<System.DateTime> date, bool includeTryouts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetHistory", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetHistoryResponse")]
        ServiceClientProxy.EzServiceReference.LogicalGlueResult[] LogicalGlueGetHistory(int underwriterID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetHistory", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetHistoryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LogicalGlueResult[]> LogicalGlueGetHistoryAsync(int underwriterID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetTryout", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetTryoutResponse")]
        ServiceClientProxy.EzServiceReference.LogicalGlueResult LogicalGlueGetTryout(int underwriterID, int customerID, decimal monthlyRepayment, bool isTryout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetTryout", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueGetTryoutResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LogicalGlueResult> LogicalGlueGetTryoutAsync(int underwriterID, int customerID, decimal monthlyRepayment, bool isTryout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueSetAsCurrent", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueSetAsCurrentResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult LogicalGlueSetAsCurrent(int underwriterID, int customerID, System.Guid uniqueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueSetAsCurrent", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/LogicalGlueSetAsCurrentResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> LogicalGlueSetAsCurrentAsync(int underwriterID, int customerID, System.Guid uniqueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/BackfillLogicalGlueForAll", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/BackfillLogicalGlueForAllResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLogicalGlueForAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLogicalGlue/BackfillLogicalGlueForAll", ReplyAction="http://tempuri.org/IEzServiceLogicalGlue/BackfillLogicalGlueForAllResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLogicalGlueForAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceMainStrategy/MainStrategyAsync", ReplyAction="http://tempuri.org/IEzServiceMainStrategy/MainStrategyAsyncResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategyAsync(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceMainStrategy/MainStrategyAsync", ReplyAction="http://tempuri.org/IEzServiceMainStrategy/MainStrategyAsyncResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategyAsyncAsync(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceMainStrategy/MainStrategySync", ReplyAction="http://tempuri.org/IEzServiceMainStrategy/MainStrategySyncResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategySync(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceMainStrategy/MainStrategySync", ReplyAction="http://tempuri.org/IEzServiceMainStrategy/MainStrategySyncResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategySyncAsync(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddCashRequest", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddCashRequestResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddCashRequest(int userID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_CashRequests cashRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddCashRequest", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddCashRequestResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddCashRequestAsync(int userID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_CashRequests cashRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddDecision", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddDecisionResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddDecision(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Decisions decision, System.Nullable<long> oldCashRequest, Ezbob.Backend.ModelsWithDB.NewLoan.NL_DecisionRejectReasons[] decisionRejectReasons);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddDecision", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddDecisionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddDecisionAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Decisions decision, System.Nullable<long> oldCashRequest, Ezbob.Backend.ModelsWithDB.NewLoan.NL_DecisionRejectReasons[] decisionRejectReasons);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddOffer", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddOfferResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddOffer(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers offer, Ezbob.Backend.ModelsWithDB.NewLoan.NL_OfferFees[] fees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddOffer", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddOfferAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers offer, Ezbob.Backend.ModelsWithDB.NewLoan.NL_OfferFees[] fees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetLastOffer", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetLastOfferResponse")]
        Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers GetLastOffer(int userID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetLastOffer", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetLastOfferResponse")]
        System.Threading.Tasks.Task<Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers> GetLastOfferAsync(int userID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoanLegals", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanLegalsResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddLoanLegals(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanLegals loanLegals);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoanLegals", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanLegalsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddLoanLegalsAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanLegals loanLegals);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoanOptions", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanOptionsResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddLoanOptions(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanOptions loanOptions, System.Nullable<int> oldLoanId, string[] PropertiesUpdateList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoanOptions", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanOptionsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddLoanOptionsAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanOptions loanOptions, System.Nullable<int> oldLoanId, string[] PropertiesUpdateList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoan", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData AddLoan(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoan", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddLoanAsync(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddPayment", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddPaymentResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddPayment(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddPayment", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddPaymentResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddPaymentAsync(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/RescheduleLoan", ReplyAction="http://tempuri.org/IEzServiceNewLoan/RescheduleLoanResponse")]
        ServiceClientProxy.EzServiceReference.ReschedulingActionResult RescheduleLoan(int userID, int customerID, Ezbob.Backend.Models.NewLoan.ReschedulingArgument reschedulingArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/RescheduleLoan", ReplyAction="http://tempuri.org/IEzServiceNewLoan/RescheduleLoanResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ReschedulingActionResult> RescheduleLoanAsync(int userID, int customerID, Ezbob.Backend.Models.NewLoan.ReschedulingArgument reschedulingArgument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/BuildLoanFromOffer", ReplyAction="http://tempuri.org/IEzServiceNewLoan/BuildLoanFromOfferResponse")]
        ServiceClientProxy.EzServiceReference.NLModelActionResult BuildLoanFromOffer(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/BuildLoanFromOffer", ReplyAction="http://tempuri.org/IEzServiceNewLoan/BuildLoanFromOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLModelActionResult> BuildLoanFromOfferAsync(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/DeactivateLoanInterestFreeze", ReplyAction="http://tempuri.org/IEzServiceNewLoan/DeactivateLoanInterestFreezeResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult DeactivateLoanInterestFreeze(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/DeactivateLoanInterestFreeze", ReplyAction="http://tempuri.org/IEzServiceNewLoan/DeactivateLoanInterestFreezeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> DeactivateLoanInterestFreezeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoanInterestFreeze", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanInterestFreezeResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult AddLoanInterestFreeze(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AddLoanInterestFreeze", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AddLoanInterestFreezeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddLoanInterestFreezeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetCustomerLoans", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetCustomerLoansResponse")]
        ServiceClientProxy.EzServiceReference.ListNewLoanActionResult GetCustomerLoans(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetCustomerLoans", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetCustomerLoansResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ListNewLoanActionResult> GetCustomerLoansAsync(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetLoanState", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetLoanStateResponse")]
        ServiceClientProxy.EzServiceReference.NLModelActionResult GetLoanState(int customerID, long loanID, System.DateTime utcNow, int userID, bool getCalculatorState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetLoanState", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetLoanStateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLModelActionResult> GetLoanStateAsync(int customerID, long loanID, System.DateTime utcNow, int userID, bool getCalculatorState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetLoanByOldID", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetLoanByOldIDResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult GetLoanByOldID(int oldId, int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/GetLoanByOldID", ReplyAction="http://tempuri.org/IEzServiceNewLoan/GetLoanByOldIDResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> GetLoanByOldIDAsync(int oldId, int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/CancelPayment", ReplyAction="http://tempuri.org/IEzServiceNewLoan/CancelPaymentResponse")]
        ServiceClientProxy.EzServiceReference.NLLongActionResult CancelPayment(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/CancelPayment", ReplyAction="http://tempuri.org/IEzServiceNewLoan/CancelPaymentResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> CancelPaymentAsync(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/SaveRollover", ReplyAction="http://tempuri.org/IEzServiceNewLoan/SaveRolloverResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult SaveRollover(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanRollovers rollover, long loanID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/SaveRollover", ReplyAction="http://tempuri.org/IEzServiceNewLoan/SaveRolloverResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> SaveRolloverAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanRollovers rollover, long loanID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AcceptRollover", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AcceptRolloverResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult AcceptRollover(int customerID, long loanID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/AcceptRollover", ReplyAction="http://tempuri.org/IEzServiceNewLoan/AcceptRolloverResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> AcceptRolloverAsync(int customerID, long loanID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/SaveFee", ReplyAction="http://tempuri.org/IEzServiceNewLoan/SaveFeeResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult SaveFee(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/SaveFee", ReplyAction="http://tempuri.org/IEzServiceNewLoan/SaveFeeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> SaveFeeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/CancelFee", ReplyAction="http://tempuri.org/IEzServiceNewLoan/CancelFeeResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult CancelFee(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceNewLoan/CancelFee", ReplyAction="http://tempuri.org/IEzServiceNewLoan/CancelFeeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> CancelFeeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/GetPricingModelModel", ReplyAction="http://tempuri.org/IEzServicePricing/GetPricingModelModelResponse")]
        ServiceClientProxy.EzServiceReference.PricingModelModelActionResult GetPricingModelModel(int customerId, int underwriterId, DbConstants.PricingCalcuatorScenarioNames scenarioName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/GetPricingModelModel", ReplyAction="http://tempuri.org/IEzServicePricing/GetPricingModelModelResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> GetPricingModelModelAsync(int customerId, int underwriterId, DbConstants.PricingCalcuatorScenarioNames scenarioName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/GetPricingModelScenarios", ReplyAction="http://tempuri.org/IEzServicePricing/GetPricingModelScenariosResponse")]
        ServiceClientProxy.EzServiceReference.PricingScenarioNameListActionResult GetPricingModelScenarios(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/GetPricingModelScenarios", ReplyAction="http://tempuri.org/IEzServicePricing/GetPricingModelScenariosResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingScenarioNameListActionResult> GetPricingModelScenariosAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/PricingModelCalculate", ReplyAction="http://tempuri.org/IEzServicePricing/PricingModelCalculateResponse")]
        ServiceClientProxy.EzServiceReference.PricingModelModelActionResult PricingModelCalculate(int customerId, int underwriterId, Ezbob.Backend.ModelsWithDB.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/PricingModelCalculate", ReplyAction="http://tempuri.org/IEzServicePricing/PricingModelCalculateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> PricingModelCalculateAsync(int customerId, int underwriterId, Ezbob.Backend.ModelsWithDB.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/SavePricingModelSettings", ReplyAction="http://tempuri.org/IEzServicePricing/SavePricingModelSettingsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SavePricingModelSettings(int underwriterId, long scenarioID, Ezbob.Backend.ModelsWithDB.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/SavePricingModelSettings", ReplyAction="http://tempuri.org/IEzServicePricing/SavePricingModelSettingsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SavePricingModelSettingsAsync(int underwriterId, long scenarioID, Ezbob.Backend.ModelsWithDB.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/GetPricingScenarioDetails", ReplyAction="http://tempuri.org/IEzServicePricing/GetPricingScenarioDetailsResponse")]
        ServiceClientProxy.EzServiceReference.PricingModelModelActionResult GetPricingScenarioDetails(int underwriterId, long scenarioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServicePricing/GetPricingScenarioDetails", ReplyAction="http://tempuri.org/IEzServicePricing/GetPricingScenarioDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> GetPricingScenarioDetailsAsync(int underwriterId, long scenarioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateLeadAccount", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateLeadAccountResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateLeadAccount(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateLeadAccount", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateLeadAccountResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateLeadAccountAsync(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateContact", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateContactResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateContact(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateContact", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddUpdateContactResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateContactAsync(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddTask", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddTaskResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddTask(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddTask", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddTaskResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddTaskAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddActivity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddActivityResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddActivity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddActivity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddActivityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddActivityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddOpportunity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddOpportunityResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceAddOpportunity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceAddOpportunityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceUpdateOpportunity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceUpdateOpportunityResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceUpdateOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceUpdateOpportunity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceUpdateOpportunityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceUpdateOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceGetActivity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceGetActivityResponse")]
        ServiceClientProxy.EzServiceReference.SalesForceActivityActionResult SalesForceGetActivity(System.Nullable<int> userID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSalesForce/SalesForceGetActivity", ReplyAction="http://tempuri.org/IEzServiceSalesForce/SalesForceGetActivityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SalesForceActivityActionResult> SalesForceGetActivityAsync(System.Nullable<int> userID, int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/BackfillLinkedHmrc", ReplyAction="http://tempuri.org/IEzServiceVatReturn/BackfillLinkedHmrcResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLinkedHmrc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/BackfillLinkedHmrc", ReplyAction="http://tempuri.org/IEzServiceVatReturn/BackfillLinkedHmrcResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLinkedHmrcAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/AndRecalculateVatReturnSummaryForAll", ReplyAction="http://tempuri.org/IEzServiceVatReturn/AndRecalculateVatReturnSummaryForAllRespon" +
            "se")]
        ServiceClientProxy.EzServiceReference.ActionMetaData AndRecalculateVatReturnSummaryForAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/AndRecalculateVatReturnSummaryForAll", ReplyAction="http://tempuri.org/IEzServiceVatReturn/AndRecalculateVatReturnSummaryForAllRespon" +
            "se")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AndRecalculateVatReturnSummaryForAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/CalculateVatReturnSummary", ReplyAction="http://tempuri.org/IEzServiceVatReturn/CalculateVatReturnSummaryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CalculateVatReturnSummary(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/CalculateVatReturnSummary", ReplyAction="http://tempuri.org/IEzServiceVatReturn/CalculateVatReturnSummaryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateVatReturnSummaryAsync(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnFullData", ReplyAction="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnFullDataResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnFullData(int nCustomerID, int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnFullData", ReplyAction="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnFullDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnFullDataAsync(int nCustomerID, int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnRawData", ReplyAction="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnRawDataResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnRawData(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnRawData", ReplyAction="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnRawDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnRawDataAsync(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnSummary", ReplyAction="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnSummaryResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnSummary(int nCustomerID, int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnSummary", ReplyAction="http://tempuri.org/IEzServiceVatReturn/LoadVatReturnSummaryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnSummaryAsync(int nCustomerID, int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/SaveVatReturnData", ReplyAction="http://tempuri.org/IEzServiceVatReturn/SaveVatReturnDataResponse")]
        ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult SaveVatReturnData(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/SaveVatReturnData", ReplyAction="http://tempuri.org/IEzServiceVatReturn/SaveVatReturnDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult> SaveVatReturnDataAsync(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/RemoveManualVatReturnPeriod", ReplyAction="http://tempuri.org/IEzServiceVatReturn/RemoveManualVatReturnPeriodResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RemoveManualVatReturnPeriod(System.Guid oPeriodID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/RemoveManualVatReturnPeriod", ReplyAction="http://tempuri.org/IEzServiceVatReturn/RemoveManualVatReturnPeriodResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RemoveManualVatReturnPeriodAsync(System.Guid oPeriodID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/UpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzServiceVatReturn/UpdateLinkedHmrcPasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/UpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzServiceVatReturn/UpdateLinkedHmrcPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/ValidateAndUpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzServiceVatReturn/ValidateAndUpdateLinkedHmrcPasswordRespons" +
            "e")]
        ServiceClientProxy.EzServiceReference.StringActionResult ValidateAndUpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceVatReturn/ValidateAndUpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzServiceVatReturn/ValidateAndUpdateLinkedHmrcPasswordRespons" +
            "e")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> ValidateAndUpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/SignupCustomerMultiOrigin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/SignupCustomerMultiOriginResponse")]
        ServiceClientProxy.EzServiceReference.UserLoginActionResult SignupCustomerMultiOrigin(Ezbob.Backend.ModelsWithDB.SignupCustomerMultiOriginModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/SignupCustomerMultiOrigin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/SignupCustomerMultiOriginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> SignupCustomerMultiOriginAsync(Ezbob.Backend.ModelsWithDB.SignupCustomerMultiOriginModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/LoginCustomerMutliOrigin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/LoginCustomerMutliOriginResponse")]
        ServiceClientProxy.EzServiceReference.UserLoginActionResult LoginCustomerMutliOrigin(Ezbob.Backend.Models.LoginCustomerMultiOriginModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/LoginCustomerMutliOrigin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/LoginCustomerMutliOriginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> LoginCustomerMutliOriginAsync(Ezbob.Backend.Models.LoginCustomerMultiOriginModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/SignupUnderwriterMultiOrigin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/SignupUnderwriterMultiOriginResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SignupUnderwriterMultiOrigin(string name, Ezbob.Backend.Models.DasKennwort password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/SignupUnderwriterMultiOrigin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/SignupUnderwriterMultiOriginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SignupUnderwriterMultiOriginAsync(string name, Ezbob.Backend.Models.DasKennwort password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserLogin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserLoginResponse")]
        ServiceClientProxy.EzServiceReference.UserLoginActionResult UserLogin(System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> originID, string sEmail, Ezbob.Backend.Models.DasKennwort sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserLogin", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserLoginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> UserLoginAsync(System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> originID, string sEmail, Ezbob.Backend.Models.DasKennwort sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserDisable", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserDisableResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserDisable(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserDisable", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserDisableResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserDisableAsync(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/CustomerChangePassword", ReplyAction="http://tempuri.org/IEzServiceUserManagement/CustomerChangePasswordResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult CustomerChangePassword(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/CustomerChangePassword", ReplyAction="http://tempuri.org/IEzServiceUserManagement/CustomerChangePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> CustomerChangePasswordAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserUpdateSecurityQuestion", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserUpdateSecurityQuestionResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserUpdateSecurityQuestion(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, int questionID, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserUpdateSecurityQuestion", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserUpdateSecurityQuestionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserUpdateSecurityQuestionAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, int questionID, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserChangeEmail", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserChangeEmailResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserChangeEmail(int underwriterId, int nUserID, string sNewEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/UserChangeEmail", ReplyAction="http://tempuri.org/IEzServiceUserManagement/UserChangeEmailResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserChangeEmailAsync(int underwriterId, int nUserID, string sNewEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/MarkSessionEnded", ReplyAction="http://tempuri.org/IEzServiceUserManagement/MarkSessionEndedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MarkSessionEnded(int nSessionID, string sComment, System.Nullable<int> userID, System.Nullable<int> nCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/MarkSessionEnded", ReplyAction="http://tempuri.org/IEzServiceUserManagement/MarkSessionEndedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarkSessionEndedAsync(int nSessionID, string sComment, System.Nullable<int> userID, System.Nullable<int> nCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/LoadCustomerByCreatePasswordToken", ReplyAction="http://tempuri.org/IEzServiceUserManagement/LoadCustomerByCreatePasswordTokenResp" +
            "onse")]
        ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult LoadCustomerByCreatePasswordToken(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/LoadCustomerByCreatePasswordToken", ReplyAction="http://tempuri.org/IEzServiceUserManagement/LoadCustomerByCreatePasswordTokenResp" +
            "onse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult> LoadCustomerByCreatePasswordTokenAsync(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/SetCustomerPasswordByToken", ReplyAction="http://tempuri.org/IEzServiceUserManagement/SetCustomerPasswordByTokenResponse")]
        ServiceClientProxy.EzServiceReference.SetPasswordActionResult SetCustomerPasswordByToken(System.Guid token, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, Ezbob.Backend.Models.DasKennwort passwordAgain, bool isBrokerLead, string remoteIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/SetCustomerPasswordByToken", ReplyAction="http://tempuri.org/IEzServiceUserManagement/SetCustomerPasswordByTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SetPasswordActionResult> SetCustomerPasswordByTokenAsync(System.Guid token, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, Ezbob.Backend.Models.DasKennwort passwordAgain, bool isBrokerLead, string remoteIP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/ResetPassword123456", ReplyAction="http://tempuri.org/IEzServiceUserManagement/ResetPassword123456Response")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ResetPassword123456(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/ResetPassword123456", ReplyAction="http://tempuri.org/IEzServiceUserManagement/ResetPassword123456Response")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ResetPassword123456Async(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerate", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerateResponse")]
        ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult EmailConfirmationGenerate(int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerate", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult> EmailConfirmationGenerateAsync(int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerateAndSend", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerateAndSendRespo" +
            "nse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationGenerateAndSend(int nUserID, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerateAndSend", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationGenerateAndSendRespo" +
            "nse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationGenerateAndSendAsync(int nUserID, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationCheckOne", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationCheckOneResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult EmailConfirmationCheckOne(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationCheckOne", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationCheckOneResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> EmailConfirmationCheckOneAsync(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationConfirmUser", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationConfirmUserResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationConfirmUser(int nUserID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationConfirmUser", ReplyAction="http://tempuri.org/IEzServiceUserManagement/EmailConfirmationConfirmUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationConfirmUserAsync(int nUserID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/AddCciHistory", ReplyAction="http://tempuri.org/IEzServiceUserManagement/AddCciHistoryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData AddCciHistory(int nCustomerID, int nUnderwriterID, bool bCciMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/AddCciHistory", ReplyAction="http://tempuri.org/IEzServiceUserManagement/AddCciHistoryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddCciHistoryAsync(int nCustomerID, int nUnderwriterID, bool bCciMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/LoadAllLoginRoles", ReplyAction="http://tempuri.org/IEzServiceUserManagement/LoadAllLoginRolesResponse")]
        ServiceClientProxy.EzServiceReference.StringListActionResult LoadAllLoginRoles(string login, System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> origin, bool ignoreOrigin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/LoadAllLoginRoles", ReplyAction="http://tempuri.org/IEzServiceUserManagement/LoadAllLoginRolesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> LoadAllLoginRolesAsync(string login, System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> origin, bool ignoreOrigin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/GetCustomerSecurityQuestion", ReplyAction="http://tempuri.org/IEzServiceUserManagement/GetCustomerSecurityQuestionResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult GetCustomerSecurityQuestion(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/GetCustomerSecurityQuestion", ReplyAction="http://tempuri.org/IEzServiceUserManagement/GetCustomerSecurityQuestionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> GetCustomerSecurityQuestionAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/ValidateSecurityAnswer", ReplyAction="http://tempuri.org/IEzServiceUserManagement/ValidateSecurityAnswerResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult ValidateSecurityAnswer(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceUserManagement/ValidateSecurityAnswer", ReplyAction="http://tempuri.org/IEzServiceUserManagement/ValidateSecurityAnswerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> ValidateSecurityAnswerAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocs", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocsResponse")]
        ServiceClientProxy.EzServiceReference.LegalDocsActionResult GetLegalDocs(int customerID, int userID, int originID, bool isRegulated, int productSubTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocs", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocsActionResult> GetLegalDocsAsync(int customerID, int userID, int originID, bool isRegulated, int productSubTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocById", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocByIdResponse")]
        ServiceClientProxy.EzServiceReference.LegalDocActionResult GetLegalDocById(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocById", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocByIdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocActionResult> GetLegalDocByIdAsync(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/ManualLegalDocsSyncTemplatesFiles", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/ManualLegalDocsSyncTemplatesFilesResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ManualLegalDocsSyncTemplatesFiles(string agreementsPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/ManualLegalDocsSyncTemplatesFiles", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/ManualLegalDocsSyncTemplatesFilesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManualLegalDocsSyncTemplatesFilesAsync(string agreementsPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/AddLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/AddLegalDocResponse")]
        ServiceClientProxy.EzServiceReference.LegalDocActionResult AddLegalDoc(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/AddLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/AddLegalDocResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocActionResult> AddLegalDocAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/ApproveLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/ApproveLegalDocResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult ApproveLegalDoc(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/ApproveLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/ApproveLegalDocResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> ApproveLegalDocAsync(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLatestLegalDocs", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLatestLegalDocsResponse")]
        ServiceClientProxy.EzServiceReference.LegalDocsActionResult GetLatestLegalDocs(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLatestLegalDocs", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLatestLegalDocsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocsActionResult> GetLatestLegalDocsAsync(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocsPendingApproval", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocsPendingApprovalResponse")]
        ServiceClientProxy.EzServiceReference.LegalDocsActionResult GetLegalDocsPendingApproval(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocsPendingApproval", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/GetLegalDocsPendingApprovalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocsActionResult> GetLegalDocsPendingApprovalAsync(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/ReviewLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/ReviewLegalDocResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ReviewLegalDoc(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/ReviewLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/ReviewLegalDocResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ReviewLegalDocAsync(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/DeleteLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/DeleteLegalDocResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult DeleteLegalDoc(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/DeleteLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/DeleteLegalDocResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> DeleteLegalDocAsync(int customerID, int userID, int loanAgreementTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/SaveLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/SaveLegalDocResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult SaveLegalDoc(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLegalDocs/SaveLegalDoc", ReplyAction="http://tempuri.org/IEzServiceLegalDocs/SaveLegalDocResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SaveLegalDocAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSecurity/GetSecurityUser", ReplyAction="http://tempuri.org/IEzServiceSecurity/GetSecurityUserResponse")]
        ServiceClientProxy.EzServiceReference.SecurityUserActionResult GetSecurityUser(System.Nullable<int> userID, System.Nullable<int> customerID, string userName, System.Nullable<int> originId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceSecurity/GetSecurityUser", ReplyAction="http://tempuri.org/IEzServiceSecurity/GetSecurityUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SecurityUserActionResult> GetSecurityUserAsync(System.Nullable<int> userID, System.Nullable<int> customerID, string userName, System.Nullable<int> originId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/LandRegistryLoad", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/LandRegistryLoadResponse")]
        ServiceClientProxy.EzServiceReference.LandRegistryActionResult LandRegistryLoad(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/LandRegistryLoad", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/LandRegistryLoadResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LandRegistryActionResult> LandRegistryLoadAsync(int customerID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/BackfillLandRegistry2PropertyLink", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/BackfillLandRegistry2PropertyLinkRespon" +
            "se")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLandRegistry2PropertyLink();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/BackfillLandRegistry2PropertyLink", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/BackfillLandRegistry2PropertyLinkRespon" +
            "se")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLandRegistry2PropertyLinkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/LandRegistryEnquiry", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/LandRegistryEnquiryResponse")]
        string LandRegistryEnquiry(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/LandRegistryEnquiry", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/LandRegistryEnquiryResponse")]
        System.Threading.Tasks.Task<string> LandRegistryEnquiryAsync(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/LandRegistryRes", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/LandRegistryResResponse")]
        string LandRegistryRes(int userId, int customerId, string titleNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/LandRegistryRes", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/LandRegistryResResponse")]
        System.Threading.Tasks.Task<string> LandRegistryResAsync(int userId, int customerId, string titleNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/GetZooplaData", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/GetZooplaDataResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData GetZooplaData(int customerId, bool reCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/GetZooplaData", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/GetZooplaDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetZooplaDataAsync(int customerId, bool reCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/GetPropertyStatuses", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/GetPropertyStatusesResponse")]
        ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult GetPropertyStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceLandRegistry/GetPropertyStatuses", ReplyAction="http://tempuri.org/IEzServiceLandRegistry/GetPropertyStatusesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult> GetPropertyStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOfferWithPrerequisites", ReplyAction="http://tempuri.org/IEzService/QuickOfferWithPrerequisitesResponse")]
        ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOfferWithPrerequisites(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOfferWithPrerequisites", ReplyAction="http://tempuri.org/IEzService/QuickOfferWithPrerequisitesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferWithPrerequisitesAsync(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RecordManualPacnetDeposit", ReplyAction="http://tempuri.org/IEzService/RecordManualPacnetDepositResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RecordManualPacnetDeposit(int underwriterId, string underwriterName, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RecordManualPacnetDeposit", ReplyAction="http://tempuri.org/IEzService/RecordManualPacnetDepositResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RecordManualPacnetDepositAsync(int underwriterId, string underwriterName, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RejectUser", ReplyAction="http://tempuri.org/IEzService/RejectUserResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RejectUser(int userId, int customerId, bool bSendToCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RejectUser", ReplyAction="http://tempuri.org/IEzService/RejectUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RejectUserAsync(int userId, int customerId, bool bSendToCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RenewEbayToken", ReplyAction="http://tempuri.org/IEzService/RenewEbayTokenResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RenewEbayToken(int userId, int customerId, string marketplaceName, string eBayAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RenewEbayToken", ReplyAction="http://tempuri.org/IEzService/RenewEbayTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RenewEbayTokenAsync(int userId, int customerId, string marketplaceName, string eBayAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequestCashWithoutTakenLoan", ReplyAction="http://tempuri.org/IEzService/RequestCashWithoutTakenLoanResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RequestCashWithoutTakenLoan(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequestCashWithoutTakenLoan", ReplyAction="http://tempuri.org/IEzService/RequestCashWithoutTakenLoanResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequestCashWithoutTakenLoanAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveAgreement", ReplyAction="http://tempuri.org/IEzService/SaveAgreementResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SaveAgreement(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveAgreement", ReplyAction="http://tempuri.org/IEzService/SaveAgreementResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveAgreementAsync(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveConfigTable", ReplyAction="http://tempuri.org/IEzService/SaveConfigTableResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult SaveConfigTable(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveConfigTable", ReplyAction="http://tempuri.org/IEzService/SaveConfigTableResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SaveConfigTableAsync(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendPendingMails", ReplyAction="http://tempuri.org/IEzService/SendPendingMailsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SendPendingMails(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendPendingMails", ReplyAction="http://tempuri.org/IEzService/SendPendingMailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SendPendingMailsAsync(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendSms", ReplyAction="http://tempuri.org/IEzService/SendSmsResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult SendSms(int userId, int underwriterId, string phone, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendSms", ReplyAction="http://tempuri.org/IEzService/SendSmsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SendSmsAsync(int userId, int underwriterId, string phone, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenueResponse")]
        ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult SetCustomerManualAnnualizedRevenue(int nCustomerID, decimal nRevenue, string sComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> SetCustomerManualAnnualizedRevenueAsync(int nCustomerID, decimal nRevenue, string sComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetLateLoanStatus", ReplyAction="http://tempuri.org/IEzService/SetLateLoanStatusResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SetLateLoanStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetLateLoanStatus", ReplyAction="http://tempuri.org/IEzService/SetLateLoanStatusResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SetLateLoanStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Temp_BackFillMedals", ReplyAction="http://tempuri.org/IEzService/Temp_BackFillMedalsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Temp_BackFillMedals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Temp_BackFillMedals", ReplyAction="http://tempuri.org/IEzService/Temp_BackFillMedalsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> Temp_BackFillMedalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TransferCashFailed", ReplyAction="http://tempuri.org/IEzService/TransferCashFailedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData TransferCashFailed(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TransferCashFailed", ReplyAction="http://tempuri.org/IEzService/TransferCashFailedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TransferCashFailedAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateConfigurationVariables", ReplyAction="http://tempuri.org/IEzService/UpdateConfigurationVariablesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateConfigurationVariables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateConfigurationVariables", ReplyAction="http://tempuri.org/IEzService/UpdateConfigurationVariablesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateConfigurationVariablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateCurrencyRates", ReplyAction="http://tempuri.org/IEzService/UpdateCurrencyRatesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateCurrencyRates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateCurrencyRates", ReplyAction="http://tempuri.org/IEzService/UpdateCurrencyRatesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateCurrencyRatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateExperianDirectorDetails", ReplyAction="http://tempuri.org/IEzService/UpdateExperianDirectorDetailsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateExperianDirectorDetails(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateExperianDirectorDetails", ReplyAction="http://tempuri.org/IEzService/UpdateExperianDirectorDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateExperianDirectorDetailsAsync(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateGoogleAnalytics", ReplyAction="http://tempuri.org/IEzService/UpdateGoogleAnalyticsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateGoogleAnalytics(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateGoogleAnalytics", ReplyAction="http://tempuri.org/IEzService/UpdateGoogleAnalyticsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateGoogleAnalyticsAsync(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateMarketplace", ReplyAction="http://tempuri.org/IEzService/UpdateMarketplaceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateMarketplace(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateMarketplace", ReplyAction="http://tempuri.org/IEzService/UpdateMarketplaceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateMarketplaceAsync(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateTransactionStatus", ReplyAction="http://tempuri.org/IEzService/UpdateTransactionStatusResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateTransactionStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateTransactionStatus", ReplyAction="http://tempuri.org/IEzService/UpdateTransactionStatusResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateTransactionStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ValidateMobileCode", ReplyAction="http://tempuri.org/IEzService/ValidateMobileCodeResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ValidateMobileCode(string phone, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ValidateMobileCode", ReplyAction="http://tempuri.org/IEzService/ValidateMobileCodeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ValidateMobileCodeAsync(string phone, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VipRequest", ReplyAction="http://tempuri.org/IEzService/VipRequestResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VipRequest(int customerId, string fullname, string email, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VipRequest", ReplyAction="http://tempuri.org/IEzService/VipRequestResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VipRequestAsync(int customerId, string fullname, string email, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/XDaysDue", ReplyAction="http://tempuri.org/IEzService/XDaysDueResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData XDaysDue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/XDaysDue", ReplyAction="http://tempuri.org/IEzService/XDaysDueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> XDaysDueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ChangeLotteryPlayerStatus", ReplyAction="http://tempuri.org/IEzService/ChangeLotteryPlayerStatusResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ChangeLotteryPlayerStatus(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ChangeLotteryPlayerStatus", ReplyAction="http://tempuri.org/IEzService/ChangeLotteryPlayerStatusResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ChangeLotteryPlayerStatusAsync(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PlayLottery", ReplyAction="http://tempuri.org/IEzService/PlayLotteryResponse")]
        ServiceClientProxy.EzServiceReference.LotteryActionResult PlayLottery(int customerID, System.Guid playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PlayLottery", ReplyAction="http://tempuri.org/IEzService/PlayLotteryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LotteryActionResult> PlayLotteryAsync(int customerID, System.Guid playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EnlistLottery", ReplyAction="http://tempuri.org/IEzService/EnlistLotteryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EnlistLottery(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EnlistLottery", ReplyAction="http://tempuri.org/IEzService/EnlistLotteryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EnlistLotteryAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerAvaliableCredit", ReplyAction="http://tempuri.org/IEzService/CustomerAvaliableCreditResponse")]
        ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult CustomerAvaliableCredit(string customerRefNum, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerAvaliableCredit", ReplyAction="http://tempuri.org/IEzService/CustomerAvaliableCreditResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult> CustomerAvaliableCreditAsync(string customerRefNum, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequalifyCustomer", ReplyAction="http://tempuri.org/IEzService/RequalifyCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RequalifyCustomer(string customerRefNum, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequalifyCustomer", ReplyAction="http://tempuri.org/IEzService/RequalifyCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequalifyCustomerAsync(string customerRefNum, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaleContract", ReplyAction="http://tempuri.org/IEzService/SaleContractResponse")]
        ServiceClientProxy.EzServiceReference.AlibabaSaleContractActionResult SaleContract(Ezbob.Backend.Models.ExternalAPI.AlibabaContractDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaleContract", ReplyAction="http://tempuri.org/IEzService/SaleContractResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AlibabaSaleContractActionResult> SaleContractAsync(Ezbob.Backend.Models.ExternalAPI.AlibabaContractDto dto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DataSharing", ReplyAction="http://tempuri.org/IEzService/DataSharingResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DataSharing(int customerID, DbConstants.AlibabaBusinessType businessType, System.Nullable<int> uwID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DataSharing", ReplyAction="http://tempuri.org/IEzService/DataSharingResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DataSharingAsync(int customerID, DbConstants.AlibabaBusinessType businessType, System.Nullable<int> uwID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveApiCall", ReplyAction="http://tempuri.org/IEzService/SaveApiCallResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SaveApiCall(Ezbob.Backend.Models.ExternalAPI.ApiCallData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveApiCall", ReplyAction="http://tempuri.org/IEzService/SaveApiCallResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveApiCallAsync(Ezbob.Backend.Models.ExternalAPI.ApiCallData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyEnoughAvailableFunds", ReplyAction="http://tempuri.org/IEzService/VerifyEnoughAvailableFundsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyEnoughAvailableFunds(int underwriterId, decimal deductAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyEnoughAvailableFunds", ReplyAction="http://tempuri.org/IEzService/VerifyEnoughAvailableFundsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyEnoughAvailableFundsAsync(int underwriterId, decimal deductAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeLtdResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeLtd(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeLtdAsync(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeNonLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeNonLtdResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeNonLtd(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeNonLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeNonLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeNonLtdAsync(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianTarget", ReplyAction="http://tempuri.org/IEzService/ExperianTargetResponse")]
        ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult ExperianTarget(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianTarget", ReplyAction="http://tempuri.org/IEzService/ExperianTargetResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult> ExperianTargetAsync(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/WriteToServiceLog", ReplyAction="http://tempuri.org/IEzService/WriteToServiceLogResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData WriteToServiceLog(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/WriteToServiceLog", ReplyAction="http://tempuri.org/IEzService/WriteToServiceLogResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToServiceLogAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoan", ReplyAction="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoanResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedWithoutOpenLoan(int customerID, int userID, decimal amount, string paypointTransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoan", ReplyAction="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoanResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedWithoutOpenLoanAsync(int customerID, int userID, decimal amount, string paypointTransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TopUpDelivery", ReplyAction="http://tempuri.org/IEzService/TopUpDeliveryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData TopUpDelivery(int underwriterId, decimal amount, int contentCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TopUpDelivery", ReplyAction="http://tempuri.org/IEzService/TopUpDeliveryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TopUpDeliveryAsync(int underwriterId, decimal amount, int contentCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PacnetDelivery", ReplyAction="http://tempuri.org/IEzService/PacnetDeliveryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PacnetDelivery(int underwriterId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PacnetDelivery", ReplyAction="http://tempuri.org/IEzService/PacnetDeliveryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PacnetDeliveryAsync(int underwriterId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillDailyLoanStats", ReplyAction="http://tempuri.org/IEzService/BackfillDailyLoanStatsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillDailyLoanStats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillDailyLoanStats", ReplyAction="http://tempuri.org/IEzService/BackfillDailyLoanStatsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillDailyLoanStatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetLoanCommissionDefaults", ReplyAction="http://tempuri.org/IEzService/GetLoanCommissionDefaultsResponse")]
        ServiceClientProxy.EzServiceReference.LoanCommissionDefaultsActionResult GetLoanCommissionDefaults(int underwriterID, long cashRequestID, decimal loanAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetLoanCommissionDefaults", ReplyAction="http://tempuri.org/IEzService/GetLoanCommissionDefaultsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LoanCommissionDefaultsActionResult> GetLoanCommissionDefaultsAsync(int underwriterID, long cashRequestID, decimal loanAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetIncomeSms", ReplyAction="http://tempuri.org/IEzService/GetIncomeSmsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData GetIncomeSms(System.Nullable<System.DateTime> date, bool isYesterday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetIncomeSms", ReplyAction="http://tempuri.org/IEzService/GetIncomeSmsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetIncomeSmsAsync(System.Nullable<System.DateTime> date, bool isYesterday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadApplicationInfo", ReplyAction="http://tempuri.org/IEzService/LoadApplicationInfoResponse")]
        ServiceClientProxy.EzServiceReference.ApplicationInfoResult LoadApplicationInfo(System.Nullable<int> underwriterID, int customerID, System.Nullable<long> cashRequestID, System.Nullable<System.DateTime> now);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadApplicationInfo", ReplyAction="http://tempuri.org/IEzService/LoadApplicationInfoResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ApplicationInfoResult> LoadApplicationInfoAsync(System.Nullable<int> underwriterID, int customerID, System.Nullable<long> cashRequestID, System.Nullable<System.DateTime> now);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetManualDecision", ReplyAction="http://tempuri.org/IEzService/SetManualDecisionResponse")]
        ServiceClientProxy.EzServiceReference.StringStringMapActionResult SetManualDecision(Ezbob.Backend.Models.DecisionModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetManualDecision", ReplyAction="http://tempuri.org/IEzService/SetManualDecisionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringStringMapActionResult> SetManualDecisionAsync(Ezbob.Backend.Models.DecisionModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BuildMultiBrandLoanSummary", ReplyAction="http://tempuri.org/IEzService/BuildMultiBrandLoanSummaryResponse")]
        ServiceClientProxy.EzServiceReference.MultiBrandLoanSummaryActionResult BuildMultiBrandLoanSummary(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BuildMultiBrandLoanSummary", ReplyAction="http://tempuri.org/IEzService/BuildMultiBrandLoanSummaryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MultiBrandLoanSummaryActionResult> BuildMultiBrandLoanSummaryAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadDecisionHistory", ReplyAction="http://tempuri.org/IEzService/LoadDecisionHistoryResponse")]
        ServiceClientProxy.EzServiceReference.DecisionHistoryResult LoadDecisionHistory(int customerID, int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadDecisionHistory", ReplyAction="http://tempuri.org/IEzService/LoadDecisionHistoryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecisionHistoryResult> LoadDecisionHistoryAsync(int customerID, int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadMessagesSentToUser", ReplyAction="http://tempuri.org/IEzService/LoadMessagesSentToUserResponse")]
        ServiceClientProxy.EzServiceReference.MessagesListActionResult LoadMessagesSentToUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadMessagesSentToUser", ReplyAction="http://tempuri.org/IEzService/LoadMessagesSentToUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MessagesListActionResult> LoadMessagesSentToUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetSlidersData", ReplyAction="http://tempuri.org/IEzService/GetSlidersDataResponse")]
        ServiceClientProxy.EzServiceReference.SlidersDataActionResults GetSlidersData(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetSlidersData", ReplyAction="http://tempuri.org/IEzService/GetSlidersDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SlidersDataActionResults> GetSlidersDataAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/AddHistoryDirector", ReplyAction="http://tempuri.org/IEzService/AddHistoryDirectorResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData AddHistoryDirector(Ezbob.Backend.Models.Esigner Edirector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/AddHistoryDirector", ReplyAction="http://tempuri.org/IEzService/AddHistoryDirectorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddHistoryDirectorAsync(Ezbob.Backend.Models.Esigner Edirector);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ApprovedUser", ReplyAction="http://tempuri.org/IEzService/ApprovedUserResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ApprovedUser(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ApprovedUser", ReplyAction="http://tempuri.org/IEzService/ApprovedUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ApprovedUserAsync(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillAml", ReplyAction="http://tempuri.org/IEzService/BackfillAmlResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillAml();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillAml", ReplyAction="http://tempuri.org/IEzService/BackfillAmlResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillAmlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackFillExperianNonLtdScoreText", ReplyAction="http://tempuri.org/IEzService/BackFillExperianNonLtdScoreTextResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackFillExperianNonLtdScoreText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackFillExperianNonLtdScoreText", ReplyAction="http://tempuri.org/IEzService/BackFillExperianNonLtdScoreTextResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackFillExperianNonLtdScoreTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianConsumer", ReplyAction="http://tempuri.org/IEzService/BackfillExperianConsumerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianConsumer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianConsumer", ReplyAction="http://tempuri.org/IEzService/BackfillExperianConsumerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianConsumerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianDirectors", ReplyAction="http://tempuri.org/IEzService/BackfillExperianDirectorsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianDirectors(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianDirectors", ReplyAction="http://tempuri.org/IEzService/BackfillExperianDirectorsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianDirectorsAsync(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianLtd", ReplyAction="http://tempuri.org/IEzService/BackfillExperianLtdResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianLtd();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianLtd", ReplyAction="http://tempuri.org/IEzService/BackfillExperianLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianLtdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianLtdScoreText", ReplyAction="http://tempuri.org/IEzService/BackfillExperianLtdScoreTextResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianLtdScoreText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianLtdScoreText", ReplyAction="http://tempuri.org/IEzService/BackfillExperianLtdScoreTextResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianLtdScoreTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevance", ReplyAction="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevanceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillHmrcBusinessRelevance();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevance", ReplyAction="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevanceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillHmrcBusinessRelevanceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillMedalForAll", ReplyAction="http://tempuri.org/IEzService/BackfillMedalForAllResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillMedalForAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillMedalForAll", ReplyAction="http://tempuri.org/IEzService/BackfillMedalForAllResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillMedalForAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillNonLimitedCompanies", ReplyAction="http://tempuri.org/IEzService/BackfillNonLimitedCompaniesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillNonLimitedCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillNonLimitedCompanies", ReplyAction="http://tempuri.org/IEzService/BackfillNonLimitedCompaniesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillNonLimitedCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillTurnover", ReplyAction="http://tempuri.org/IEzService/BackfillTurnoverResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillTurnover();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillTurnover", ReplyAction="http://tempuri.org/IEzService/BackfillTurnoverResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillTurnoverAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillZooplaValue", ReplyAction="http://tempuri.org/IEzService/BackfillZooplaValueResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillZooplaValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillZooplaValue", ReplyAction="http://tempuri.org/IEzService/BackfillZooplaValueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillZooplaValueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillBrokerCommissionInvoice", ReplyAction="http://tempuri.org/IEzService/BackfillBrokerCommissionInvoiceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillBrokerCommissionInvoice();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillBrokerCommissionInvoice", ReplyAction="http://tempuri.org/IEzService/BackfillBrokerCommissionInvoiceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillBrokerCommissionInvoiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisGenerate", ReplyAction="http://tempuri.org/IEzService/CaisGenerateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CaisGenerate(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisGenerate", ReplyAction="http://tempuri.org/IEzService/CaisGenerateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisGenerateAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisUpdate", ReplyAction="http://tempuri.org/IEzService/CaisUpdateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CaisUpdate(int userId, int caisId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisUpdate", ReplyAction="http://tempuri.org/IEzService/CaisUpdateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisUpdateAsync(int userId, int caisId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateMedal", ReplyAction="http://tempuri.org/IEzService/CalculateMedalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CalculateMedal(int underwriterId, int customerId, System.Nullable<long> cashRequestID, System.Nullable<long> nlCashRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateMedal", ReplyAction="http://tempuri.org/IEzService/CalculateMedalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateMedalAsync(int underwriterId, int customerId, System.Nullable<long> cashRequestID, System.Nullable<long> nlCashRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateModelsAndAffordability", ReplyAction="http://tempuri.org/IEzService/CalculateModelsAndAffordabilityResponse")]
        ServiceClientProxy.EzServiceReference.MarketplacesActionResult CalculateModelsAndAffordability(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateModelsAndAffordability", ReplyAction="http://tempuri.org/IEzService/CalculateModelsAndAffordabilityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MarketplacesActionResult> CalculateModelsAndAffordabilityAsync(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CashTransferred", ReplyAction="http://tempuri.org/IEzService/CashTransferredResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CashTransferred(int customerId, decimal amount, string loanRefNum, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CashTransferred", ReplyAction="http://tempuri.org/IEzService/CashTransferredResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CashTransferredAsync(int customerId, decimal amount, string loanRefNum, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAml", ReplyAction="http://tempuri.org/IEzService/CheckAmlResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckAml(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAml", ReplyAction="http://tempuri.org/IEzService/CheckAmlResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlAsync(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAmlCustom", ReplyAction="http://tempuri.org/IEzService/CheckAmlCustomResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckAmlCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAmlCustom", ReplyAction="http://tempuri.org/IEzService/CheckAmlCustomResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwa", ReplyAction="http://tempuri.org/IEzService/CheckBwaResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwa(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwa", ReplyAction="http://tempuri.org/IEzService/CheckBwaResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaAsync(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwaCustom", ReplyAction="http://tempuri.org/IEzService/CheckBwaCustomResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwaCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwaCustom", ReplyAction="http://tempuri.org/IEzService/CheckBwaCustomResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckLtdCompanyCache", ReplyAction="http://tempuri.org/IEzService/CheckLtdCompanyCacheResponse")]
        ServiceClientProxy.EzServiceReference.ExperianLtdActionResult CheckLtdCompanyCache(int userId, string sCompanyRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckLtdCompanyCache", ReplyAction="http://tempuri.org/IEzService/CheckLtdCompanyCacheResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> CheckLtdCompanyCacheAsync(int userId, string sCompanyRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CompanyFilesUpload", ReplyAction="http://tempuri.org/IEzService/CompanyFilesUploadResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CompanyFilesUpload(int customerId, string fileName, byte[] fileContent, string fileContentType, bool isBankStatement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CompanyFilesUpload", ReplyAction="http://tempuri.org/IEzService/CompanyFilesUploadResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CompanyFilesUploadAsync(int customerId, string fileName, byte[] fileContent, string fileContentType, bool isBankStatement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CrmLoadLookups", ReplyAction="http://tempuri.org/IEzService/CrmLoadLookupsResponse")]
        ServiceClientProxy.EzServiceReference.CrmLookupsActionResult CrmLoadLookups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CrmLoadLookups", ReplyAction="http://tempuri.org/IEzService/CrmLoadLookupsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CrmLookupsActionResult> CrmLoadLookupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerBankAccountIsAlreadyAddedEmail", ReplyAction="http://tempuri.org/IEzService/CustomerBankAccountIsAlreadyAddedEmailResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CustomerBankAccountIsAlreadyAddedEmail(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerBankAccountIsAlreadyAddedEmail", ReplyAction="http://tempuri.org/IEzService/CustomerBankAccountIsAlreadyAddedEmailResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CustomerBankAccountIsAlreadyAddedEmailAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DeleteExperianDirector", ReplyAction="http://tempuri.org/IEzService/DeleteExperianDirectorResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DeleteExperianDirector(int nDirectorID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DeleteExperianDirector", ReplyAction="http://tempuri.org/IEzService/DeleteExperianDirectorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DeleteExperianDirectorAsync(int nDirectorID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisableCurrentManualPacnetDeposits", ReplyAction="http://tempuri.org/IEzService/DisableCurrentManualPacnetDepositsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DisableCurrentManualPacnetDeposits(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisableCurrentManualPacnetDeposits", ReplyAction="http://tempuri.org/IEzService/DisableCurrentManualPacnetDepositsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisableCurrentManualPacnetDepositsAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisplayMarketplaceSecurityData", ReplyAction="http://tempuri.org/IEzService/DisplayMarketplaceSecurityDataResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DisplayMarketplaceSecurityData(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisplayMarketplaceSecurityData", ReplyAction="http://tempuri.org/IEzService/DisplayMarketplaceSecurityDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisplayMarketplaceSecurityDataAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailHmrcParsingErrors", ReplyAction="http://tempuri.org/IEzService/EmailHmrcParsingErrorsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailHmrcParsingErrors(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailHmrcParsingErrors", ReplyAction="http://tempuri.org/IEzService/EmailHmrcParsingErrorsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailHmrcParsingErrorsAsync(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailRolloverAdded", ReplyAction="http://tempuri.org/IEzService/EmailRolloverAddedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailRolloverAdded(int userId, int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailRolloverAdded", ReplyAction="http://tempuri.org/IEzService/EmailRolloverAddedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailRolloverAddedAsync(int userId, int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplaces", ReplyAction="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplacesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EncryptChannelGrabberMarketplaces();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplaces", ReplyAction="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplacesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EncryptChannelGrabberMarketplacesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Escalated", ReplyAction="http://tempuri.org/IEzService/EscalatedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Escalated(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Escalated", ReplyAction="http://tempuri.org/IEzService/EscalatedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EscalatedAsync(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignProcessPending", ReplyAction="http://tempuri.org/IEzService/EsignProcessPendingResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EsignProcessPending(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignProcessPending", ReplyAction="http://tempuri.org/IEzService/EsignProcessPendingResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EsignProcessPendingAsync(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignSend", ReplyAction="http://tempuri.org/IEzService/EsignSendResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult EsignSend(int userId, EchoSignLib.EchoSignEnvelope[] oPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignSend", ReplyAction="http://tempuri.org/IEzService/EsignSendResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> EsignSendAsync(int userId, EchoSignLib.EchoSignEnvelope[] oPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianCompanyCheck", ReplyAction="http://tempuri.org/IEzService/ExperianCompanyCheckResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ExperianCompanyCheck(int userId, int customerId, bool forceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianCompanyCheck", ReplyAction="http://tempuri.org/IEzService/ExperianCompanyCheckResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianCompanyCheckAsync(int userId, int customerId, bool forceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianConsumerCheck", ReplyAction="http://tempuri.org/IEzService/ExperianConsumerCheckResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ExperianConsumerCheck(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianConsumerCheck", ReplyAction="http://tempuri.org/IEzService/ExperianConsumerCheckResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianConsumerCheckAsync(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FindAccountsToUpdate", ReplyAction="http://tempuri.org/IEzService/FindAccountsToUpdateResponse")]
        ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult FindAccountsToUpdate(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FindAccountsToUpdate", ReplyAction="http://tempuri.org/IEzService/FindAccountsToUpdateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult> FindAccountsToUpdateAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FinishWizard", ReplyAction="http://tempuri.org/IEzService/FinishWizardResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData FinishWizard(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FinishWizard", ReplyAction="http://tempuri.org/IEzService/FinishWizardResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FinishWizardAsync(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FirstOfMonthStatusNotifier", ReplyAction="http://tempuri.org/IEzService/FirstOfMonthStatusNotifierResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData FirstOfMonthStatusNotifier();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FirstOfMonthStatusNotifier", ReplyAction="http://tempuri.org/IEzService/FirstOfMonthStatusNotifierResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FirstOfMonthStatusNotifierAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FraudChecker", ReplyAction="http://tempuri.org/IEzService/FraudCheckerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData FraudChecker(int customerId, Ezbob.Backend.Models.FraudMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FraudChecker", ReplyAction="http://tempuri.org/IEzService/FraudCheckerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FraudCheckerAsync(int customerId, Ezbob.Backend.Models.FraudMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GenerateMobileCode", ReplyAction="http://tempuri.org/IEzService/GenerateMobileCodeResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult GenerateMobileCode(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GenerateMobileCode", ReplyAction="http://tempuri.org/IEzService/GenerateMobileCodeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> GenerateMobileCodeAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetAvailableFunds", ReplyAction="http://tempuri.org/IEzService/GetAvailableFundsResponse")]
        ServiceClientProxy.EzServiceReference.AvailableFundsActionResult GetAvailableFunds(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetAvailableFunds", ReplyAction="http://tempuri.org/IEzService/GetAvailableFundsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AvailableFundsActionResult> GetAvailableFundsAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCashFailed", ReplyAction="http://tempuri.org/IEzService/GetCashFailedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData GetCashFailed(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCashFailed", ReplyAction="http://tempuri.org/IEzService/GetCashFailedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetCashFailedAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyCaisDataForAlerts", ReplyAction="http://tempuri.org/IEzService/GetCompanyCaisDataForAlertsResponse")]
        ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult GetCompanyCaisDataForAlerts(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyCaisDataForAlerts", ReplyAction="http://tempuri.org/IEzService/GetCompanyCaisDataForAlertsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult> GetCompanyCaisDataForAlertsAsync(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCompanyScore", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCompanyScoreResponse")]
        ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult GetCompanyDataForCompanyScore(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCompanyScore", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCompanyScoreResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult> GetCompanyDataForCompanyScoreAsync(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCreditBureau", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCreditBureauResponse")]
        ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult GetCompanyDataForCreditBureau(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCreditBureau", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCreditBureauResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult> GetCompanyDataForCreditBureauAsync(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyFile", ReplyAction="http://tempuri.org/IEzService/GetCompanyFileResponse")]
        byte[] GetCompanyFile(int userId, int companyFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyFile", ReplyAction="http://tempuri.org/IEzService/GetCompanyFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetCompanyFileAsync(int userId, int companyFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanySeniority", ReplyAction="http://tempuri.org/IEzService/GetCompanySeniorityResponse")]
        ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult GetCompanySeniority(int customerId, bool isLimited, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanySeniority", ReplyAction="http://tempuri.org/IEzService/GetCompanySeniorityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult> GetCompanySeniorityAsync(int customerId, bool isLimited, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetConfigTable", ReplyAction="http://tempuri.org/IEzService/GetConfigTableResponse")]
        ServiceClientProxy.EzServiceReference.ConfigTableActionResult GetConfigTable(int nUnderwriterID, string sTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetConfigTable", ReplyAction="http://tempuri.org/IEzService/GetConfigTableResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ConfigTableActionResult> GetConfigTableAsync(int nUnderwriterID, string sTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnover", ReplyAction="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnoverResponse")]
        ServiceClientProxy.EzServiceReference.DecimalActionResult GetCurrentCustomerAnnualTurnover(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnover", ReplyAction="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnoverResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecimalActionResult> GetCurrentCustomerAnnualTurnoverAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenueResponse")]
        ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult GetCustomerManualAnnualizedRevenue(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> GetCustomerManualAnnualizedRevenueAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerState", ReplyAction="http://tempuri.org/IEzService/GetCustomerStateResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult GetCustomerState(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerState", ReplyAction="http://tempuri.org/IEzService/GetCustomerStateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> GetCustomerStateAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalance", ReplyAction="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalanceResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult GetExperianAccountsCurrentBalance(int customerId, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalance", ReplyAction="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalanceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianAccountsCurrentBalanceAsync(int customerId, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianCompanyCacheDate", ReplyAction="http://tempuri.org/IEzService/GetExperianCompanyCacheDateResponse")]
        ServiceClientProxy.EzServiceReference.DateTimeActionResult GetExperianCompanyCacheDate(int userId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianCompanyCacheDate", ReplyAction="http://tempuri.org/IEzService/GetExperianCompanyCacheDateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DateTimeActionResult> GetExperianCompanyCacheDateAsync(int userId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianConsumerScore", ReplyAction="http://tempuri.org/IEzService/GetExperianConsumerScoreResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult GetExperianConsumerScore(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianConsumerScore", ReplyAction="http://tempuri.org/IEzService/GetExperianConsumerScoreResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianConsumerScoreAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetWizardConfigs", ReplyAction="http://tempuri.org/IEzService/GetWizardConfigsResponse")]
        ServiceClientProxy.EzServiceReference.WizardConfigsActionResult GetWizardConfigs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetWizardConfigs", ReplyAction="http://tempuri.org/IEzService/GetWizardConfigsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.WizardConfigsActionResult> GetWizardConfigsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCollectionSnailMail", ReplyAction="http://tempuri.org/IEzService/GetCollectionSnailMailResponse")]
        ServiceClientProxy.EzServiceReference.CollectionSnailMailActionResult GetCollectionSnailMail(int userID, int collectionSnailMailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCollectionSnailMail", ReplyAction="http://tempuri.org/IEzService/GetCollectionSnailMailResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CollectionSnailMailActionResult> GetCollectionSnailMailAsync(int userID, int collectionSnailMailID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/IovationCheck", ReplyAction="http://tempuri.org/IEzService/IovationCheckResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData IovationCheck(Ezbob.Backend.Models.IovationCheckModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/IovationCheck", ReplyAction="http://tempuri.org/IEzService/IovationCheckResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> IovationCheckAsync(Ezbob.Backend.Models.IovationCheckModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LateBy14Days", ReplyAction="http://tempuri.org/IEzService/LateBy14DaysResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LateBy14Days();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LateBy14Days", ReplyAction="http://tempuri.org/IEzService/LateBy14DaysResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LateBy14DaysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadCustomerLeadFieldNames", ReplyAction="http://tempuri.org/IEzService/LoadCustomerLeadFieldNamesResponse")]
        ServiceClientProxy.EzServiceReference.StringStringMapActionResult LoadCustomerLeadFieldNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadCustomerLeadFieldNames", ReplyAction="http://tempuri.org/IEzService/LoadCustomerLeadFieldNamesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringStringMapActionResult> LoadCustomerLeadFieldNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatureFile", ReplyAction="http://tempuri.org/IEzService/LoadEsignatureFileResponse")]
        ServiceClientProxy.EzServiceReference.EsignatureFileActionResult LoadEsignatureFile(int userId, long nEsignatureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatureFile", ReplyAction="http://tempuri.org/IEzService/LoadEsignatureFileResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureFileActionResult> LoadEsignatureFileAsync(int userId, long nEsignatureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatures", ReplyAction="http://tempuri.org/IEzService/LoadEsignaturesResponse")]
        ServiceClientProxy.EzServiceReference.EsignatureListActionResult LoadEsignatures(int userId, System.Nullable<int> nCustomerID, bool bPollStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatures", ReplyAction="http://tempuri.org/IEzService/LoadEsignaturesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureListActionResult> LoadEsignaturesAsync(int userId, System.Nullable<int> nCustomerID, bool bPollStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumer", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerResponse")]
        ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult LoadExperianConsumer(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumer", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> LoadExperianConsumerAsync(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumerMortgageData", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerMortgageDataResponse")]
        ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult LoadExperianConsumerMortgageData(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumerMortgageData", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerMortgageDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult> LoadExperianConsumerMortgageDataAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianLtd", ReplyAction="http://tempuri.org/IEzService/LoadExperianLtdResponse")]
        ServiceClientProxy.EzServiceReference.ExperianLtdActionResult LoadExperianLtd(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianLtd", ReplyAction="http://tempuri.org/IEzService/LoadExperianLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> LoadExperianLtdAsync(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadManualVatReturnPeriods", ReplyAction="http://tempuri.org/IEzService/LoadManualVatReturnPeriodsResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult LoadManualVatReturnPeriods(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadManualVatReturnPeriods", ReplyAction="http://tempuri.org/IEzService/LoadManualVatReturnPeriodsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult> LoadManualVatReturnPeriodsAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanFullyPaid", ReplyAction="http://tempuri.org/IEzService/LoanFullyPaidResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LoanFullyPaid(int customerId, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanFullyPaid", ReplyAction="http://tempuri.org/IEzService/LoanFullyPaidResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LoanFullyPaidAsync(int customerId, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanStatusAfterPayment", ReplyAction="http://tempuri.org/IEzService/LoanStatusAfterPaymentResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LoanStatusAfterPayment(int userId, int customerID, string customerEmail, int loanID, decimal paymentAmount, bool sendMail, System.Nullable<decimal> balance, System.Nullable<bool> isPaidOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanStatusAfterPayment", ReplyAction="http://tempuri.org/IEzService/LoanStatusAfterPaymentResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LoanStatusAfterPaymentAsync(int userId, int customerID, string customerEmail, int loanID, decimal paymentAmount, bool sendMail, System.Nullable<decimal> balance, System.Nullable<bool> isPaidOff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MarketplaceInstantUpdate", ReplyAction="http://tempuri.org/IEzService/MarketplaceInstantUpdateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MarketplaceInstantUpdate(int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MarketplaceInstantUpdate", ReplyAction="http://tempuri.org/IEzService/MarketplaceInstantUpdateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarketplaceInstantUpdateAsync(int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlAndBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlAndBwaInformationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlAndBwaInformation(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlAndBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlAndBwaInformationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlAndBwaInformationAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlInformationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlInformation(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlInformationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlInformationAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreBwaInformationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MoreBwaInformation(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreBwaInformationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreBwaInformationAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/NotifySalesOnNewCustomer", ReplyAction="http://tempuri.org/IEzService/NotifySalesOnNewCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData NotifySalesOnNewCustomer(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/NotifySalesOnNewCustomer", ReplyAction="http://tempuri.org/IEzService/NotifySalesOnNewCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NotifySalesOnNewCustomerAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianConsumer", ReplyAction="http://tempuri.org/IEzService/ParseExperianConsumerResponse")]
        ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult ParseExperianConsumer(long nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianConsumer", ReplyAction="http://tempuri.org/IEzService/ParseExperianConsumerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> ParseExperianConsumerAsync(long nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianLtd", ReplyAction="http://tempuri.org/IEzService/ParseExperianLtdResponse")]
        ServiceClientProxy.EzServiceReference.ExperianLtdActionResult ParseExperianLtd(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianLtd", ReplyAction="http://tempuri.org/IEzService/ParseExperianLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> ParseExperianLtdAsync(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordRestored", ReplyAction="http://tempuri.org/IEzService/PasswordRestoredResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PasswordRestored(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordRestored", ReplyAction="http://tempuri.org/IEzService/PasswordRestoredResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PasswordRestoredAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayEarly", ReplyAction="http://tempuri.org/IEzService/PayEarlyResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayEarly(int customerId, decimal amount, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayEarly", ReplyAction="http://tempuri.org/IEzService/PayEarlyResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayEarlyAsync(int customerId, decimal amount, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedByUnderwriter", ReplyAction="http://tempuri.org/IEzService/PayPointAddedByUnderwriterResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedByUnderwriter(int customerId, string cardno, string underwriterName, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedByUnderwriter", ReplyAction="http://tempuri.org/IEzService/PayPointAddedByUnderwriterResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedByUnderwriterAsync(int customerId, string cardno, string underwriterName, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointCharger", ReplyAction="http://tempuri.org/IEzService/PayPointChargerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointCharger();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointCharger", ReplyAction="http://tempuri.org/IEzService/PayPointChargerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointChargerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointNameValidationFailed", ReplyAction="http://tempuri.org/IEzService/PayPointNameValidationFailedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointNameValidationFailed(int userId, int customerId, string cardHolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointNameValidationFailed", ReplyAction="http://tempuri.org/IEzService/PayPointNameValidationFailedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointNameValidationFailedAsync(int userId, int customerId, string cardHolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PostcodeSaveLog", ReplyAction="http://tempuri.org/IEzService/PostcodeSaveLogResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PostcodeSaveLog(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PostcodeSaveLog", ReplyAction="http://tempuri.org/IEzService/PostcodeSaveLogResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PostcodeSaveLogAsync(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PostcodeNuts", ReplyAction="http://tempuri.org/IEzService/PostcodeNutsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PostcodeNuts(int nUserID, string postcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PostcodeNuts", ReplyAction="http://tempuri.org/IEzService/PostcodeNutsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PostcodeNutsAsync(int nUserID, string postcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOffer", ReplyAction="http://tempuri.org/IEzService/QuickOfferResponse")]
        ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOffer(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOffer", ReplyAction="http://tempuri.org/IEzService/QuickOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferAsync(int customerId, bool saveOfferToDB);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEzServiceChannel : ServiceClientProxy.EzServiceReference.IEzService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EzServiceClient : System.ServiceModel.ClientBase<ServiceClientProxy.EzServiceReference.IEzService>, ServiceClientProxy.EzServiceReference.IEzService {
        
        public EzServiceClient() {
        }
        
        public EzServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EzServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyMedal(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime) {
            return base.Channel.VerifyMedal(topCount, lastCheckedID, includeTest, calculationTime);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyMedalAsync(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime) {
            return base.Channel.VerifyMedalAsync(topCount, lastCheckedID, includeTest, calculationTime);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyApproval(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyApproval(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyApprovalAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyApprovalAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReapproval(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyReapproval(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyReapprovalAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyReapprovalAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReject(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyReject(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRejectAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyRejectAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyRerejection(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyRerejection(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRerejectionAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyRerejectionAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SilentAutomation(int customerID, int underwriterID) {
            return base.Channel.SilentAutomation(customerID, underwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SilentAutomationAsync(int customerID, int underwriterID) {
            return base.Channel.SilentAutomationAsync(customerID, underwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAcceptTerms(int nTermsID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerAcceptTerms(nTermsID, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAcceptTermsAsync(int nTermsID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerAcceptTermsAsync(nTermsID, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddCustomerLead(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerAddCustomerLead(sLeadFirstName, sLeadLastName, sLeadEmail, sLeadAddMode, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddCustomerLeadAsync(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerAddCustomerLeadAsync(sLeadFirstName, sLeadLastName, sLeadEmail, sLeadAddMode, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddBank(Ezbob.Backend.Models.BrokerAddBankModel model) {
            return base.Channel.BrokerAddBank(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddBankAsync(Ezbob.Backend.Models.BrokerAddBankModel model) {
            return base.Channel.BrokerAddBankAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerApproveAndResetCustomerPassword(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst) {
            return base.Channel.BrokerApproveAndResetCustomerPassword(nUnderwriterID, nCustomerID, nLoanAmount, nValidHours, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerApproveAndResetCustomerPasswordAsync(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst) {
            return base.Channel.BrokerApproveAndResetCustomerPasswordAsync(nUnderwriterID, nCustomerID, nLoanAmount, nValidHours, isFirst);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAttachCustomer(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID) {
            return base.Channel.BrokerAttachCustomer(nCustomerID, nBrokerID, nUnderwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAttachCustomerAsync(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID) {
            return base.Channel.BrokerAttachCustomerAsync(nCustomerID, nBrokerID, nUnderwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult BrokerBackFromCustomerWizard(int nLeadID) {
            return base.Channel.BrokerBackFromCustomerWizard(nLeadID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerBackFromCustomerWizardAsync(int nLeadID) {
            return base.Channel.BrokerBackFromCustomerWizardAsync(nLeadID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCheckCustomerRelevance(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken) {
            return base.Channel.BrokerCheckCustomerRelevance(nCustomerID, sCustomerEmail, isAlibaba, sSourceRef, sConfirmationToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCheckCustomerRelevanceAsync(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken) {
            return base.Channel.BrokerCheckCustomerRelevanceAsync(nCustomerID, sCustomerEmail, isAlibaba, sSourceRef, sConfirmationToken);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCustomerWizardComplete(int nCustomerID) {
            return base.Channel.BrokerCustomerWizardComplete(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCustomerWizardCompleteAsync(int nCustomerID) {
            return base.Channel.BrokerCustomerWizardCompleteAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerDeleteCustomerFiles(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerDeleteCustomerFiles(sCustomerRefNum, sContactEmail, aryFileIDs, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerDeleteCustomerFilesAsync(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerDeleteCustomerFilesAsync(sCustomerRefNum, sContactEmail, aryFileIDs, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult BrokerDownloadCustomerFile(string sCustomerRefNum, string sContactEmail, int nFileID, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerDownloadCustomerFile(sCustomerRefNum, sContactEmail, nFileID, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult> BrokerDownloadCustomerFileAsync(string sCustomerRefNum, string sContactEmail, int nFileID, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerDownloadCustomerFileAsync(sCustomerRefNum, sContactEmail, nFileID, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerForceResetCustomerPassword(int nUserID, int nCustomerID) {
            return base.Channel.BrokerForceResetCustomerPassword(nUserID, nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerForceResetCustomerPasswordAsync(int nUserID, int nCustomerID) {
            return base.Channel.BrokerForceResetCustomerPasswordAsync(nUserID, nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult BrokerInstantOffer(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request) {
            return base.Channel.BrokerInstantOffer(request);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult> BrokerInstantOfferAsync(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request) {
            return base.Channel.BrokerInstantOfferAsync(request);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadAcquireCustomer(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken) {
            return base.Channel.BrokerLeadAcquireCustomer(nCustomerID, nLeadID, sFirstName, bBrokerFillsForCustomer, sConfirmationToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadAcquireCustomerAsync(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken) {
            return base.Channel.BrokerLeadAcquireCustomerAsync(nCustomerID, nLeadID, sFirstName, bBrokerFillsForCustomer, sConfirmationToken);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCanFillWizard(int nLeadID, string sLeadEmail, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLeadCanFillWizard(nLeadID, sLeadEmail, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCanFillWizardAsync(int nLeadID, string sLeadEmail, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLeadCanFillWizardAsync(nLeadID, sLeadEmail, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCheckToken(string sToken) {
            return base.Channel.BrokerLeadCheckToken(sToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCheckTokenAsync(string sToken) {
            return base.Channel.BrokerLeadCheckTokenAsync(sToken);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadSendInvitation(int nLeadID, string sBrokerContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLeadSendInvitation(nLeadID, sBrokerContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadSendInvitationAsync(int nLeadID, string sBrokerContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLeadSendInvitationAsync(nLeadID, sBrokerContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult BrokerLoadCustomerDetails(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadCustomerDetails(sCustomerRefNum, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult> BrokerLoadCustomerDetailsAsync(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadCustomerDetailsAsync(sCustomerRefNum, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult BrokerLoadLeadDetails(int leadID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadLeadDetails(leadID, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult> BrokerLoadLeadDetailsAsync(int leadID, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadLeadDetailsAsync(leadID, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult BrokerLoadCustomerFiles(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadCustomerFiles(sCustomerRefNum, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult> BrokerLoadCustomerFilesAsync(string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadCustomerFilesAsync(sCustomerRefNum, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomerList(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadCustomerList(sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomerListAsync(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadCustomerListAsync(sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomersByID(int nBrokerID) {
            return base.Channel.BrokerLoadCustomersByID(nBrokerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomersByIDAsync(int nBrokerID) {
            return base.Channel.BrokerLoadCustomersByIDAsync(nBrokerID);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadOwnProperties(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadOwnProperties(sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadOwnPropertiesAsync(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadOwnPropertiesAsync(sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadPropertiesByID(int nBrokerID) {
            return base.Channel.BrokerLoadPropertiesByID(nBrokerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadPropertiesByIDAsync(int nBrokerID) {
            return base.Channel.BrokerLoadPropertiesByIDAsync(nBrokerID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringListActionResult BrokerLoadSignedTerms(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadSignedTerms(sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> BrokerLoadSignedTermsAsync(string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerLoadSignedTermsAsync(sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult BrokerLoadStaticData(bool bLoadFilesOnly, int originID) {
            return base.Channel.BrokerLoadStaticData(bLoadFilesOnly, originID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult> BrokerLoadStaticDataAsync(bool bLoadFilesOnly, int originID) {
            return base.Channel.BrokerLoadStaticDataAsync(bLoadFilesOnly, originID);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLogin(string sEmail, Ezbob.Backend.Models.DasKennwort oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime, int uiOriginID) {
            return base.Channel.BrokerLogin(sEmail, oPassword, promotionName, promotionPageVisitTime, uiOriginID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoginAsync(string sEmail, Ezbob.Backend.Models.DasKennwort oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime, int uiOriginID) {
            return base.Channel.BrokerLoginAsync(sEmail, oPassword, promotionName, promotionPageVisitTime, uiOriginID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerRestorePassword(string sMobile, string sCode) {
            return base.Channel.BrokerRestorePassword(sMobile, sCode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerRestorePasswordAsync(string sMobile, string sCode) {
            return base.Channel.BrokerRestorePasswordAsync(sMobile, sCode);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult BrokerSaveCrmEntry(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerSaveCrmEntry(sType, nActionID, nStatusID, sComment, sCustomerRefNum, sContactEmail, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerSaveCrmEntryAsync(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerSaveCrmEntryAsync(sType, nActionID, nStatusID, sComment, sCustomerRefNum, sContactEmail, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerSaveUploadedCustomerFile(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerSaveUploadedCustomerFile(sCustomerRefNum, sContactEmail, oFileContents, sFileName, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerSaveUploadedCustomerFileAsync(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.BrokerSaveUploadedCustomerFileAsync(sCustomerRefNum, sContactEmail, oFileContents, sFileName, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerSignup(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    Ezbob.Backend.Models.DasKennwort password, 
                    Ezbob.Backend.Models.DasKennwort passwordAgain, 
                    string sFirmWebSiteUrl, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber, 
                    int uiOriginID) {
            return base.Channel.BrokerSignup(sFirmName, sFirmRegNum, sContactName, sContactEmail, sContactMobile, sMobileCode, sContactOtherPhone, password, passwordAgain, sFirmWebSiteUrl, bIsCaptchEnabled, nBrokerTermsID, sReferredBy, bFCARegistered, sLicenseNumber, uiOriginID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerSignupAsync(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    Ezbob.Backend.Models.DasKennwort password, 
                    Ezbob.Backend.Models.DasKennwort passwordAgain, 
                    string sFirmWebSiteUrl, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber, 
                    int uiOriginID) {
            return base.Channel.BrokerSignupAsync(sFirmName, sFirmRegNum, sContactName, sContactEmail, sContactMobile, sMobileCode, sContactOtherPhone, password, passwordAgain, sFirmWebSiteUrl, bIsCaptchEnabled, nBrokerTermsID, sReferredBy, bFCARegistered, sLicenseNumber, uiOriginID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerTransferCommission() {
            return base.Channel.BrokerTransferCommission();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerTransferCommissionAsync() {
            return base.Channel.BrokerTransferCommissionAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerUpdatePassword(string contactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword, Ezbob.Backend.Models.DasKennwort newPasswordAgain) {
            return base.Channel.BrokerUpdatePassword(contactEmail, origin, oldPassword, newPassword, newPasswordAgain);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerUpdatePasswordAsync(string contactEmail, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword, Ezbob.Backend.Models.DasKennwort newPasswordAgain) {
            return base.Channel.BrokerUpdatePasswordAsync(contactEmail, origin, oldPassword, newPassword, newPasswordAgain);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult IsBroker(string sContactEmail, int uiOrigin) {
            return base.Channel.IsBroker(sContactEmail, uiOrigin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> IsBrokerAsync(string sContactEmail, int uiOrigin) {
            return base.Channel.IsBrokerAsync(sContactEmail, uiOrigin);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult BrokerUpdateEmail(int underwriterID, int brokerID, string newEmail) {
            return base.Channel.BrokerUpdateEmail(underwriterID, brokerID, newEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerUpdateEmailAsync(int underwriterID, int brokerID, string newEmail) {
            return base.Channel.BrokerUpdateEmailAsync(underwriterID, brokerID, newEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult CreateInvestor(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investor, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks) {
            return base.Channel.CreateInvestor(underwriterID, investor, investorContacts, investorBanks);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> CreateInvestorAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investor, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks) {
            return base.Channel.CreateInvestorAsync(underwriterID, investor, investorContacts, investorBanks);
        }
        
        public ServiceClientProxy.EzServiceReference.InvestorActionResult LoadInvestor(int underwriterID, int investorID) {
            return base.Channel.LoadInvestor(underwriterID, investorID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.InvestorActionResult> LoadInvestorAsync(int underwriterID, int investorID) {
            return base.Channel.LoadInvestorAsync(underwriterID, investorID);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ManageInvestorContact(int underwriterID, Ezbob.Backend.Models.Investor.InvestorContactModel investorContact) {
            return base.Channel.ManageInvestorContact(underwriterID, investorContact);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManageInvestorContactAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorContactModel investorContact) {
            return base.Channel.ManageInvestorContactAsync(underwriterID, investorContact);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ManageInvestorBankAccount(int underwriterID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel investorBank) {
            return base.Channel.ManageInvestorBankAccount(underwriterID, investorBank);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManageInvestorBankAccountAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel investorBank) {
            return base.Channel.ManageInvestorBankAccountAsync(underwriterID, investorBank);
        }
        
        public ServiceClientProxy.EzServiceReference.AccountingDataResult LoadAccountingData(int underwriterID) {
            return base.Channel.LoadAccountingData(underwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AccountingDataResult> LoadAccountingDataAsync(int underwriterID) {
            return base.Channel.LoadAccountingDataAsync(underwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.ListInvestorsResult LoadInvestors(int underwriterID) {
            return base.Channel.LoadInvestors(underwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ListInvestorsResult> LoadInvestorsAsync(int underwriterID) {
            return base.Channel.LoadInvestorsAsync(underwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.TransactionsDataResult LoadTransactionsData(int underwriterID, int investorID, int bankAccountTypeID) {
            return base.Channel.LoadTransactionsData(underwriterID, investorID, bankAccountTypeID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.TransactionsDataResult> LoadTransactionsDataAsync(int underwriterID, int investorID, int bankAccountTypeID) {
            return base.Channel.LoadTransactionsDataAsync(underwriterID, investorID, bankAccountTypeID);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult SaveInvestorContactList(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts) {
            return base.Channel.SaveInvestorContactList(underwriterID, investorID, investorContacts);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> SaveInvestorContactListAsync(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorContactModel[] investorContacts) {
            return base.Channel.SaveInvestorContactListAsync(underwriterID, investorID, investorContacts);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult AddManualTransaction(int underwriterID, int investorAccountID, decimal transactionAmount, System.DateTime transactionDate, int bankAccountTypeID, string transactionComment, string bankTransactionRef) {
            return base.Channel.AddManualTransaction(underwriterID, investorAccountID, transactionAmount, transactionDate, bankAccountTypeID, transactionComment, bankTransactionRef);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> AddManualTransactionAsync(int underwriterID, int investorAccountID, decimal transactionAmount, System.DateTime transactionDate, int bankAccountTypeID, string transactionComment, string bankTransactionRef) {
            return base.Channel.AddManualTransactionAsync(underwriterID, investorAccountID, transactionAmount, transactionDate, bankAccountTypeID, transactionComment, bankTransactionRef);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult SaveInvestorBanksList(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks) {
            return base.Channel.SaveInvestorBanksList(underwriterID, investorID, investorBanks);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> SaveInvestorBanksListAsync(int underwriterID, int investorID, Ezbob.Backend.Models.Investor.InvestorBankAccountModel[] investorBanks) {
            return base.Channel.SaveInvestorBanksListAsync(underwriterID, investorID, investorBanks);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LinkLoanToInvestor(int userID, int customerID, int loanID) {
            return base.Channel.LinkLoanToInvestor(userID, customerID, loanID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LinkLoanToInvestorAsync(int userID, int customerID, int loanID) {
            return base.Channel.LinkLoanToInvestorAsync(userID, customerID, loanID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LinkLoanRepaymentToInvestor(int userID, int customerID, int loanID, int loanTransactionID, decimal transactionAmount, System.DateTime transactionDate) {
            return base.Channel.LinkLoanRepaymentToInvestor(userID, customerID, loanID, loanTransactionID, transactionAmount, transactionDate);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LinkLoanRepaymentToInvestorAsync(int userID, int customerID, int loanID, int loanTransactionID, decimal transactionAmount, System.DateTime transactionDate) {
            return base.Channel.LinkLoanRepaymentToInvestorAsync(userID, customerID, loanID, loanTransactionID, transactionAmount, transactionDate);
        }
        
        public ServiceClientProxy.EzServiceReference.SchedulerDataResult LoadSchedulerData(int underwriterID, int investorID) {
            return base.Channel.LoadSchedulerData(underwriterID, investorID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SchedulerDataResult> LoadSchedulerDataAsync(int underwriterID, int investorID) {
            return base.Channel.LoadSchedulerDataAsync(underwriterID, investorID);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ManageInvestorDetails(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investorDetails) {
            return base.Channel.ManageInvestorDetails(underwriterID, investorDetails);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManageInvestorDetailsAsync(int underwriterID, Ezbob.Backend.Models.Investor.InvestorModel investorDetails) {
            return base.Channel.ManageInvestorDetailsAsync(underwriterID, investorDetails);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult UpdateSchedulerData(int underwriterID, int investorID, decimal monthlyFundingCapital, int fundsTransferDate, string fundsTransferSchedule, string repaymentsTransferSchedule) {
            return base.Channel.UpdateSchedulerData(underwriterID, investorID, monthlyFundingCapital, fundsTransferDate, fundsTransferSchedule, repaymentsTransferSchedule);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> UpdateSchedulerDataAsync(int underwriterID, int investorID, decimal monthlyFundingCapital, int fundsTransferDate, string fundsTransferSchedule, string repaymentsTransferSchedule) {
            return base.Channel.UpdateSchedulerDataAsync(underwriterID, investorID, monthlyFundingCapital, fundsTransferDate, fundsTransferSchedule, repaymentsTransferSchedule);
        }
        
        public ServiceClientProxy.EzServiceReference.LogicalGlueResult LogicalGlueGetLastInference(int underwriterID, int customerID, System.Nullable<System.DateTime> date, bool includeTryouts) {
            return base.Channel.LogicalGlueGetLastInference(underwriterID, customerID, date, includeTryouts);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LogicalGlueResult> LogicalGlueGetLastInferenceAsync(int underwriterID, int customerID, System.Nullable<System.DateTime> date, bool includeTryouts) {
            return base.Channel.LogicalGlueGetLastInferenceAsync(underwriterID, customerID, date, includeTryouts);
        }
        
        public ServiceClientProxy.EzServiceReference.LogicalGlueResult[] LogicalGlueGetHistory(int underwriterID, int customerID) {
            return base.Channel.LogicalGlueGetHistory(underwriterID, customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LogicalGlueResult[]> LogicalGlueGetHistoryAsync(int underwriterID, int customerID) {
            return base.Channel.LogicalGlueGetHistoryAsync(underwriterID, customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.LogicalGlueResult LogicalGlueGetTryout(int underwriterID, int customerID, decimal monthlyRepayment, bool isTryout) {
            return base.Channel.LogicalGlueGetTryout(underwriterID, customerID, monthlyRepayment, isTryout);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LogicalGlueResult> LogicalGlueGetTryoutAsync(int underwriterID, int customerID, decimal monthlyRepayment, bool isTryout) {
            return base.Channel.LogicalGlueGetTryoutAsync(underwriterID, customerID, monthlyRepayment, isTryout);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult LogicalGlueSetAsCurrent(int underwriterID, int customerID, System.Guid uniqueID) {
            return base.Channel.LogicalGlueSetAsCurrent(underwriterID, customerID, uniqueID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> LogicalGlueSetAsCurrentAsync(int underwriterID, int customerID, System.Guid uniqueID) {
            return base.Channel.LogicalGlueSetAsCurrentAsync(underwriterID, customerID, uniqueID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLogicalGlueForAll() {
            return base.Channel.BackfillLogicalGlueForAll();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLogicalGlueForAllAsync() {
            return base.Channel.BackfillLogicalGlueForAllAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategyAsync(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator) {
            return base.Channel.MainStrategyAsync(uderwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, cashRequestOriginator);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategyAsyncAsync(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator) {
            return base.Channel.MainStrategyAsyncAsync(uderwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, cashRequestOriginator);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategySync(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator) {
            return base.Channel.MainStrategySync(underwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, cashRequestOriginator);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategySyncAsync(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, System.Nullable<EZBob.DatabaseLib.Model.Database.CashRequestOriginator> cashRequestOriginator) {
            return base.Channel.MainStrategySyncAsync(underwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, cashRequestOriginator);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddCashRequest(int userID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_CashRequests cashRequest) {
            return base.Channel.AddCashRequest(userID, cashRequest);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddCashRequestAsync(int userID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_CashRequests cashRequest) {
            return base.Channel.AddCashRequestAsync(userID, cashRequest);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddDecision(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Decisions decision, System.Nullable<long> oldCashRequest, Ezbob.Backend.ModelsWithDB.NewLoan.NL_DecisionRejectReasons[] decisionRejectReasons) {
            return base.Channel.AddDecision(userID, customerID, decision, oldCashRequest, decisionRejectReasons);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddDecisionAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Decisions decision, System.Nullable<long> oldCashRequest, Ezbob.Backend.ModelsWithDB.NewLoan.NL_DecisionRejectReasons[] decisionRejectReasons) {
            return base.Channel.AddDecisionAsync(userID, customerID, decision, oldCashRequest, decisionRejectReasons);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddOffer(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers offer, Ezbob.Backend.ModelsWithDB.NewLoan.NL_OfferFees[] fees) {
            return base.Channel.AddOffer(userID, customerID, offer, fees);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddOfferAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers offer, Ezbob.Backend.ModelsWithDB.NewLoan.NL_OfferFees[] fees) {
            return base.Channel.AddOfferAsync(userID, customerID, offer, fees);
        }
        
        public Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers GetLastOffer(int userID, int customerID) {
            return base.Channel.GetLastOffer(userID, customerID);
        }
        
        public System.Threading.Tasks.Task<Ezbob.Backend.ModelsWithDB.NewLoan.NL_Offers> GetLastOfferAsync(int userID, int customerID) {
            return base.Channel.GetLastOfferAsync(userID, customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddLoanLegals(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanLegals loanLegals) {
            return base.Channel.AddLoanLegals(userID, customerID, loanLegals);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddLoanLegalsAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanLegals loanLegals) {
            return base.Channel.AddLoanLegalsAsync(userID, customerID, loanLegals);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddLoanOptions(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanOptions loanOptions, System.Nullable<int> oldLoanId, string[] PropertiesUpdateList) {
            return base.Channel.AddLoanOptions(userID, customerID, loanOptions, oldLoanId, PropertiesUpdateList);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddLoanOptionsAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanOptions loanOptions, System.Nullable<int> oldLoanId, string[] PropertiesUpdateList) {
            return base.Channel.AddLoanOptionsAsync(userID, customerID, loanOptions, oldLoanId, PropertiesUpdateList);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData AddLoan(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model) {
            return base.Channel.AddLoan(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddLoanAsync(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model) {
            return base.Channel.AddLoanAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddPayment(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID) {
            return base.Channel.AddPayment(customerID, payment, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddPaymentAsync(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID) {
            return base.Channel.AddPaymentAsync(customerID, payment, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.ReschedulingActionResult RescheduleLoan(int userID, int customerID, Ezbob.Backend.Models.NewLoan.ReschedulingArgument reschedulingArgument) {
            return base.Channel.RescheduleLoan(userID, customerID, reschedulingArgument);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ReschedulingActionResult> RescheduleLoanAsync(int userID, int customerID, Ezbob.Backend.Models.NewLoan.ReschedulingArgument reschedulingArgument) {
            return base.Channel.RescheduleLoanAsync(userID, customerID, reschedulingArgument);
        }
        
        public ServiceClientProxy.EzServiceReference.NLModelActionResult BuildLoanFromOffer(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model) {
            return base.Channel.BuildLoanFromOffer(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLModelActionResult> BuildLoanFromOfferAsync(System.Nullable<int> userID, System.Nullable<int> customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Model model) {
            return base.Channel.BuildLoanFromOfferAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult DeactivateLoanInterestFreeze(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze) {
            return base.Channel.DeactivateLoanInterestFreeze(userID, customerID, loanInterestFreeze);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> DeactivateLoanInterestFreezeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze) {
            return base.Channel.DeactivateLoanInterestFreezeAsync(userID, customerID, loanInterestFreeze);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult AddLoanInterestFreeze(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze) {
            return base.Channel.AddLoanInterestFreeze(userID, customerID, loanInterestFreeze);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> AddLoanInterestFreezeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanInterestFreeze loanInterestFreeze) {
            return base.Channel.AddLoanInterestFreezeAsync(userID, customerID, loanInterestFreeze);
        }
        
        public ServiceClientProxy.EzServiceReference.ListNewLoanActionResult GetCustomerLoans(int customerID, int userID) {
            return base.Channel.GetCustomerLoans(customerID, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ListNewLoanActionResult> GetCustomerLoansAsync(int customerID, int userID) {
            return base.Channel.GetCustomerLoansAsync(customerID, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.NLModelActionResult GetLoanState(int customerID, long loanID, System.DateTime utcNow, int userID, bool getCalculatorState) {
            return base.Channel.GetLoanState(customerID, loanID, utcNow, userID, getCalculatorState);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLModelActionResult> GetLoanStateAsync(int customerID, long loanID, System.DateTime utcNow, int userID, bool getCalculatorState) {
            return base.Channel.GetLoanStateAsync(customerID, loanID, utcNow, userID, getCalculatorState);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult GetLoanByOldID(int oldId, int customerID, int userID) {
            return base.Channel.GetLoanByOldID(oldId, customerID, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> GetLoanByOldIDAsync(int oldId, int customerID, int userID) {
            return base.Channel.GetLoanByOldIDAsync(oldId, customerID, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.NLLongActionResult CancelPayment(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID) {
            return base.Channel.CancelPayment(customerID, payment, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NLLongActionResult> CancelPaymentAsync(int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_Payments payment, int userID) {
            return base.Channel.CancelPaymentAsync(customerID, payment, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult SaveRollover(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanRollovers rollover, long loanID) {
            return base.Channel.SaveRollover(userID, customerID, rollover, loanID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> SaveRolloverAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanRollovers rollover, long loanID) {
            return base.Channel.SaveRolloverAsync(userID, customerID, rollover, loanID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult AcceptRollover(int customerID, long loanID) {
            return base.Channel.AcceptRollover(customerID, loanID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> AcceptRolloverAsync(int customerID, long loanID) {
            return base.Channel.AcceptRolloverAsync(customerID, loanID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult SaveFee(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee) {
            return base.Channel.SaveFee(userID, customerID, fee);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> SaveFeeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee) {
            return base.Channel.SaveFeeAsync(userID, customerID, fee);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult CancelFee(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee) {
            return base.Channel.CancelFee(userID, customerID, fee);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> CancelFeeAsync(int userID, int customerID, Ezbob.Backend.ModelsWithDB.NewLoan.NL_LoanFees fee) {
            return base.Channel.CancelFeeAsync(userID, customerID, fee);
        }
        
        public ServiceClientProxy.EzServiceReference.PricingModelModelActionResult GetPricingModelModel(int customerId, int underwriterId, DbConstants.PricingCalcuatorScenarioNames scenarioName) {
            return base.Channel.GetPricingModelModel(customerId, underwriterId, scenarioName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> GetPricingModelModelAsync(int customerId, int underwriterId, DbConstants.PricingCalcuatorScenarioNames scenarioName) {
            return base.Channel.GetPricingModelModelAsync(customerId, underwriterId, scenarioName);
        }
        
        public ServiceClientProxy.EzServiceReference.PricingScenarioNameListActionResult GetPricingModelScenarios(int underwriterId) {
            return base.Channel.GetPricingModelScenarios(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingScenarioNameListActionResult> GetPricingModelScenariosAsync(int underwriterId) {
            return base.Channel.GetPricingModelScenariosAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.PricingModelModelActionResult PricingModelCalculate(int customerId, int underwriterId, Ezbob.Backend.ModelsWithDB.PricingModelModel model) {
            return base.Channel.PricingModelCalculate(customerId, underwriterId, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> PricingModelCalculateAsync(int customerId, int underwriterId, Ezbob.Backend.ModelsWithDB.PricingModelModel model) {
            return base.Channel.PricingModelCalculateAsync(customerId, underwriterId, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SavePricingModelSettings(int underwriterId, long scenarioID, Ezbob.Backend.ModelsWithDB.PricingModelModel model) {
            return base.Channel.SavePricingModelSettings(underwriterId, scenarioID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SavePricingModelSettingsAsync(int underwriterId, long scenarioID, Ezbob.Backend.ModelsWithDB.PricingModelModel model) {
            return base.Channel.SavePricingModelSettingsAsync(underwriterId, scenarioID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.PricingModelModelActionResult GetPricingScenarioDetails(int underwriterId, long scenarioID) {
            return base.Channel.GetPricingScenarioDetails(underwriterId, scenarioID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> GetPricingScenarioDetailsAsync(int underwriterId, long scenarioID) {
            return base.Channel.GetPricingScenarioDetailsAsync(underwriterId, scenarioID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateLeadAccount(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead) {
            return base.Channel.SalesForceAddUpdateLeadAccount(userID, email, customerID, isBrokerLead, isVipLead);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateLeadAccountAsync(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead) {
            return base.Channel.SalesForceAddUpdateLeadAccountAsync(userID, email, customerID, isBrokerLead, isVipLead);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateContact(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail) {
            return base.Channel.SalesForceAddUpdateContact(userID, customerID, directorID, directorEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateContactAsync(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail) {
            return base.Channel.SalesForceAddUpdateContactAsync(userID, customerID, directorID, directorEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddTask(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model) {
            return base.Channel.SalesForceAddTask(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddTaskAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model) {
            return base.Channel.SalesForceAddTaskAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddActivity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model) {
            return base.Channel.SalesForceAddActivity(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddActivityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model) {
            return base.Channel.SalesForceAddActivityAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceAddOpportunity(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceAddOpportunityAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceUpdateOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceUpdateOpportunity(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceUpdateOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceUpdateOpportunityAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.SalesForceActivityActionResult SalesForceGetActivity(System.Nullable<int> userID, int customerID) {
            return base.Channel.SalesForceGetActivity(userID, customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SalesForceActivityActionResult> SalesForceGetActivityAsync(System.Nullable<int> userID, int customerID) {
            return base.Channel.SalesForceGetActivityAsync(userID, customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLinkedHmrc() {
            return base.Channel.BackfillLinkedHmrc();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLinkedHmrcAsync() {
            return base.Channel.BackfillLinkedHmrcAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData AndRecalculateVatReturnSummaryForAll() {
            return base.Channel.AndRecalculateVatReturnSummaryForAll();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AndRecalculateVatReturnSummaryForAllAsync() {
            return base.Channel.AndRecalculateVatReturnSummaryForAllAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CalculateVatReturnSummary(int nCustomerMarketplaceID) {
            return base.Channel.CalculateVatReturnSummary(nCustomerMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateVatReturnSummaryAsync(int nCustomerMarketplaceID) {
            return base.Channel.CalculateVatReturnSummaryAsync(nCustomerMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnFullData(int nCustomerID, int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnFullData(nCustomerID, nCustomerMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnFullDataAsync(int nCustomerID, int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnFullDataAsync(nCustomerID, nCustomerMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnRawData(int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnRawData(nCustomerMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnRawDataAsync(int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnRawDataAsync(nCustomerMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnSummary(int nCustomerID, int nMarketplaceID) {
            return base.Channel.LoadVatReturnSummary(nCustomerID, nMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnSummaryAsync(int nCustomerID, int nMarketplaceID) {
            return base.Channel.LoadVatReturnSummaryAsync(nCustomerID, nMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult SaveVatReturnData(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths) {
            return base.Channel.SaveVatReturnData(nCustomerMarketplaceID, nHistoryRecordID, nSourceID, oVatReturn, oRtiMonths);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult> SaveVatReturnDataAsync(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths) {
            return base.Channel.SaveVatReturnDataAsync(nCustomerMarketplaceID, nHistoryRecordID, nSourceID, oVatReturn, oRtiMonths);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RemoveManualVatReturnPeriod(System.Guid oPeriodID) {
            return base.Channel.RemoveManualVatReturnPeriod(oPeriodID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RemoveManualVatReturnPeriodAsync(System.Guid oPeriodID) {
            return base.Channel.RemoveManualVatReturnPeriodAsync(oPeriodID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword) {
            return base.Channel.UpdateLinkedHmrcPassword(sCustomerID, sDisplayName, sPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword) {
            return base.Channel.UpdateLinkedHmrcPasswordAsync(sCustomerID, sDisplayName, sPassword);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult ValidateAndUpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword) {
            return base.Channel.ValidateAndUpdateLinkedHmrcPassword(sCustomerID, sDisplayName, sPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> ValidateAndUpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword) {
            return base.Channel.ValidateAndUpdateLinkedHmrcPasswordAsync(sCustomerID, sDisplayName, sPassword);
        }
        
        public ServiceClientProxy.EzServiceReference.UserLoginActionResult SignupCustomerMultiOrigin(Ezbob.Backend.ModelsWithDB.SignupCustomerMultiOriginModel model) {
            return base.Channel.SignupCustomerMultiOrigin(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> SignupCustomerMultiOriginAsync(Ezbob.Backend.ModelsWithDB.SignupCustomerMultiOriginModel model) {
            return base.Channel.SignupCustomerMultiOriginAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.UserLoginActionResult LoginCustomerMutliOrigin(Ezbob.Backend.Models.LoginCustomerMultiOriginModel model) {
            return base.Channel.LoginCustomerMutliOrigin(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> LoginCustomerMutliOriginAsync(Ezbob.Backend.Models.LoginCustomerMultiOriginModel model) {
            return base.Channel.LoginCustomerMutliOriginAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SignupUnderwriterMultiOrigin(string name, Ezbob.Backend.Models.DasKennwort password, string role) {
            return base.Channel.SignupUnderwriterMultiOrigin(name, password, role);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SignupUnderwriterMultiOriginAsync(string name, Ezbob.Backend.Models.DasKennwort password, string role) {
            return base.Channel.SignupUnderwriterMultiOriginAsync(name, password, role);
        }
        
        public ServiceClientProxy.EzServiceReference.UserLoginActionResult UserLogin(System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> originID, string sEmail, Ezbob.Backend.Models.DasKennwort sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime) {
            return base.Channel.UserLogin(originID, sEmail, sPassword, sRemoteIp, promotionName, promotionPageVisitTime);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> UserLoginAsync(System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> originID, string sEmail, Ezbob.Backend.Models.DasKennwort sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime) {
            return base.Channel.UserLoginAsync(originID, sEmail, sPassword, sRemoteIp, promotionName, promotionPageVisitTime);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserDisable(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail) {
            return base.Channel.UserDisable(userID, customerID, email, unsubscribeFromMailChimp, changeEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserDisableAsync(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail) {
            return base.Channel.UserDisableAsync(userID, customerID, email, unsubscribeFromMailChimp, changeEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult CustomerChangePassword(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword) {
            return base.Channel.CustomerChangePassword(email, origin, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> CustomerChangePasswordAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort oldPassword, Ezbob.Backend.Models.DasKennwort newPassword) {
            return base.Channel.CustomerChangePasswordAsync(email, origin, oldPassword, newPassword);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserUpdateSecurityQuestion(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, int questionID, string answer) {
            return base.Channel.UserUpdateSecurityQuestion(email, origin, password, questionID, answer);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserUpdateSecurityQuestionAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, int questionID, string answer) {
            return base.Channel.UserUpdateSecurityQuestionAsync(email, origin, password, questionID, answer);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserChangeEmail(int underwriterId, int nUserID, string sNewEmail) {
            return base.Channel.UserChangeEmail(underwriterId, nUserID, sNewEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserChangeEmailAsync(int underwriterId, int nUserID, string sNewEmail) {
            return base.Channel.UserChangeEmailAsync(underwriterId, nUserID, sNewEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MarkSessionEnded(int nSessionID, string sComment, System.Nullable<int> userID, System.Nullable<int> nCustomerId) {
            return base.Channel.MarkSessionEnded(nSessionID, sComment, userID, nCustomerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarkSessionEndedAsync(int nSessionID, string sComment, System.Nullable<int> userID, System.Nullable<int> nCustomerId) {
            return base.Channel.MarkSessionEndedAsync(nSessionID, sComment, userID, nCustomerId);
        }
        
        public ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult LoadCustomerByCreatePasswordToken(System.Guid oToken) {
            return base.Channel.LoadCustomerByCreatePasswordToken(oToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult> LoadCustomerByCreatePasswordTokenAsync(System.Guid oToken) {
            return base.Channel.LoadCustomerByCreatePasswordTokenAsync(oToken);
        }
        
        public ServiceClientProxy.EzServiceReference.SetPasswordActionResult SetCustomerPasswordByToken(System.Guid token, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, Ezbob.Backend.Models.DasKennwort passwordAgain, bool isBrokerLead, string remoteIP) {
            return base.Channel.SetCustomerPasswordByToken(token, origin, password, passwordAgain, isBrokerLead, remoteIP);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SetPasswordActionResult> SetCustomerPasswordByTokenAsync(System.Guid token, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, Ezbob.Backend.Models.DasKennwort password, Ezbob.Backend.Models.DasKennwort passwordAgain, bool isBrokerLead, string remoteIP) {
            return base.Channel.SetCustomerPasswordByTokenAsync(token, origin, password, passwordAgain, isBrokerLead, remoteIP);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ResetPassword123456(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget) {
            return base.Channel.ResetPassword123456(nUnderwriterID, nTargetID, nTarget);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ResetPassword123456Async(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget) {
            return base.Channel.ResetPassword123456Async(nUnderwriterID, nTargetID, nTarget);
        }
        
        public ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult EmailConfirmationGenerate(int nUserID) {
            return base.Channel.EmailConfirmationGenerate(nUserID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult> EmailConfirmationGenerateAsync(int nUserID) {
            return base.Channel.EmailConfirmationGenerateAsync(nUserID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationGenerateAndSend(int nUserID, int underwriterId) {
            return base.Channel.EmailConfirmationGenerateAndSend(nUserID, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationGenerateAndSendAsync(int nUserID, int underwriterId) {
            return base.Channel.EmailConfirmationGenerateAndSendAsync(nUserID, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult EmailConfirmationCheckOne(System.Guid oToken) {
            return base.Channel.EmailConfirmationCheckOne(oToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> EmailConfirmationCheckOneAsync(System.Guid oToken) {
            return base.Channel.EmailConfirmationCheckOneAsync(oToken);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationConfirmUser(int nUserID, int nUnderwriterID) {
            return base.Channel.EmailConfirmationConfirmUser(nUserID, nUnderwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationConfirmUserAsync(int nUserID, int nUnderwriterID) {
            return base.Channel.EmailConfirmationConfirmUserAsync(nUserID, nUnderwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData AddCciHistory(int nCustomerID, int nUnderwriterID, bool bCciMark) {
            return base.Channel.AddCciHistory(nCustomerID, nUnderwriterID, bCciMark);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddCciHistoryAsync(int nCustomerID, int nUnderwriterID, bool bCciMark) {
            return base.Channel.AddCciHistoryAsync(nCustomerID, nUnderwriterID, bCciMark);
        }
        
        public ServiceClientProxy.EzServiceReference.StringListActionResult LoadAllLoginRoles(string login, System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> origin, bool ignoreOrigin) {
            return base.Channel.LoadAllLoginRoles(login, origin, ignoreOrigin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> LoadAllLoginRolesAsync(string login, System.Nullable<EZBob.DatabaseLib.Model.Database.CustomerOriginEnum> origin, bool ignoreOrigin) {
            return base.Channel.LoadAllLoginRolesAsync(login, origin, ignoreOrigin);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult GetCustomerSecurityQuestion(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.GetCustomerSecurityQuestion(email, origin);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> GetCustomerSecurityQuestionAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin) {
            return base.Channel.GetCustomerSecurityQuestionAsync(email, origin);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult ValidateSecurityAnswer(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, string answer) {
            return base.Channel.ValidateSecurityAnswer(email, origin, answer);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> ValidateSecurityAnswerAsync(string email, EZBob.DatabaseLib.Model.Database.CustomerOriginEnum origin, string answer) {
            return base.Channel.ValidateSecurityAnswerAsync(email, origin, answer);
        }
        
        public ServiceClientProxy.EzServiceReference.LegalDocsActionResult GetLegalDocs(int customerID, int userID, int originID, bool isRegulated, int productSubTypeID) {
            return base.Channel.GetLegalDocs(customerID, userID, originID, isRegulated, productSubTypeID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocsActionResult> GetLegalDocsAsync(int customerID, int userID, int originID, bool isRegulated, int productSubTypeID) {
            return base.Channel.GetLegalDocsAsync(customerID, userID, originID, isRegulated, productSubTypeID);
        }
        
        public ServiceClientProxy.EzServiceReference.LegalDocActionResult GetLegalDocById(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.GetLegalDocById(customerID, userID, loanAgreementTemplateId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocActionResult> GetLegalDocByIdAsync(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.GetLegalDocByIdAsync(customerID, userID, loanAgreementTemplateId);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ManualLegalDocsSyncTemplatesFiles(string agreementsPath) {
            return base.Channel.ManualLegalDocsSyncTemplatesFiles(agreementsPath);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ManualLegalDocsSyncTemplatesFilesAsync(string agreementsPath) {
            return base.Channel.ManualLegalDocsSyncTemplatesFilesAsync(agreementsPath);
        }
        
        public ServiceClientProxy.EzServiceReference.LegalDocActionResult AddLegalDoc(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate) {
            return base.Channel.AddLegalDoc(customerID, userID, loanAgreementTemplate);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocActionResult> AddLegalDocAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate) {
            return base.Channel.AddLegalDocAsync(customerID, userID, loanAgreementTemplate);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult ApproveLegalDoc(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.ApproveLegalDoc(customerID, userID, loanAgreementTemplateId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> ApproveLegalDocAsync(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.ApproveLegalDocAsync(customerID, userID, loanAgreementTemplateId);
        }
        
        public ServiceClientProxy.EzServiceReference.LegalDocsActionResult GetLatestLegalDocs(int customerID, int userID) {
            return base.Channel.GetLatestLegalDocs(customerID, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocsActionResult> GetLatestLegalDocsAsync(int customerID, int userID) {
            return base.Channel.GetLatestLegalDocsAsync(customerID, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.LegalDocsActionResult GetLegalDocsPendingApproval(int customerID, int userID) {
            return base.Channel.GetLegalDocsPendingApproval(customerID, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LegalDocsActionResult> GetLegalDocsPendingApprovalAsync(int customerID, int userID) {
            return base.Channel.GetLegalDocsPendingApprovalAsync(customerID, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ReviewLegalDoc(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.ReviewLegalDoc(customerID, userID, loanAgreementTemplateId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ReviewLegalDocAsync(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.ReviewLegalDocAsync(customerID, userID, loanAgreementTemplateId);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult DeleteLegalDoc(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.DeleteLegalDoc(customerID, userID, loanAgreementTemplateId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> DeleteLegalDocAsync(int customerID, int userID, int loanAgreementTemplateId) {
            return base.Channel.DeleteLegalDocAsync(customerID, userID, loanAgreementTemplateId);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult SaveLegalDoc(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate) {
            return base.Channel.SaveLegalDoc(customerID, userID, loanAgreementTemplate);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SaveLegalDocAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.LegalDocs.LoanAgreementTemplate loanAgreementTemplate) {
            return base.Channel.SaveLegalDocAsync(customerID, userID, loanAgreementTemplate);
        }
        
        public ServiceClientProxy.EzServiceReference.SecurityUserActionResult GetSecurityUser(System.Nullable<int> userID, System.Nullable<int> customerID, string userName, System.Nullable<int> originId) {
            return base.Channel.GetSecurityUser(userID, customerID, userName, originId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SecurityUserActionResult> GetSecurityUserAsync(System.Nullable<int> userID, System.Nullable<int> customerID, string userName, System.Nullable<int> originId) {
            return base.Channel.GetSecurityUserAsync(userID, customerID, userName, originId);
        }
        
        public ServiceClientProxy.EzServiceReference.LandRegistryActionResult LandRegistryLoad(int customerID, int userID) {
            return base.Channel.LandRegistryLoad(customerID, userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LandRegistryActionResult> LandRegistryLoadAsync(int customerID, int userID) {
            return base.Channel.LandRegistryLoadAsync(customerID, userID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLandRegistry2PropertyLink() {
            return base.Channel.BackfillLandRegistry2PropertyLink();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLandRegistry2PropertyLinkAsync() {
            return base.Channel.BackfillLandRegistry2PropertyLinkAsync();
        }
        
        public string LandRegistryEnquiry(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode) {
            return base.Channel.LandRegistryEnquiry(userId, customerId, buildingNumber, buildingName, streetName, cityName, postCode);
        }
        
        public System.Threading.Tasks.Task<string> LandRegistryEnquiryAsync(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode) {
            return base.Channel.LandRegistryEnquiryAsync(userId, customerId, buildingNumber, buildingName, streetName, cityName, postCode);
        }
        
        public string LandRegistryRes(int userId, int customerId, string titleNumber) {
            return base.Channel.LandRegistryRes(userId, customerId, titleNumber);
        }
        
        public System.Threading.Tasks.Task<string> LandRegistryResAsync(int userId, int customerId, string titleNumber) {
            return base.Channel.LandRegistryResAsync(userId, customerId, titleNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData GetZooplaData(int customerId, bool reCheck) {
            return base.Channel.GetZooplaData(customerId, reCheck);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetZooplaDataAsync(int customerId, bool reCheck) {
            return base.Channel.GetZooplaDataAsync(customerId, reCheck);
        }
        
        public ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult GetPropertyStatuses() {
            return base.Channel.GetPropertyStatuses();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult> GetPropertyStatusesAsync() {
            return base.Channel.GetPropertyStatusesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOfferWithPrerequisites(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOfferWithPrerequisites(customerId, saveOfferToDB);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferWithPrerequisitesAsync(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOfferWithPrerequisitesAsync(customerId, saveOfferToDB);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RecordManualPacnetDeposit(int underwriterId, string underwriterName, int amount) {
            return base.Channel.RecordManualPacnetDeposit(underwriterId, underwriterName, amount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RecordManualPacnetDepositAsync(int underwriterId, string underwriterName, int amount) {
            return base.Channel.RecordManualPacnetDepositAsync(underwriterId, underwriterName, amount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RejectUser(int userId, int customerId, bool bSendToCustomer) {
            return base.Channel.RejectUser(userId, customerId, bSendToCustomer);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RejectUserAsync(int userId, int customerId, bool bSendToCustomer) {
            return base.Channel.RejectUserAsync(userId, customerId, bSendToCustomer);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RenewEbayToken(int userId, int customerId, string marketplaceName, string eBayAddress) {
            return base.Channel.RenewEbayToken(userId, customerId, marketplaceName, eBayAddress);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RenewEbayTokenAsync(int userId, int customerId, string marketplaceName, string eBayAddress) {
            return base.Channel.RenewEbayTokenAsync(userId, customerId, marketplaceName, eBayAddress);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RequestCashWithoutTakenLoan(int customerId) {
            return base.Channel.RequestCashWithoutTakenLoan(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequestCashWithoutTakenLoanAsync(int customerId) {
            return base.Channel.RequestCashWithoutTakenLoanAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SaveAgreement(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2) {
            return base.Channel.SaveAgreement(customerId, model, refNumber, name, template, path1, path2);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveAgreementAsync(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2) {
            return base.Channel.SaveAgreementAsync(customerId, model, refNumber, name, template, path1, path2);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult SaveConfigTable(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType) {
            return base.Channel.SaveConfigTable(configTableEntries, configTableType);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SaveConfigTableAsync(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType) {
            return base.Channel.SaveConfigTableAsync(configTableEntries, configTableType);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SendPendingMails(int underwriterId, int customerId) {
            return base.Channel.SendPendingMails(underwriterId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SendPendingMailsAsync(int underwriterId, int customerId) {
            return base.Channel.SendPendingMailsAsync(underwriterId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult SendSms(int userId, int underwriterId, string phone, string content) {
            return base.Channel.SendSms(userId, underwriterId, phone, content);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SendSmsAsync(int userId, int underwriterId, string phone, string content) {
            return base.Channel.SendSmsAsync(userId, underwriterId, phone, content);
        }
        
        public ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult SetCustomerManualAnnualizedRevenue(int nCustomerID, decimal nRevenue, string sComment) {
            return base.Channel.SetCustomerManualAnnualizedRevenue(nCustomerID, nRevenue, sComment);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> SetCustomerManualAnnualizedRevenueAsync(int nCustomerID, decimal nRevenue, string sComment) {
            return base.Channel.SetCustomerManualAnnualizedRevenueAsync(nCustomerID, nRevenue, sComment);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SetLateLoanStatus() {
            return base.Channel.SetLateLoanStatus();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SetLateLoanStatusAsync() {
            return base.Channel.SetLateLoanStatusAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Temp_BackFillMedals() {
            return base.Channel.Temp_BackFillMedals();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> Temp_BackFillMedalsAsync() {
            return base.Channel.Temp_BackFillMedalsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData TransferCashFailed(int customerId) {
            return base.Channel.TransferCashFailed(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TransferCashFailedAsync(int customerId) {
            return base.Channel.TransferCashFailedAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateConfigurationVariables(int userId) {
            return base.Channel.UpdateConfigurationVariables(userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateConfigurationVariablesAsync(int userId) {
            return base.Channel.UpdateConfigurationVariablesAsync(userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateCurrencyRates() {
            return base.Channel.UpdateCurrencyRates();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateCurrencyRatesAsync() {
            return base.Channel.UpdateCurrencyRatesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateExperianDirectorDetails(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails) {
            return base.Channel.UpdateExperianDirectorDetails(nCustomerID, nUnderwriterID, oDetails);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateExperianDirectorDetailsAsync(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails) {
            return base.Channel.UpdateExperianDirectorDetailsAsync(nCustomerID, nUnderwriterID, oDetails);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateGoogleAnalytics(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate) {
            return base.Channel.UpdateGoogleAnalytics(oBackfillStartDate, oBackfillEndDate);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateGoogleAnalyticsAsync(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate) {
            return base.Channel.UpdateGoogleAnalyticsAsync(oBackfillStartDate, oBackfillEndDate);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateMarketplace(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId) {
            return base.Channel.UpdateMarketplace(customerId, marketplaceId, doUpdateWizardStep, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateMarketplaceAsync(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId) {
            return base.Channel.UpdateMarketplaceAsync(customerId, marketplaceId, doUpdateWizardStep, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateTransactionStatus() {
            return base.Channel.UpdateTransactionStatus();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateTransactionStatusAsync() {
            return base.Channel.UpdateTransactionStatusAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ValidateMobileCode(string phone, string code) {
            return base.Channel.ValidateMobileCode(phone, code);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ValidateMobileCodeAsync(string phone, string code) {
            return base.Channel.ValidateMobileCodeAsync(phone, code);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VipRequest(int customerId, string fullname, string email, string phone) {
            return base.Channel.VipRequest(customerId, fullname, email, phone);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VipRequestAsync(int customerId, string fullname, string email, string phone) {
            return base.Channel.VipRequestAsync(customerId, fullname, email, phone);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData XDaysDue() {
            return base.Channel.XDaysDue();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> XDaysDueAsync() {
            return base.Channel.XDaysDueAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ChangeLotteryPlayerStatus(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus) {
            return base.Channel.ChangeLotteryPlayerStatus(customerID, playerID, newStatus);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ChangeLotteryPlayerStatusAsync(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus) {
            return base.Channel.ChangeLotteryPlayerStatusAsync(customerID, playerID, newStatus);
        }
        
        public ServiceClientProxy.EzServiceReference.LotteryActionResult PlayLottery(int customerID, System.Guid playerID) {
            return base.Channel.PlayLottery(customerID, playerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LotteryActionResult> PlayLotteryAsync(int customerID, System.Guid playerID) {
            return base.Channel.PlayLotteryAsync(customerID, playerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EnlistLottery(int customerID) {
            return base.Channel.EnlistLottery(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EnlistLotteryAsync(int customerID) {
            return base.Channel.EnlistLotteryAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult CustomerAvaliableCredit(string customerRefNum, long aliMemberID) {
            return base.Channel.CustomerAvaliableCredit(customerRefNum, aliMemberID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult> CustomerAvaliableCreditAsync(string customerRefNum, long aliMemberID) {
            return base.Channel.CustomerAvaliableCreditAsync(customerRefNum, aliMemberID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RequalifyCustomer(string customerRefNum, long aliMemberID) {
            return base.Channel.RequalifyCustomer(customerRefNum, aliMemberID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequalifyCustomerAsync(string customerRefNum, long aliMemberID) {
            return base.Channel.RequalifyCustomerAsync(customerRefNum, aliMemberID);
        }
        
        public ServiceClientProxy.EzServiceReference.AlibabaSaleContractActionResult SaleContract(Ezbob.Backend.Models.ExternalAPI.AlibabaContractDto dto) {
            return base.Channel.SaleContract(dto);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AlibabaSaleContractActionResult> SaleContractAsync(Ezbob.Backend.Models.ExternalAPI.AlibabaContractDto dto) {
            return base.Channel.SaleContractAsync(dto);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DataSharing(int customerID, DbConstants.AlibabaBusinessType businessType, System.Nullable<int> uwID) {
            return base.Channel.DataSharing(customerID, businessType, uwID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DataSharingAsync(int customerID, DbConstants.AlibabaBusinessType businessType, System.Nullable<int> uwID) {
            return base.Channel.DataSharingAsync(customerID, businessType, uwID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SaveApiCall(Ezbob.Backend.Models.ExternalAPI.ApiCallData data) {
            return base.Channel.SaveApiCall(data);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveApiCallAsync(Ezbob.Backend.Models.ExternalAPI.ApiCallData data) {
            return base.Channel.SaveApiCallAsync(data);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyEnoughAvailableFunds(int underwriterId, decimal deductAmount) {
            return base.Channel.VerifyEnoughAvailableFunds(underwriterId, deductAmount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyEnoughAvailableFundsAsync(int underwriterId, decimal deductAmount) {
            return base.Channel.VerifyEnoughAvailableFundsAsync(underwriterId, deductAmount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeLtd(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeLtd(customerID, userID, serviceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeLtdAsync(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeLtdAsync(customerID, userID, serviceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeNonLtd(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeNonLtd(customerID, userID, serviceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeNonLtdAsync(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeNonLtdAsync(customerID, userID, serviceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult ExperianTarget(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request) {
            return base.Channel.ExperianTarget(customerID, userID, request);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult> ExperianTargetAsync(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request) {
            return base.Channel.ExperianTargetAsync(customerID, userID, request);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData WriteToServiceLog(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData) {
            return base.Channel.WriteToServiceLog(customerID, userID, packageInputData);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToServiceLogAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData) {
            return base.Channel.WriteToServiceLogAsync(customerID, userID, packageInputData);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedWithoutOpenLoan(int customerID, int userID, decimal amount, string paypointTransactionID) {
            return base.Channel.PayPointAddedWithoutOpenLoan(customerID, userID, amount, paypointTransactionID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedWithoutOpenLoanAsync(int customerID, int userID, decimal amount, string paypointTransactionID) {
            return base.Channel.PayPointAddedWithoutOpenLoanAsync(customerID, userID, amount, paypointTransactionID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData TopUpDelivery(int underwriterId, decimal amount, int contentCase) {
            return base.Channel.TopUpDelivery(underwriterId, amount, contentCase);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TopUpDeliveryAsync(int underwriterId, decimal amount, int contentCase) {
            return base.Channel.TopUpDeliveryAsync(underwriterId, amount, contentCase);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PacnetDelivery(int underwriterId, decimal amount) {
            return base.Channel.PacnetDelivery(underwriterId, amount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PacnetDeliveryAsync(int underwriterId, decimal amount) {
            return base.Channel.PacnetDeliveryAsync(underwriterId, amount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillDailyLoanStats() {
            return base.Channel.BackfillDailyLoanStats();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillDailyLoanStatsAsync() {
            return base.Channel.BackfillDailyLoanStatsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.LoanCommissionDefaultsActionResult GetLoanCommissionDefaults(int underwriterID, long cashRequestID, decimal loanAmount) {
            return base.Channel.GetLoanCommissionDefaults(underwriterID, cashRequestID, loanAmount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LoanCommissionDefaultsActionResult> GetLoanCommissionDefaultsAsync(int underwriterID, long cashRequestID, decimal loanAmount) {
            return base.Channel.GetLoanCommissionDefaultsAsync(underwriterID, cashRequestID, loanAmount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData GetIncomeSms(System.Nullable<System.DateTime> date, bool isYesterday) {
            return base.Channel.GetIncomeSms(date, isYesterday);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetIncomeSmsAsync(System.Nullable<System.DateTime> date, bool isYesterday) {
            return base.Channel.GetIncomeSmsAsync(date, isYesterday);
        }
        
        public ServiceClientProxy.EzServiceReference.ApplicationInfoResult LoadApplicationInfo(System.Nullable<int> underwriterID, int customerID, System.Nullable<long> cashRequestID, System.Nullable<System.DateTime> now) {
            return base.Channel.LoadApplicationInfo(underwriterID, customerID, cashRequestID, now);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ApplicationInfoResult> LoadApplicationInfoAsync(System.Nullable<int> underwriterID, int customerID, System.Nullable<long> cashRequestID, System.Nullable<System.DateTime> now) {
            return base.Channel.LoadApplicationInfoAsync(underwriterID, customerID, cashRequestID, now);
        }
        
        public ServiceClientProxy.EzServiceReference.StringStringMapActionResult SetManualDecision(Ezbob.Backend.Models.DecisionModel model) {
            return base.Channel.SetManualDecision(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringStringMapActionResult> SetManualDecisionAsync(Ezbob.Backend.Models.DecisionModel model) {
            return base.Channel.SetManualDecisionAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.MultiBrandLoanSummaryActionResult BuildMultiBrandLoanSummary(int customerID) {
            return base.Channel.BuildMultiBrandLoanSummary(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MultiBrandLoanSummaryActionResult> BuildMultiBrandLoanSummaryAsync(int customerID) {
            return base.Channel.BuildMultiBrandLoanSummaryAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.DecisionHistoryResult LoadDecisionHistory(int customerID, int underwriterID) {
            return base.Channel.LoadDecisionHistory(customerID, underwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecisionHistoryResult> LoadDecisionHistoryAsync(int customerID, int underwriterID) {
            return base.Channel.LoadDecisionHistoryAsync(customerID, underwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.MessagesListActionResult LoadMessagesSentToUser(int userID) {
            return base.Channel.LoadMessagesSentToUser(userID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MessagesListActionResult> LoadMessagesSentToUserAsync(int userID) {
            return base.Channel.LoadMessagesSentToUserAsync(userID);
        }
        
        public ServiceClientProxy.EzServiceReference.SlidersDataActionResults GetSlidersData(int customerID) {
            return base.Channel.GetSlidersData(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.SlidersDataActionResults> GetSlidersDataAsync(int customerID) {
            return base.Channel.GetSlidersDataAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData AddHistoryDirector(Ezbob.Backend.Models.Esigner Edirector) {
            return base.Channel.AddHistoryDirector(Edirector);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddHistoryDirectorAsync(Ezbob.Backend.Models.Esigner Edirector) {
            return base.Channel.AddHistoryDirectorAsync(Edirector);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ApprovedUser(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst) {
            return base.Channel.ApprovedUser(userId, customerId, loanAmount, nValidHours, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ApprovedUserAsync(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst) {
            return base.Channel.ApprovedUserAsync(userId, customerId, loanAmount, nValidHours, isFirst);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillAml() {
            return base.Channel.BackfillAml();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillAmlAsync() {
            return base.Channel.BackfillAmlAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackFillExperianNonLtdScoreText() {
            return base.Channel.BackFillExperianNonLtdScoreText();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackFillExperianNonLtdScoreTextAsync() {
            return base.Channel.BackFillExperianNonLtdScoreTextAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianConsumer() {
            return base.Channel.BackfillExperianConsumer();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianConsumerAsync() {
            return base.Channel.BackfillExperianConsumerAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianDirectors(System.Nullable<int> nCustomerID) {
            return base.Channel.BackfillExperianDirectors(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianDirectorsAsync(System.Nullable<int> nCustomerID) {
            return base.Channel.BackfillExperianDirectorsAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianLtd() {
            return base.Channel.BackfillExperianLtd();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianLtdAsync() {
            return base.Channel.BackfillExperianLtdAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianLtdScoreText() {
            return base.Channel.BackfillExperianLtdScoreText();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianLtdScoreTextAsync() {
            return base.Channel.BackfillExperianLtdScoreTextAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillHmrcBusinessRelevance() {
            return base.Channel.BackfillHmrcBusinessRelevance();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillHmrcBusinessRelevanceAsync() {
            return base.Channel.BackfillHmrcBusinessRelevanceAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillMedalForAll() {
            return base.Channel.BackfillMedalForAll();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillMedalForAllAsync() {
            return base.Channel.BackfillMedalForAllAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillNonLimitedCompanies() {
            return base.Channel.BackfillNonLimitedCompanies();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillNonLimitedCompaniesAsync() {
            return base.Channel.BackfillNonLimitedCompaniesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillTurnover() {
            return base.Channel.BackfillTurnover();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillTurnoverAsync() {
            return base.Channel.BackfillTurnoverAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillZooplaValue() {
            return base.Channel.BackfillZooplaValue();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillZooplaValueAsync() {
            return base.Channel.BackfillZooplaValueAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillBrokerCommissionInvoice() {
            return base.Channel.BackfillBrokerCommissionInvoice();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillBrokerCommissionInvoiceAsync() {
            return base.Channel.BackfillBrokerCommissionInvoiceAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CaisGenerate(int underwriterId) {
            return base.Channel.CaisGenerate(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisGenerateAsync(int underwriterId) {
            return base.Channel.CaisGenerateAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CaisUpdate(int userId, int caisId) {
            return base.Channel.CaisUpdate(userId, caisId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisUpdateAsync(int userId, int caisId) {
            return base.Channel.CaisUpdateAsync(userId, caisId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CalculateMedal(int underwriterId, int customerId, System.Nullable<long> cashRequestID, System.Nullable<long> nlCashRequestID) {
            return base.Channel.CalculateMedal(underwriterId, customerId, cashRequestID, nlCashRequestID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateMedalAsync(int underwriterId, int customerId, System.Nullable<long> cashRequestID, System.Nullable<long> nlCashRequestID) {
            return base.Channel.CalculateMedalAsync(underwriterId, customerId, cashRequestID, nlCashRequestID);
        }
        
        public ServiceClientProxy.EzServiceReference.MarketplacesActionResult CalculateModelsAndAffordability(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory) {
            return base.Channel.CalculateModelsAndAffordability(userId, nCustomerID, oHistory);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MarketplacesActionResult> CalculateModelsAndAffordabilityAsync(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory) {
            return base.Channel.CalculateModelsAndAffordabilityAsync(userId, nCustomerID, oHistory);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CashTransferred(int customerId, decimal amount, string loanRefNum, bool isFirst) {
            return base.Channel.CashTransferred(customerId, amount, loanRefNum, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CashTransferredAsync(int customerId, decimal amount, string loanRefNum, bool isFirst) {
            return base.Channel.CashTransferredAsync(customerId, amount, loanRefNum, isFirst);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckAml(int customerId, int userId) {
            return base.Channel.CheckAml(customerId, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlAsync(int customerId, int userId) {
            return base.Channel.CheckAmlAsync(customerId, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckAmlCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode) {
            return base.Channel.CheckAmlCustom(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode) {
            return base.Channel.CheckAmlCustomAsync(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwa(int customerId, int userId) {
            return base.Channel.CheckBwa(customerId, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaAsync(int customerId, int userId) {
            return base.Channel.CheckBwaAsync(customerId, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwaCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber) {
            return base.Channel.CheckBwaCustom(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode, idhubBranchCode, idhubAccountNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber) {
            return base.Channel.CheckBwaCustomAsync(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode, idhubBranchCode, idhubAccountNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianLtdActionResult CheckLtdCompanyCache(int userId, string sCompanyRefNum) {
            return base.Channel.CheckLtdCompanyCache(userId, sCompanyRefNum);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> CheckLtdCompanyCacheAsync(int userId, string sCompanyRefNum) {
            return base.Channel.CheckLtdCompanyCacheAsync(userId, sCompanyRefNum);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CompanyFilesUpload(int customerId, string fileName, byte[] fileContent, string fileContentType, bool isBankStatement) {
            return base.Channel.CompanyFilesUpload(customerId, fileName, fileContent, fileContentType, isBankStatement);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CompanyFilesUploadAsync(int customerId, string fileName, byte[] fileContent, string fileContentType, bool isBankStatement) {
            return base.Channel.CompanyFilesUploadAsync(customerId, fileName, fileContent, fileContentType, isBankStatement);
        }
        
        public ServiceClientProxy.EzServiceReference.CrmLookupsActionResult CrmLoadLookups() {
            return base.Channel.CrmLoadLookups();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CrmLookupsActionResult> CrmLoadLookupsAsync() {
            return base.Channel.CrmLoadLookupsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CustomerBankAccountIsAlreadyAddedEmail(int customerID) {
            return base.Channel.CustomerBankAccountIsAlreadyAddedEmail(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CustomerBankAccountIsAlreadyAddedEmailAsync(int customerID) {
            return base.Channel.CustomerBankAccountIsAlreadyAddedEmailAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DeleteExperianDirector(int nDirectorID, int nUnderwriterID) {
            return base.Channel.DeleteExperianDirector(nDirectorID, nUnderwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DeleteExperianDirectorAsync(int nDirectorID, int nUnderwriterID) {
            return base.Channel.DeleteExperianDirectorAsync(nDirectorID, nUnderwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DisableCurrentManualPacnetDeposits(int underwriterId) {
            return base.Channel.DisableCurrentManualPacnetDeposits(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisableCurrentManualPacnetDepositsAsync(int underwriterId) {
            return base.Channel.DisableCurrentManualPacnetDepositsAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DisplayMarketplaceSecurityData(int nCustomerID) {
            return base.Channel.DisplayMarketplaceSecurityData(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisplayMarketplaceSecurityDataAsync(int nCustomerID) {
            return base.Channel.DisplayMarketplaceSecurityDataAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailHmrcParsingErrors(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail) {
            return base.Channel.EmailHmrcParsingErrors(nCustomerID, nCustomerMarketplaceID, oErrorsToEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailHmrcParsingErrorsAsync(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail) {
            return base.Channel.EmailHmrcParsingErrorsAsync(nCustomerID, nCustomerMarketplaceID, oErrorsToEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailRolloverAdded(int userId, int customerId, decimal amount) {
            return base.Channel.EmailRolloverAdded(userId, customerId, amount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailRolloverAddedAsync(int userId, int customerId, decimal amount) {
            return base.Channel.EmailRolloverAddedAsync(userId, customerId, amount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EncryptChannelGrabberMarketplaces() {
            return base.Channel.EncryptChannelGrabberMarketplaces();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EncryptChannelGrabberMarketplacesAsync() {
            return base.Channel.EncryptChannelGrabberMarketplacesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Escalated(int customerId, int userId) {
            return base.Channel.Escalated(customerId, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EscalatedAsync(int customerId, int userId) {
            return base.Channel.EscalatedAsync(customerId, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EsignProcessPending(System.Nullable<int> nCustomerID) {
            return base.Channel.EsignProcessPending(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EsignProcessPendingAsync(System.Nullable<int> nCustomerID) {
            return base.Channel.EsignProcessPendingAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult EsignSend(int userId, EchoSignLib.EchoSignEnvelope[] oPackage) {
            return base.Channel.EsignSend(userId, oPackage);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> EsignSendAsync(int userId, EchoSignLib.EchoSignEnvelope[] oPackage) {
            return base.Channel.EsignSendAsync(userId, oPackage);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ExperianCompanyCheck(int userId, int customerId, bool forceCheck) {
            return base.Channel.ExperianCompanyCheck(userId, customerId, forceCheck);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianCompanyCheckAsync(int userId, int customerId, bool forceCheck) {
            return base.Channel.ExperianCompanyCheckAsync(userId, customerId, forceCheck);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ExperianConsumerCheck(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck) {
            return base.Channel.ExperianConsumerCheck(userId, nCustomerID, nDirectorID, bForceCheck);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianConsumerCheckAsync(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck) {
            return base.Channel.ExperianConsumerCheckAsync(userId, nCustomerID, nDirectorID, bForceCheck);
        }
        
        public ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult FindAccountsToUpdate(int nCustomerID) {
            return base.Channel.FindAccountsToUpdate(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult> FindAccountsToUpdateAsync(int nCustomerID) {
            return base.Channel.FindAccountsToUpdateAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData FinishWizard(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId) {
            return base.Channel.FinishWizard(oArgs, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FinishWizardAsync(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId) {
            return base.Channel.FinishWizardAsync(oArgs, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData FirstOfMonthStatusNotifier() {
            return base.Channel.FirstOfMonthStatusNotifier();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FirstOfMonthStatusNotifierAsync() {
            return base.Channel.FirstOfMonthStatusNotifierAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData FraudChecker(int customerId, Ezbob.Backend.Models.FraudMode mode) {
            return base.Channel.FraudChecker(customerId, mode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FraudCheckerAsync(int customerId, Ezbob.Backend.Models.FraudMode mode) {
            return base.Channel.FraudCheckerAsync(customerId, mode);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult GenerateMobileCode(string phone) {
            return base.Channel.GenerateMobileCode(phone);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> GenerateMobileCodeAsync(string phone) {
            return base.Channel.GenerateMobileCodeAsync(phone);
        }
        
        public ServiceClientProxy.EzServiceReference.AvailableFundsActionResult GetAvailableFunds(int underwriterId) {
            return base.Channel.GetAvailableFunds(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AvailableFundsActionResult> GetAvailableFundsAsync(int underwriterId) {
            return base.Channel.GetAvailableFundsAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData GetCashFailed(int customerId) {
            return base.Channel.GetCashFailed(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetCashFailedAsync(int customerId) {
            return base.Channel.GetCashFailedAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult GetCompanyCaisDataForAlerts(int underwriterId, int customerId) {
            return base.Channel.GetCompanyCaisDataForAlerts(underwriterId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult> GetCompanyCaisDataForAlertsAsync(int underwriterId, int customerId) {
            return base.Channel.GetCompanyCaisDataForAlertsAsync(underwriterId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult GetCompanyDataForCompanyScore(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCompanyScore(underwriterId, refNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult> GetCompanyDataForCompanyScoreAsync(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCompanyScoreAsync(underwriterId, refNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult GetCompanyDataForCreditBureau(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCreditBureau(underwriterId, refNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult> GetCompanyDataForCreditBureauAsync(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCreditBureauAsync(underwriterId, refNumber);
        }
        
        public byte[] GetCompanyFile(int userId, int companyFileId) {
            return base.Channel.GetCompanyFile(userId, companyFileId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetCompanyFileAsync(int userId, int companyFileId) {
            return base.Channel.GetCompanyFileAsync(userId, companyFileId);
        }
        
        public ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult GetCompanySeniority(int customerId, bool isLimited, int underwriterId) {
            return base.Channel.GetCompanySeniority(customerId, isLimited, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult> GetCompanySeniorityAsync(int customerId, bool isLimited, int underwriterId) {
            return base.Channel.GetCompanySeniorityAsync(customerId, isLimited, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ConfigTableActionResult GetConfigTable(int nUnderwriterID, string sTableName) {
            return base.Channel.GetConfigTable(nUnderwriterID, sTableName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ConfigTableActionResult> GetConfigTableAsync(int nUnderwriterID, string sTableName) {
            return base.Channel.GetConfigTableAsync(nUnderwriterID, sTableName);
        }
        
        public ServiceClientProxy.EzServiceReference.DecimalActionResult GetCurrentCustomerAnnualTurnover(int customerID) {
            return base.Channel.GetCurrentCustomerAnnualTurnover(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecimalActionResult> GetCurrentCustomerAnnualTurnoverAsync(int customerID) {
            return base.Channel.GetCurrentCustomerAnnualTurnoverAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult GetCustomerManualAnnualizedRevenue(int nCustomerID) {
            return base.Channel.GetCustomerManualAnnualizedRevenue(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> GetCustomerManualAnnualizedRevenueAsync(int nCustomerID) {
            return base.Channel.GetCustomerManualAnnualizedRevenueAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult GetCustomerState(int customerId) {
            return base.Channel.GetCustomerState(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> GetCustomerStateAsync(int customerId) {
            return base.Channel.GetCustomerStateAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult GetExperianAccountsCurrentBalance(int customerId, int underwriterId) {
            return base.Channel.GetExperianAccountsCurrentBalance(customerId, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianAccountsCurrentBalanceAsync(int customerId, int underwriterId) {
            return base.Channel.GetExperianAccountsCurrentBalanceAsync(customerId, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.DateTimeActionResult GetExperianCompanyCacheDate(int userId, string refNumber) {
            return base.Channel.GetExperianCompanyCacheDate(userId, refNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DateTimeActionResult> GetExperianCompanyCacheDateAsync(int userId, string refNumber) {
            return base.Channel.GetExperianCompanyCacheDateAsync(userId, refNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult GetExperianConsumerScore(int customerId) {
            return base.Channel.GetExperianConsumerScore(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianConsumerScoreAsync(int customerId) {
            return base.Channel.GetExperianConsumerScoreAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.WizardConfigsActionResult GetWizardConfigs() {
            return base.Channel.GetWizardConfigs();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.WizardConfigsActionResult> GetWizardConfigsAsync() {
            return base.Channel.GetWizardConfigsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.CollectionSnailMailActionResult GetCollectionSnailMail(int userID, int collectionSnailMailID) {
            return base.Channel.GetCollectionSnailMail(userID, collectionSnailMailID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CollectionSnailMailActionResult> GetCollectionSnailMailAsync(int userID, int collectionSnailMailID) {
            return base.Channel.GetCollectionSnailMailAsync(userID, collectionSnailMailID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData IovationCheck(Ezbob.Backend.Models.IovationCheckModel model) {
            return base.Channel.IovationCheck(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> IovationCheckAsync(Ezbob.Backend.Models.IovationCheckModel model) {
            return base.Channel.IovationCheckAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LateBy14Days() {
            return base.Channel.LateBy14Days();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LateBy14DaysAsync() {
            return base.Channel.LateBy14DaysAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.StringStringMapActionResult LoadCustomerLeadFieldNames() {
            return base.Channel.LoadCustomerLeadFieldNames();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringStringMapActionResult> LoadCustomerLeadFieldNamesAsync() {
            return base.Channel.LoadCustomerLeadFieldNamesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.EsignatureFileActionResult LoadEsignatureFile(int userId, long nEsignatureID) {
            return base.Channel.LoadEsignatureFile(userId, nEsignatureID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureFileActionResult> LoadEsignatureFileAsync(int userId, long nEsignatureID) {
            return base.Channel.LoadEsignatureFileAsync(userId, nEsignatureID);
        }
        
        public ServiceClientProxy.EzServiceReference.EsignatureListActionResult LoadEsignatures(int userId, System.Nullable<int> nCustomerID, bool bPollStatus) {
            return base.Channel.LoadEsignatures(userId, nCustomerID, bPollStatus);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureListActionResult> LoadEsignaturesAsync(int userId, System.Nullable<int> nCustomerID, bool bPollStatus) {
            return base.Channel.LoadEsignaturesAsync(userId, nCustomerID, bPollStatus);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult LoadExperianConsumer(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId) {
            return base.Channel.LoadExperianConsumer(userId, customerId, directorId, nServiceLogId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> LoadExperianConsumerAsync(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId) {
            return base.Channel.LoadExperianConsumerAsync(userId, customerId, directorId, nServiceLogId);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult LoadExperianConsumerMortgageData(int userId, int customerId) {
            return base.Channel.LoadExperianConsumerMortgageData(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult> LoadExperianConsumerMortgageDataAsync(int userId, int customerId) {
            return base.Channel.LoadExperianConsumerMortgageDataAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianLtdActionResult LoadExperianLtd(long nServiceLogID) {
            return base.Channel.LoadExperianLtd(nServiceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> LoadExperianLtdAsync(long nServiceLogID) {
            return base.Channel.LoadExperianLtdAsync(nServiceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult LoadManualVatReturnPeriods(int nCustomerID) {
            return base.Channel.LoadManualVatReturnPeriods(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult> LoadManualVatReturnPeriodsAsync(int nCustomerID) {
            return base.Channel.LoadManualVatReturnPeriodsAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LoanFullyPaid(int customerId, string loanRefNum) {
            return base.Channel.LoanFullyPaid(customerId, loanRefNum);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LoanFullyPaidAsync(int customerId, string loanRefNum) {
            return base.Channel.LoanFullyPaidAsync(customerId, loanRefNum);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LoanStatusAfterPayment(int userId, int customerID, string customerEmail, int loanID, decimal paymentAmount, bool sendMail, System.Nullable<decimal> balance, System.Nullable<bool> isPaidOff) {
            return base.Channel.LoanStatusAfterPayment(userId, customerID, customerEmail, loanID, paymentAmount, sendMail, balance, isPaidOff);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LoanStatusAfterPaymentAsync(int userId, int customerID, string customerEmail, int loanID, decimal paymentAmount, bool sendMail, System.Nullable<decimal> balance, System.Nullable<bool> isPaidOff) {
            return base.Channel.LoanStatusAfterPaymentAsync(userId, customerID, customerEmail, loanID, paymentAmount, sendMail, balance, isPaidOff);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MarketplaceInstantUpdate(int nMarketplaceID) {
            return base.Channel.MarketplaceInstantUpdate(nMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarketplaceInstantUpdateAsync(int nMarketplaceID) {
            return base.Channel.MarketplaceInstantUpdateAsync(nMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlAndBwaInformation(int userId, int customerId) {
            return base.Channel.MoreAmlAndBwaInformation(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlAndBwaInformationAsync(int userId, int customerId) {
            return base.Channel.MoreAmlAndBwaInformationAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlInformation(int userId, int customerId) {
            return base.Channel.MoreAmlInformation(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlInformationAsync(int userId, int customerId) {
            return base.Channel.MoreAmlInformationAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MoreBwaInformation(int userId, int customerId) {
            return base.Channel.MoreBwaInformation(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreBwaInformationAsync(int userId, int customerId) {
            return base.Channel.MoreBwaInformationAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData NotifySalesOnNewCustomer(int nCustomerID) {
            return base.Channel.NotifySalesOnNewCustomer(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NotifySalesOnNewCustomerAsync(int nCustomerID) {
            return base.Channel.NotifySalesOnNewCustomerAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult ParseExperianConsumer(long nServiceLogId) {
            return base.Channel.ParseExperianConsumer(nServiceLogId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> ParseExperianConsumerAsync(long nServiceLogId) {
            return base.Channel.ParseExperianConsumerAsync(nServiceLogId);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianLtdActionResult ParseExperianLtd(long nServiceLogID) {
            return base.Channel.ParseExperianLtd(nServiceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> ParseExperianLtdAsync(long nServiceLogID) {
            return base.Channel.ParseExperianLtdAsync(nServiceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PasswordRestored(int customerId) {
            return base.Channel.PasswordRestored(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PasswordRestoredAsync(int customerId) {
            return base.Channel.PasswordRestoredAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayEarly(int customerId, decimal amount, string loanRefNum) {
            return base.Channel.PayEarly(customerId, amount, loanRefNum);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayEarlyAsync(int customerId, decimal amount, string loanRefNum) {
            return base.Channel.PayEarlyAsync(customerId, amount, loanRefNum);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedByUnderwriter(int customerId, string cardno, string underwriterName, int underwriterId) {
            return base.Channel.PayPointAddedByUnderwriter(customerId, cardno, underwriterName, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedByUnderwriterAsync(int customerId, string cardno, string underwriterName, int underwriterId) {
            return base.Channel.PayPointAddedByUnderwriterAsync(customerId, cardno, underwriterName, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointCharger() {
            return base.Channel.PayPointCharger();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointChargerAsync() {
            return base.Channel.PayPointChargerAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointNameValidationFailed(int userId, int customerId, string cardHolderName) {
            return base.Channel.PayPointNameValidationFailed(userId, customerId, cardHolderName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointNameValidationFailedAsync(int userId, int customerId, string cardHolderName) {
            return base.Channel.PayPointNameValidationFailedAsync(userId, customerId, cardHolderName);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PostcodeSaveLog(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID) {
            return base.Channel.PostcodeSaveLog(sRequestType, sUrl, sStatus, sResponseData, sErrorMessage, nUserID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PostcodeSaveLogAsync(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID) {
            return base.Channel.PostcodeSaveLogAsync(sRequestType, sUrl, sStatus, sResponseData, sErrorMessage, nUserID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PostcodeNuts(int nUserID, string postcode) {
            return base.Channel.PostcodeNuts(nUserID, postcode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PostcodeNutsAsync(int nUserID, string postcode) {
            return base.Channel.PostcodeNutsAsync(nUserID, postcode);
        }
        
        public ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOffer(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOffer(customerId, saveOfferToDB);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferAsync(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOfferAsync(customerId, saveOfferToDB);
        }
    }
}
