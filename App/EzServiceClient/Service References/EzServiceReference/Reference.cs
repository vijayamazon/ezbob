//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceClientProxy.EzServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionMetaData", Namespace="http://schemas.datacontract.org/2004/07/EzService", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ActionMetaData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ActionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSynchronousField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.ActionStatus StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ActionID {
            get {
                return this.ActionIDField;
            }
            set {
                if ((this.ActionIDField.Equals(value) != true)) {
                    this.ActionIDField = value;
                    this.RaisePropertyChanged("ActionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSynchronous {
            get {
                return this.IsSynchronousField;
            }
            set {
                if ((this.IsSynchronousField.Equals(value) != true)) {
                    this.IsSynchronousField = value;
                    this.RaisePropertyChanged("IsSynchronous");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.ActionStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionStatus", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    public enum ActionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProgress = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Terminated = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Launched = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.StringActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.UserLoginActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BoolActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.LotteryActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ConfigTableActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.DecimalActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.IntActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.DateTimeActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.PricingModelModelActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.WizardConfigsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.StringStringMapActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.EsignatureFileActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.EsignatureListActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ExperianLtdActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.VatReturnDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.QuickOfferActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.MarketplacesActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.CrmLookupsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.AvailableFundsActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ServiceClientProxy.EzServiceReference.StringListActionResult))]
    public partial class ActionResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.ActionMetaData MetaDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.ActionMetaData MetaData {
            get {
                return this.MetaDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetaDataField, value) != true)) {
                    this.MetaDataField = value;
                    this.RaisePropertyChanged("MetaData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLoginActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class UserLoginActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OriginIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OriginID {
            get {
                return this.OriginIDField;
            }
            set {
                if ((this.OriginIDField.Equals(value) != true)) {
                    this.OriginIDField = value;
                    this.RaisePropertyChanged("OriginID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoolActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BoolActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LotteryActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class LotteryActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.LotteryResult ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.LotteryResult Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlibabaAvailableCreditActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AlibabaAvailableCreditActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.ExternalAPI.AlibabaAvailableCreditResult ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.ExternalAPI.AlibabaAvailableCreditResult Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianTargetingActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianTargetingActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyInfo[] CompanyInfosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyInfo[] CompanyInfos {
            get {
                return this.CompanyInfosField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyInfosField, value) != true)) {
                    this.CompanyInfosField = value;
                    this.RaisePropertyChanged("CompanyInfos");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyCaisDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CompanyCaisDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyCaisAccount[] AccountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfCurrentDefaultAccountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfSettledDefaultAccountsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyCaisAccount[] Accounts {
            get {
                return this.AccountsField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountsField, value) != true)) {
                    this.AccountsField = value;
                    this.RaisePropertyChanged("Accounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfCurrentDefaultAccounts {
            get {
                return this.NumOfCurrentDefaultAccountsField;
            }
            set {
                if ((this.NumOfCurrentDefaultAccountsField.Equals(value) != true)) {
                    this.NumOfCurrentDefaultAccountsField = value;
                    this.RaisePropertyChanged("NumOfCurrentDefaultAccounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfSettledDefaultAccounts {
            get {
                return this.NumOfSettledDefaultAccountsField;
            }
            set {
                if ((this.NumOfSettledDefaultAccountsField.Equals(value) != true)) {
                    this.NumOfSettledDefaultAccountsField = value;
                    this.RaisePropertyChanged("NumOfSettledDefaultAccounts");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDataForCompanyScoreActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CompanyDataForCompanyScoreActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyData DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyData Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDataForCreditBureauActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CompanyDataForCreditBureauActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CompanyDataForCreditBureau ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CompanyDataForCreditBureau Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NullableDateTimeActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class NullableDateTimeActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigTableActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ConfigTableActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EzBob.Backend.Models.ConfigTable[] TableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EzBob.Backend.Models.ConfigTable[] Table {
            get {
                return this.TableField;
            }
            set {
                if ((object.ReferenceEquals(this.TableField, value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DecimalActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class DecimalActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasValue {
            get {
                return this.HasValueField;
            }
            set {
                if ((this.HasValueField.Equals(value) != true)) {
                    this.HasValueField = value;
                    this.RaisePropertyChanged("HasValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerManualAnnualizedRevenueActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CustomerManualAnnualizedRevenueActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CustomerManualAnnualizedRevenue ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CustomerManualAnnualizedRevenue Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IntActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class IntActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateTimeActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class DateTimeActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PricingModelModelActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class PricingModelModelActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.PricingModelModel ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.PricingModelModel Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyStatusesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class PropertyStatusesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.PropertyStatusGroupModel[] GroupsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.PropertyStatusGroupModel[] Groups {
            get {
                return this.GroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupsField, value) != true)) {
                    this.GroupsField = value;
                    this.RaisePropertyChanged("Groups");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WizardConfigsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class WizardConfigsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSmsValidationActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfMobileCodeAttemptsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSmsValidationActive {
            get {
                return this.IsSmsValidationActiveField;
            }
            set {
                if ((this.IsSmsValidationActiveField.Equals(value) != true)) {
                    this.IsSmsValidationActiveField = value;
                    this.RaisePropertyChanged("IsSmsValidationActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfMobileCodeAttempts {
            get {
                return this.NumberOfMobileCodeAttemptsField;
            }
            set {
                if ((this.NumberOfMobileCodeAttemptsField.Equals(value) != true)) {
                    this.NumberOfMobileCodeAttemptsField = value;
                    this.RaisePropertyChanged("NumberOfMobileCodeAttempts");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerDetailsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CustomerDetailsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CustomerDetails ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CustomerDetails Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringStringMapActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringStringMapActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> MapField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> Map {
            get {
                return this.MapField;
            }
            set {
                if ((object.ReferenceEquals(this.MapField, value) != true)) {
                    this.MapField = value;
                    this.RaisePropertyChanged("Map");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EsignatureFileActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class EsignatureFileActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Contents {
            get {
                return this.ContentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentsField, value) != true)) {
                    this.ContentsField = value;
                    this.RaisePropertyChanged("Contents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EsignatureListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class EsignatureListActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Esignature[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Esigner[] PotentialSignersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Esignature[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Esigner[] PotentialSigners {
            get {
                return this.PotentialSignersField;
            }
            set {
                if ((object.ReferenceEquals(this.PotentialSignersField, value) != true)) {
                    this.PotentialSignersField = value;
                    this.RaisePropertyChanged("PotentialSigners");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianConsumerActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianConsumerActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerData ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerData Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianConsumerMortgageActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianConsumerMortgageActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerMortgagesData ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Experian.ExperianConsumerMortgagesData Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianLtdActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ExperianLtdActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.ScoreAtDate[] HistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.Experian.ExperianLtd ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.ScoreAtDate[] History {
            get {
                return this.HistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.HistoryField, value) != true)) {
                    this.HistoryField = value;
                    this.RaisePropertyChanged("History");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.Experian.ExperianLtd Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VatReturnPeriodsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class VatReturnPeriodsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.VatReturnPeriod[] PeriodsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.VatReturnPeriod[] Periods {
            get {
                return this.PeriodsField;
            }
            set {
                if ((object.ReferenceEquals(this.PeriodsField, value) != true)) {
                    this.PeriodsField = value;
                    this.RaisePropertyChanged("Periods");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VatReturnDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class VatReturnDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BankStatementDataModel BankStatementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BankStatementDataModel BankStatementAnnualizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.RtiTaxMonthRawData[] RtiTaxMonthRawDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.VatReturnSummary[] SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.VatReturnRawData[] VatReturnRawDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BankStatementDataModel BankStatement {
            get {
                return this.BankStatementField;
            }
            set {
                if ((object.ReferenceEquals(this.BankStatementField, value) != true)) {
                    this.BankStatementField = value;
                    this.RaisePropertyChanged("BankStatement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BankStatementDataModel BankStatementAnnualized {
            get {
                return this.BankStatementAnnualizedField;
            }
            set {
                if ((object.ReferenceEquals(this.BankStatementAnnualizedField, value) != true)) {
                    this.BankStatementAnnualizedField = value;
                    this.RaisePropertyChanged("BankStatementAnnualized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.RtiTaxMonthRawData[] RtiTaxMonthRawData {
            get {
                return this.RtiTaxMonthRawDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RtiTaxMonthRawDataField, value) != true)) {
                    this.RtiTaxMonthRawDataField = value;
                    this.RaisePropertyChanged("RtiTaxMonthRawData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.VatReturnSummary[] Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.VatReturnRawData[] VatReturnRawData {
            get {
                return this.VatReturnRawDataField;
            }
            set {
                if ((object.ReferenceEquals(this.VatReturnRawDataField, value) != true)) {
                    this.VatReturnRawDataField = value;
                    this.RaisePropertyChanged("VatReturnRawData");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuickOfferActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class QuickOfferActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.QuickOfferModel ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasValue {
            get {
                return this.HasValueField;
            }
            set {
                if ((this.HasValueField.Equals(value) != true)) {
                    this.HasValueField = value;
                    this.RaisePropertyChanged("HasValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.QuickOfferModel Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElapsedTimeInfoActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class ElapsedTimeInfoActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Utils.ElapsedTimeInfo ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Utils.ElapsedTimeInfo Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomerFileContentsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomerFileContentsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Contents {
            get {
                return this.ContentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentsField, value) != true)) {
                    this.ContentsField = value;
                    this.RaisePropertyChanged("Contents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerLeadDetailsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerLeadDetailsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeadEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LeadIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeadEmail {
            get {
                return this.LeadEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.LeadEmailField, value) != true)) {
                    this.LeadEmailField = value;
                    this.RaisePropertyChanged("LeadEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeadID {
            get {
                return this.LeadIDField;
            }
            set {
                if ((this.LeadIDField.Equals(value) != true)) {
                    this.LeadIDField = value;
                    this.RaisePropertyChanged("LeadID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomerDetailsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomerDetailsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerCustomerDetails DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.Esigner[] PotentialSignersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerCustomerDetails Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.Esigner[] PotentialSigners {
            get {
                return this.PotentialSignersField;
            }
            set {
                if ((object.ReferenceEquals(this.PotentialSignersField, value) != true)) {
                    this.PotentialSignersField = value;
                    this.RaisePropertyChanged("PotentialSigners");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerLeadDetailsDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerLeadDetailsDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerLeadDataModel BrokerLeadDataModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerLeadDataModel BrokerLeadDataModel {
            get {
                return this.BrokerLeadDataModelField;
            }
            set {
                if ((object.ReferenceEquals(this.BrokerLeadDataModelField, value) != true)) {
                    this.BrokerLeadDataModelField = value;
                    this.RaisePropertyChanged("BrokerLeadDataModel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomerFilesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomerFilesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerCustomerFile[] FilesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerCustomerFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerCustomersActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerCustomersActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerCustomerEntry[] CustomersField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerCustomerEntry[] Customers {
            get {
                return this.CustomersField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomersField, value) != true)) {
                    this.CustomersField = value;
                    this.RaisePropertyChanged("Customers");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerPropertiesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerPropertiesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.BrokerProperties PropertiesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.BrokerProperties Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerStaticDataActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class BrokerStaticDataActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CrmStaticModel CrmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.FileDescription[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPerNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPerPageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TermsIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CrmStaticModel Crm {
            get {
                return this.CrmField;
            }
            set {
                if ((object.ReferenceEquals(this.CrmField, value) != true)) {
                    this.CrmField = value;
                    this.RaisePropertyChanged("Crm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.FileDescription[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPerNumber {
            get {
                return this.MaxPerNumberField;
            }
            set {
                if ((this.MaxPerNumberField.Equals(value) != true)) {
                    this.MaxPerNumberField = value;
                    this.RaisePropertyChanged("MaxPerNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPerPage {
            get {
                return this.MaxPerPageField;
            }
            set {
                if ((this.MaxPerPageField.Equals(value) != true)) {
                    this.MaxPerPageField = value;
                    this.RaisePropertyChanged("MaxPerPage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Terms {
            get {
                return this.TermsField;
            }
            set {
                if ((object.ReferenceEquals(this.TermsField, value) != true)) {
                    this.TermsField = value;
                    this.RaisePropertyChanged("Terms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TermsID {
            get {
                return this.TermsIDField;
            }
            set {
                if ((this.TermsIDField.Equals(value) != true)) {
                    this.TermsIDField = value;
                    this.RaisePropertyChanged("TermsID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketplacesActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class MarketplacesActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.MpModel MpModelField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.MpModel MpModel {
            get {
                return this.MpModelField;
            }
            set {
                if ((object.ReferenceEquals(this.MpModelField, value) != true)) {
                    this.MpModelField = value;
                    this.RaisePropertyChanged("MpModel");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CrmLookupsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class CrmLookupsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.IdNameModel[] ActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.IdNameModel[] RanksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.CrmStatusGroup[] StatusesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.IdNameModel[] Actions {
            get {
                return this.ActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionsField, value) != true)) {
                    this.ActionsField = value;
                    this.RaisePropertyChanged("Actions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.IdNameModel[] Ranks {
            get {
                return this.RanksField;
            }
            set {
                if ((object.ReferenceEquals(this.RanksField, value) != true)) {
                    this.RanksField = value;
                    this.RaisePropertyChanged("Ranks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.CrmStatusGroup[] Statuses {
            get {
                return this.StatusesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusesField, value) != true)) {
                    this.StatusesField = value;
                    this.RaisePropertyChanged("Statuses");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailConfirmationTokenActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class EmailConfirmationTokenActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Token {
            get {
                return this.TokenField;
            }
            set {
                if ((this.TokenField.Equals(value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountsToUpdateActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AccountsToUpdateActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.Models.AccountsToUpdate AccountInfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.Models.AccountsToUpdate AccountInfo {
            get {
                return this.AccountInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountInfoField, value) != true)) {
                    this.AccountInfoField = value;
                    this.RaisePropertyChanged("AccountInfo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvailableFundsActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class AvailableFundsActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AvailableFundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ReservedAmountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AvailableFunds {
            get {
                return this.AvailableFundsField;
            }
            set {
                if ((this.AvailableFundsField.Equals(value) != true)) {
                    this.AvailableFundsField = value;
                    this.RaisePropertyChanged("AvailableFunds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ReservedAmount {
            get {
                return this.ReservedAmountField;
            }
            set {
                if ((this.ReservedAmountField.Equals(value) != true)) {
                    this.ReservedAmountField = value;
                    this.RaisePropertyChanged("ReservedAmount");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BrokerInstantOfferResponseActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService.ActionResults")]
    [System.SerializableAttribute()]
    public partial class BrokerInstantOfferResponseActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Ezbob.Backend.ModelsWithDB.BrokerInstantOfferResponse ResponseField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Ezbob.Backend.ModelsWithDB.BrokerInstantOfferResponse Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StringListActionResult", Namespace="http://schemas.datacontract.org/2004/07/EzService")]
    [System.SerializableAttribute()]
    public partial class StringListActionResult : ServiceClientProxy.EzServiceReference.ActionResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] RecordsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Records {
            get {
                return this.RecordsField;
            }
            set {
                if ((object.ReferenceEquals(this.RecordsField, value) != true)) {
                    this.RecordsField = value;
                    this.RaisePropertyChanged("Records");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PricingModelModel", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.PricingModel")]
    [System.SerializableAttribute()]
    public partial class PricingModelModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BrokerSetupFeePercentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BrokerSetupFeePoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CogsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CogsOutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CollectionRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompanyScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ConsumerScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CosmeCollectionRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostOfDebtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal CostOfDebtOutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DebtPercentOfCapitalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DefaultRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DefaultRateCompanyShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DefaultRateCustomerShareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal EbitdaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal EuCollectionRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal FeesRevenueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal GrossProfitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InterestOnlyPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal InterestRevenueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LoanAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LoanTermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MonthlyInterestRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal NetLossFromDefaultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal OpexAndCapexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal OpexAndCapexOutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ServiceClientProxy.EzServiceReference.PricingSourceModel[] PricingSourceModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ProfitMarkupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ProfitMarkupOutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RevenueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupFeePercentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupFeePoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TenureMonthsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TenurePercentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalCostField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BrokerSetupFeePercents {
            get {
                return this.BrokerSetupFeePercentsField;
            }
            set {
                if ((this.BrokerSetupFeePercentsField.Equals(value) != true)) {
                    this.BrokerSetupFeePercentsField = value;
                    this.RaisePropertyChanged("BrokerSetupFeePercents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal BrokerSetupFeePounds {
            get {
                return this.BrokerSetupFeePoundsField;
            }
            set {
                if ((this.BrokerSetupFeePoundsField.Equals(value) != true)) {
                    this.BrokerSetupFeePoundsField = value;
                    this.RaisePropertyChanged("BrokerSetupFeePounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cogs {
            get {
                return this.CogsField;
            }
            set {
                if ((this.CogsField.Equals(value) != true)) {
                    this.CogsField = value;
                    this.RaisePropertyChanged("Cogs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CogsOutput {
            get {
                return this.CogsOutputField;
            }
            set {
                if ((this.CogsOutputField.Equals(value) != true)) {
                    this.CogsOutputField = value;
                    this.RaisePropertyChanged("CogsOutput");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CollectionRate {
            get {
                return this.CollectionRateField;
            }
            set {
                if ((this.CollectionRateField.Equals(value) != true)) {
                    this.CollectionRateField = value;
                    this.RaisePropertyChanged("CollectionRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyScore {
            get {
                return this.CompanyScoreField;
            }
            set {
                if ((this.CompanyScoreField.Equals(value) != true)) {
                    this.CompanyScoreField = value;
                    this.RaisePropertyChanged("CompanyScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConsumerScore {
            get {
                return this.ConsumerScoreField;
            }
            set {
                if ((this.ConsumerScoreField.Equals(value) != true)) {
                    this.ConsumerScoreField = value;
                    this.RaisePropertyChanged("ConsumerScore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CosmeCollectionRate {
            get {
                return this.CosmeCollectionRateField;
            }
            set {
                if ((this.CosmeCollectionRateField.Equals(value) != true)) {
                    this.CosmeCollectionRateField = value;
                    this.RaisePropertyChanged("CosmeCollectionRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CostOfDebt {
            get {
                return this.CostOfDebtField;
            }
            set {
                if ((this.CostOfDebtField.Equals(value) != true)) {
                    this.CostOfDebtField = value;
                    this.RaisePropertyChanged("CostOfDebt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CostOfDebtOutput {
            get {
                return this.CostOfDebtOutputField;
            }
            set {
                if ((this.CostOfDebtOutputField.Equals(value) != true)) {
                    this.CostOfDebtOutputField = value;
                    this.RaisePropertyChanged("CostOfDebtOutput");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DebtPercentOfCapital {
            get {
                return this.DebtPercentOfCapitalField;
            }
            set {
                if ((this.DebtPercentOfCapitalField.Equals(value) != true)) {
                    this.DebtPercentOfCapitalField = value;
                    this.RaisePropertyChanged("DebtPercentOfCapital");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DefaultRate {
            get {
                return this.DefaultRateField;
            }
            set {
                if ((this.DefaultRateField.Equals(value) != true)) {
                    this.DefaultRateField = value;
                    this.RaisePropertyChanged("DefaultRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DefaultRateCompanyShare {
            get {
                return this.DefaultRateCompanyShareField;
            }
            set {
                if ((this.DefaultRateCompanyShareField.Equals(value) != true)) {
                    this.DefaultRateCompanyShareField = value;
                    this.RaisePropertyChanged("DefaultRateCompanyShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DefaultRateCustomerShare {
            get {
                return this.DefaultRateCustomerShareField;
            }
            set {
                if ((this.DefaultRateCustomerShareField.Equals(value) != true)) {
                    this.DefaultRateCustomerShareField = value;
                    this.RaisePropertyChanged("DefaultRateCustomerShare");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Ebitda {
            get {
                return this.EbitdaField;
            }
            set {
                if ((this.EbitdaField.Equals(value) != true)) {
                    this.EbitdaField = value;
                    this.RaisePropertyChanged("Ebitda");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal EuCollectionRate {
            get {
                return this.EuCollectionRateField;
            }
            set {
                if ((this.EuCollectionRateField.Equals(value) != true)) {
                    this.EuCollectionRateField = value;
                    this.RaisePropertyChanged("EuCollectionRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal FeesRevenue {
            get {
                return this.FeesRevenueField;
            }
            set {
                if ((this.FeesRevenueField.Equals(value) != true)) {
                    this.FeesRevenueField = value;
                    this.RaisePropertyChanged("FeesRevenue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal GrossProfit {
            get {
                return this.GrossProfitField;
            }
            set {
                if ((this.GrossProfitField.Equals(value) != true)) {
                    this.GrossProfitField = value;
                    this.RaisePropertyChanged("GrossProfit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InterestOnlyPeriod {
            get {
                return this.InterestOnlyPeriodField;
            }
            set {
                if ((this.InterestOnlyPeriodField.Equals(value) != true)) {
                    this.InterestOnlyPeriodField = value;
                    this.RaisePropertyChanged("InterestOnlyPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal InterestRevenue {
            get {
                return this.InterestRevenueField;
            }
            set {
                if ((this.InterestRevenueField.Equals(value) != true)) {
                    this.InterestRevenueField = value;
                    this.RaisePropertyChanged("InterestRevenue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal LoanAmount {
            get {
                return this.LoanAmountField;
            }
            set {
                if ((this.LoanAmountField.Equals(value) != true)) {
                    this.LoanAmountField = value;
                    this.RaisePropertyChanged("LoanAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoanTerm {
            get {
                return this.LoanTermField;
            }
            set {
                if ((this.LoanTermField.Equals(value) != true)) {
                    this.LoanTermField = value;
                    this.RaisePropertyChanged("LoanTerm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MonthlyInterestRate {
            get {
                return this.MonthlyInterestRateField;
            }
            set {
                if ((this.MonthlyInterestRateField.Equals(value) != true)) {
                    this.MonthlyInterestRateField = value;
                    this.RaisePropertyChanged("MonthlyInterestRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal NetLossFromDefaults {
            get {
                return this.NetLossFromDefaultsField;
            }
            set {
                if ((this.NetLossFromDefaultsField.Equals(value) != true)) {
                    this.NetLossFromDefaultsField = value;
                    this.RaisePropertyChanged("NetLossFromDefaults");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OpexAndCapex {
            get {
                return this.OpexAndCapexField;
            }
            set {
                if ((this.OpexAndCapexField.Equals(value) != true)) {
                    this.OpexAndCapexField = value;
                    this.RaisePropertyChanged("OpexAndCapex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OpexAndCapexOutput {
            get {
                return this.OpexAndCapexOutputField;
            }
            set {
                if ((this.OpexAndCapexOutputField.Equals(value) != true)) {
                    this.OpexAndCapexOutputField = value;
                    this.RaisePropertyChanged("OpexAndCapexOutput");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceClientProxy.EzServiceReference.PricingSourceModel[] PricingSourceModels {
            get {
                return this.PricingSourceModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.PricingSourceModelsField, value) != true)) {
                    this.PricingSourceModelsField = value;
                    this.RaisePropertyChanged("PricingSourceModels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ProfitMarkup {
            get {
                return this.ProfitMarkupField;
            }
            set {
                if ((this.ProfitMarkupField.Equals(value) != true)) {
                    this.ProfitMarkupField = value;
                    this.RaisePropertyChanged("ProfitMarkup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ProfitMarkupOutput {
            get {
                return this.ProfitMarkupOutputField;
            }
            set {
                if ((this.ProfitMarkupOutputField.Equals(value) != true)) {
                    this.ProfitMarkupOutputField = value;
                    this.RaisePropertyChanged("ProfitMarkupOutput");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Revenue {
            get {
                return this.RevenueField;
            }
            set {
                if ((this.RevenueField.Equals(value) != true)) {
                    this.RevenueField = value;
                    this.RaisePropertyChanged("Revenue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupFeePercents {
            get {
                return this.SetupFeePercentsField;
            }
            set {
                if ((this.SetupFeePercentsField.Equals(value) != true)) {
                    this.SetupFeePercentsField = value;
                    this.RaisePropertyChanged("SetupFeePercents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupFeePounds {
            get {
                return this.SetupFeePoundsField;
            }
            set {
                if ((this.SetupFeePoundsField.Equals(value) != true)) {
                    this.SetupFeePoundsField = value;
                    this.RaisePropertyChanged("SetupFeePounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TenureMonths {
            get {
                return this.TenureMonthsField;
            }
            set {
                if ((this.TenureMonthsField.Equals(value) != true)) {
                    this.TenureMonthsField = value;
                    this.RaisePropertyChanged("TenureMonths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TenurePercents {
            get {
                return this.TenurePercentsField;
            }
            set {
                if ((this.TenurePercentsField.Equals(value) != true)) {
                    this.TenurePercentsField = value;
                    this.RaisePropertyChanged("TenurePercents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TotalCost {
            get {
                return this.TotalCostField;
            }
            set {
                if ((this.TotalCostField.Equals(value) != true)) {
                    this.TotalCostField = value;
                    this.RaisePropertyChanged("TotalCost");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PricingSourceModel", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.PricingModel")]
    [System.SerializableAttribute()]
    public partial class PricingSourceModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AIRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal APRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal InterestRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPreferableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal SetupFeeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AIR {
            get {
                return this.AIRField;
            }
            set {
                if ((this.AIRField.Equals(value) != true)) {
                    this.AIRField = value;
                    this.RaisePropertyChanged("AIR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal APR {
            get {
                return this.APRField;
            }
            set {
                if ((this.APRField.Equals(value) != true)) {
                    this.APRField = value;
                    this.RaisePropertyChanged("APR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal InterestRate {
            get {
                return this.InterestRateField;
            }
            set {
                if ((this.InterestRateField.Equals(value) != true)) {
                    this.InterestRateField = value;
                    this.RaisePropertyChanged("InterestRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPreferable {
            get {
                return this.IsPreferableField;
            }
            set {
                if ((this.IsPreferableField.Equals(value) != true)) {
                    this.IsPreferableField = value;
                    this.RaisePropertyChanged("IsPreferable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal SetupFee {
            get {
                return this.SetupFeeField;
            }
            set {
                if ((this.SetupFeeField.Equals(value) != true)) {
                    this.SetupFeeField = value;
                    this.RaisePropertyChanged("SetupFee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlibabaBusinessType", Namespace="http://schemas.datacontract.org/2004/07/DbConstants")]
    public enum AlibabaBusinessType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        APPLICATION = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        APPLICATION_REVIEW = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DRAW_REQUEST = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PAYMENT_CONFIRMATION = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOAN_SERVICING = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExperianServiceType", Namespace="http://schemas.datacontract.org/2004/07/EZBob.DatabaseLib.Model.Database")]
    public enum ExperianServiceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Aml = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Askville = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bwa = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Consumer = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LimitedData = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonLimitedData = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Targeting = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditSafeLtd = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditSafeNonLtd = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CreditSafeNonLtdTargeting = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CallCredit = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MainStrategy.DoAction", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.MainStrategy")]
    public enum MainStrategyDoAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yes = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        No = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PasswordResetTarget", Namespace="http://schemas.datacontract.org/2004/07/Ezbob.Backend.Strategies.UserManagement")]
    public enum PasswordResetTarget : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Customer = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broker = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class TaskModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOpportunityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpportunity {
            get {
                return this.IsOpportunityField;
            }
            set {
                if ((this.IsOpportunityField.Equals(value) != true)) {
                    this.IsOpportunityField = value;
                    this.RaisePropertyChanged("IsOpportunity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Originator {
            get {
                return this.OriginatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginatorField, value) != true)) {
                    this.OriginatorField = value;
                    this.RaisePropertyChanged("Originator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityField, value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subject {
            get {
                return this.SubjectField;
            }
            set {
                if ((object.ReferenceEquals(this.SubjectField, value) != true)) {
                    this.SubjectField = value;
                    this.RaisePropertyChanged("Subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ActivityModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOpportunityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpportunity {
            get {
                return this.IsOpportunityField;
            }
            set {
                if ((this.IsOpportunityField.Equals(value) != true)) {
                    this.IsOpportunityField = value;
                    this.RaisePropertyChanged("IsOpportunity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Originator {
            get {
                return this.OriginatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginatorField, value) != true)) {
                    this.OriginatorField = value;
                    this.RaisePropertyChanged("Originator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OpportunityModel", Namespace="http://schemas.datacontract.org/2004/07/SalesForceLib.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class OpportunityModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ApprovedAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CloseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DealCloseTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DealLostReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExpectedEndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequestedAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TookAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ApprovedAmount {
            get {
                return this.ApprovedAmountField;
            }
            set {
                if ((this.ApprovedAmountField.Equals(value) != true)) {
                    this.ApprovedAmountField = value;
                    this.RaisePropertyChanged("ApprovedAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CloseDate {
            get {
                return this.CloseDateField;
            }
            set {
                if ((this.CloseDateField.Equals(value) != true)) {
                    this.CloseDateField = value;
                    this.RaisePropertyChanged("CloseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DealCloseType {
            get {
                return this.DealCloseTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DealCloseTypeField, value) != true)) {
                    this.DealCloseTypeField = value;
                    this.RaisePropertyChanged("DealCloseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DealLostReason {
            get {
                return this.DealLostReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.DealLostReasonField, value) != true)) {
                    this.DealLostReasonField = value;
                    this.RaisePropertyChanged("DealLostReason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExpectedEndDate {
            get {
                return this.ExpectedEndDateField;
            }
            set {
                if ((this.ExpectedEndDateField.Equals(value) != true)) {
                    this.ExpectedEndDateField = value;
                    this.RaisePropertyChanged("ExpectedEndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequestedAmount {
            get {
                return this.RequestedAmountField;
            }
            set {
                if ((this.RequestedAmountField.Equals(value) != true)) {
                    this.RequestedAmountField = value;
                    this.RaisePropertyChanged("RequestedAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Stage {
            get {
                return this.StageField;
            }
            set {
                if ((object.ReferenceEquals(this.StageField, value) != true)) {
                    this.StageField = value;
                    this.RaisePropertyChanged("Stage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TookAmount {
            get {
                return this.TookAmountField;
            }
            set {
                if ((this.TookAmountField.Equals(value) != true)) {
                    this.TookAmountField = value;
                    this.RaisePropertyChanged("TookAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Medal", Namespace="http://schemas.datacontract.org/2004/07/EZBob.DatabaseLib.Model.Database")]
    public enum Medal : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoClassification = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Silver = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Gold = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Platinum = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Diamond = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EzServiceReference.IEzServiceAdmin")]
    public interface IEzServiceAdmin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Shutdown", ReplyAction="http://tempuri.org/IEzServiceAdmin/ShutdownResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Shutdown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Shutdown", ReplyAction="http://tempuri.org/IEzServiceAdmin/ShutdownResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ShutdownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Nop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NopResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Nop(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Nop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NopResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NopAsync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Noop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NoopResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Noop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Noop", ReplyAction="http://tempuri.org/IEzServiceAdmin/NoopResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NoopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestAction", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestActionResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData StressTestAction(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestAction", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestActionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestActionAsync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestSync", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestSyncResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData StressTestSync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/StressTestSync", ReplyAction="http://tempuri.org/IEzServiceAdmin/StressTestSyncResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestSyncAsync(int nLengthInSeconds, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Terminate", ReplyAction="http://tempuri.org/IEzServiceAdmin/TerminateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Terminate(System.Guid sActionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/Terminate", ReplyAction="http://tempuri.org/IEzServiceAdmin/TerminateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TerminateAsync(System.Guid sActionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/ListActiveActions", ReplyAction="http://tempuri.org/IEzServiceAdmin/ListActiveActionsResponse")]
        ServiceClientProxy.EzServiceReference.StringListActionResult ListActiveActions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/ListActiveActions", ReplyAction="http://tempuri.org/IEzServiceAdmin/ListActiveActionsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> ListActiveActionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/WriteToLog", ReplyAction="http://tempuri.org/IEzServiceAdmin/WriteToLogResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData WriteToLog(string sSeverity, string sMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzServiceAdmin/WriteToLog", ReplyAction="http://tempuri.org/IEzServiceAdmin/WriteToLogResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToLogAsync(string sSeverity, string sMsg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEzServiceAdminChannel : ServiceClientProxy.EzServiceReference.IEzServiceAdmin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EzServiceAdminClient : System.ServiceModel.ClientBase<ServiceClientProxy.EzServiceReference.IEzServiceAdmin>, ServiceClientProxy.EzServiceReference.IEzServiceAdmin {
        
        public EzServiceAdminClient() {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceAdminClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceAdminClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Shutdown() {
            return base.Channel.Shutdown();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ShutdownAsync() {
            return base.Channel.ShutdownAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Nop(int nLengthInSeconds, string sMsg) {
            return base.Channel.Nop(nLengthInSeconds, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NopAsync(int nLengthInSeconds, string sMsg) {
            return base.Channel.NopAsync(nLengthInSeconds, sMsg);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Noop() {
            return base.Channel.Noop();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NoopAsync() {
            return base.Channel.NoopAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData StressTestAction(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestAction(nLengthInSeconds, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestActionAsync(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestActionAsync(nLengthInSeconds, sMsg);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData StressTestSync(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestSync(nLengthInSeconds, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> StressTestSyncAsync(int nLengthInSeconds, string sMsg) {
            return base.Channel.StressTestSyncAsync(nLengthInSeconds, sMsg);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Terminate(System.Guid sActionID) {
            return base.Channel.Terminate(sActionID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TerminateAsync(System.Guid sActionID) {
            return base.Channel.TerminateAsync(sActionID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringListActionResult ListActiveActions() {
            return base.Channel.ListActiveActions();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> ListActiveActionsAsync() {
            return base.Channel.ListActiveActionsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData WriteToLog(string sSeverity, string sMsg) {
            return base.Channel.WriteToLog(sSeverity, sMsg);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToLogAsync(string sSeverity, string sMsg) {
            return base.Channel.WriteToLogAsync(sSeverity, sMsg);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EzServiceReference.IEzService")]
    public interface IEzService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzService/UpdateLinkedHmrcPasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword, string sHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzService/UpdateLinkedHmrcPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword, string sHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateMarketplace", ReplyAction="http://tempuri.org/IEzService/UpdateMarketplaceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateMarketplace(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateMarketplace", ReplyAction="http://tempuri.org/IEzService/UpdateMarketplaceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateMarketplaceAsync(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateTransactionStatus", ReplyAction="http://tempuri.org/IEzService/UpdateTransactionStatusResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateTransactionStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateTransactionStatus", ReplyAction="http://tempuri.org/IEzService/UpdateTransactionStatusResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateTransactionStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserChangeEmail", ReplyAction="http://tempuri.org/IEzService/UserChangeEmailResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserChangeEmail(int underwriterId, int nUserID, string sNewEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserChangeEmail", ReplyAction="http://tempuri.org/IEzService/UserChangeEmailResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserChangeEmailAsync(int underwriterId, int nUserID, string sNewEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserChangePassword", ReplyAction="http://tempuri.org/IEzService/UserChangePasswordResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserChangePassword(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword, bool bForceChangePassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserChangePassword", ReplyAction="http://tempuri.org/IEzService/UserChangePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserChangePasswordAsync(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword, bool bForceChangePassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserLogin", ReplyAction="http://tempuri.org/IEzService/UserLoginResponse")]
        ServiceClientProxy.EzServiceReference.UserLoginActionResult UserLogin(string sEmail, Ezbob.Backend.Models.Password sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserLogin", ReplyAction="http://tempuri.org/IEzService/UserLoginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> UserLoginAsync(string sEmail, Ezbob.Backend.Models.Password sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserDisable", ReplyAction="http://tempuri.org/IEzService/UserDisableResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserDisable(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserDisable", ReplyAction="http://tempuri.org/IEzService/UserDisableResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserDisableAsync(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserResetPassword", ReplyAction="http://tempuri.org/IEzService/UserResetPasswordResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserResetPassword(string sEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserResetPassword", ReplyAction="http://tempuri.org/IEzService/UserResetPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserResetPasswordAsync(string sEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserUpdateSecurityQuestion", ReplyAction="http://tempuri.org/IEzService/UserUpdateSecurityQuestionResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult UserUpdateSecurityQuestion(string sEmail, Ezbob.Backend.Models.Password oPassword, int nQuestionID, string sAnswer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UserUpdateSecurityQuestion", ReplyAction="http://tempuri.org/IEzService/UserUpdateSecurityQuestionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserUpdateSecurityQuestionAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, int nQuestionID, string sAnswer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ValidateAndUpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzService/ValidateAndUpdateLinkedHmrcPasswordResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult ValidateAndUpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword, string sHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ValidateAndUpdateLinkedHmrcPassword", ReplyAction="http://tempuri.org/IEzService/ValidateAndUpdateLinkedHmrcPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> ValidateAndUpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword, string sHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ValidateMobileCode", ReplyAction="http://tempuri.org/IEzService/ValidateMobileCodeResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult ValidateMobileCode(string phone, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ValidateMobileCode", ReplyAction="http://tempuri.org/IEzService/ValidateMobileCodeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ValidateMobileCodeAsync(string phone, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MaamMedalAndPricing", ReplyAction="http://tempuri.org/IEzService/MaamMedalAndPricingResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MaamMedalAndPricing(int nCustomerCount, int nLastCheckedCashRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MaamMedalAndPricing", ReplyAction="http://tempuri.org/IEzService/MaamMedalAndPricingResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MaamMedalAndPricingAsync(int nCustomerCount, int nLastCheckedCashRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyMedal", ReplyAction="http://tempuri.org/IEzService/VerifyMedalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyMedal(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyMedal", ReplyAction="http://tempuri.org/IEzService/VerifyMedalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyMedalAsync(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyApproval", ReplyAction="http://tempuri.org/IEzService/VerifyApprovalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyApproval(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyApproval", ReplyAction="http://tempuri.org/IEzService/VerifyApprovalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyApprovalAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyEnoughAvailableFunds", ReplyAction="http://tempuri.org/IEzService/VerifyEnoughAvailableFundsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyEnoughAvailableFunds(int underwriterId, decimal deductAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyEnoughAvailableFunds", ReplyAction="http://tempuri.org/IEzService/VerifyEnoughAvailableFundsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyEnoughAvailableFundsAsync(int underwriterId, decimal deductAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyReapproval", ReplyAction="http://tempuri.org/IEzService/VerifyReapprovalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReapproval(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyReapproval", ReplyAction="http://tempuri.org/IEzService/VerifyReapprovalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyReapprovalAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyReject", ReplyAction="http://tempuri.org/IEzService/VerifyRejectResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReject(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyReject", ReplyAction="http://tempuri.org/IEzService/VerifyRejectResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRejectAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyRerejection", ReplyAction="http://tempuri.org/IEzService/VerifyRerejectionResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VerifyRerejection(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VerifyRerejection", ReplyAction="http://tempuri.org/IEzService/VerifyRerejectionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRerejectionAsync(int nCustomerCount, int nLastCheckedCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VipRequest", ReplyAction="http://tempuri.org/IEzService/VipRequestResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData VipRequest(int customerId, string fullname, string email, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/VipRequest", ReplyAction="http://tempuri.org/IEzService/VipRequestResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VipRequestAsync(int customerId, string fullname, string email, string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/XDaysDue", ReplyAction="http://tempuri.org/IEzService/XDaysDueResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData XDaysDue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/XDaysDue", ReplyAction="http://tempuri.org/IEzService/XDaysDueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> XDaysDueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ChangeLotteryPlayerStatus", ReplyAction="http://tempuri.org/IEzService/ChangeLotteryPlayerStatusResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ChangeLotteryPlayerStatus(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ChangeLotteryPlayerStatus", ReplyAction="http://tempuri.org/IEzService/ChangeLotteryPlayerStatusResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ChangeLotteryPlayerStatusAsync(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PlayLottery", ReplyAction="http://tempuri.org/IEzService/PlayLotteryResponse")]
        ServiceClientProxy.EzServiceReference.LotteryActionResult PlayLottery(int customerID, System.Guid playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PlayLottery", ReplyAction="http://tempuri.org/IEzService/PlayLotteryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LotteryActionResult> PlayLotteryAsync(int customerID, System.Guid playerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EnlistLottery", ReplyAction="http://tempuri.org/IEzService/EnlistLotteryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EnlistLottery(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EnlistLottery", ReplyAction="http://tempuri.org/IEzService/EnlistLotteryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EnlistLotteryAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerAvaliableCredit", ReplyAction="http://tempuri.org/IEzService/CustomerAvaliableCreditResponse")]
        ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult CustomerAvaliableCredit(int customerID, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerAvaliableCredit", ReplyAction="http://tempuri.org/IEzService/CustomerAvaliableCreditResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult> CustomerAvaliableCreditAsync(int customerID, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequalifyCustomer", ReplyAction="http://tempuri.org/IEzService/RequalifyCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RequalifyCustomer(int customerID, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequalifyCustomer", ReplyAction="http://tempuri.org/IEzService/RequalifyCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequalifyCustomerAsync(int customerID, long aliMemberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DataSharing", ReplyAction="http://tempuri.org/IEzService/DataSharingResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DataSharing(int customerID, ServiceClientProxy.EzServiceReference.AlibabaBusinessType businessType, System.Nullable<int> uwID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DataSharing", ReplyAction="http://tempuri.org/IEzService/DataSharingResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DataSharingAsync(int customerID, ServiceClientProxy.EzServiceReference.AlibabaBusinessType businessType, System.Nullable<int> uwID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveApiCall", ReplyAction="http://tempuri.org/IEzService/SaveApiCallResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SaveApiCall(Ezbob.Backend.Models.ExternalAPI.ApiCallData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveApiCall", ReplyAction="http://tempuri.org/IEzService/SaveApiCallResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveApiCallAsync(Ezbob.Backend.Models.ExternalAPI.ApiCallData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SilentAutomation", ReplyAction="http://tempuri.org/IEzService/SilentAutomationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SilentAutomation(int customerID, int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SilentAutomation", ReplyAction="http://tempuri.org/IEzService/SilentAutomationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SilentAutomationAsync(int customerID, int underwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TotalMaamMedalAndPricing", ReplyAction="http://tempuri.org/IEzService/TotalMaamMedalAndPricingResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData TotalMaamMedalAndPricing(bool testMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TotalMaamMedalAndPricing", ReplyAction="http://tempuri.org/IEzService/TotalMaamMedalAndPricingResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TotalMaamMedalAndPricingAsync(bool testMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeLtdResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeLtd(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeLtdAsync(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeNonLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeNonLtdResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeNonLtd(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseCreditSafeNonLtd", ReplyAction="http://tempuri.org/IEzService/ParseCreditSafeNonLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeNonLtdAsync(int customerID, int userID, long serviceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianTarget", ReplyAction="http://tempuri.org/IEzService/ExperianTargetResponse")]
        ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult ExperianTarget(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianTarget", ReplyAction="http://tempuri.org/IEzService/ExperianTargetResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult> ExperianTargetAsync(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/WriteToServiceLog", ReplyAction="http://tempuri.org/IEzService/WriteToServiceLogResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData WriteToServiceLog(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/WriteToServiceLog", ReplyAction="http://tempuri.org/IEzService/WriteToServiceLogResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToServiceLogAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoan", ReplyAction="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoanResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedWithoutOpenLoan(int customerID, int userID, decimal amount, string paypointTransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoan", ReplyAction="http://tempuri.org/IEzService/PayPointAddedWithoutOpenLoanResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedWithoutOpenLoanAsync(int customerID, int userID, decimal amount, string paypointTransactionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyCaisDataForAlerts", ReplyAction="http://tempuri.org/IEzService/GetCompanyCaisDataForAlertsResponse")]
        ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult GetCompanyCaisDataForAlerts(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyCaisDataForAlerts", ReplyAction="http://tempuri.org/IEzService/GetCompanyCaisDataForAlertsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult> GetCompanyCaisDataForAlertsAsync(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCompanyScore", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCompanyScoreResponse")]
        ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult GetCompanyDataForCompanyScore(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCompanyScore", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCompanyScoreResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult> GetCompanyDataForCompanyScoreAsync(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCreditBureau", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCreditBureauResponse")]
        ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult GetCompanyDataForCreditBureau(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyDataForCreditBureau", ReplyAction="http://tempuri.org/IEzService/GetCompanyDataForCreditBureauResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult> GetCompanyDataForCreditBureauAsync(int underwriterId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyFile", ReplyAction="http://tempuri.org/IEzService/GetCompanyFileResponse")]
        byte[] GetCompanyFile(int userId, int companyFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanyFile", ReplyAction="http://tempuri.org/IEzService/GetCompanyFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetCompanyFileAsync(int userId, int companyFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanySeniority", ReplyAction="http://tempuri.org/IEzService/GetCompanySeniorityResponse")]
        ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult GetCompanySeniority(int customerId, bool isLimited, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCompanySeniority", ReplyAction="http://tempuri.org/IEzService/GetCompanySeniorityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult> GetCompanySeniorityAsync(int customerId, bool isLimited, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetConfigTable", ReplyAction="http://tempuri.org/IEzService/GetConfigTableResponse")]
        ServiceClientProxy.EzServiceReference.ConfigTableActionResult GetConfigTable(int nUnderwriterID, string sTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetConfigTable", ReplyAction="http://tempuri.org/IEzService/GetConfigTableResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ConfigTableActionResult> GetConfigTableAsync(int nUnderwriterID, string sTableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnover", ReplyAction="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnoverResponse")]
        ServiceClientProxy.EzServiceReference.DecimalActionResult GetCurrentCustomerAnnualTurnover(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnover", ReplyAction="http://tempuri.org/IEzService/GetCurrentCustomerAnnualTurnoverResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecimalActionResult> GetCurrentCustomerAnnualTurnoverAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenueResponse")]
        ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult GetCustomerManualAnnualizedRevenue(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/GetCustomerManualAnnualizedRevenueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> GetCustomerManualAnnualizedRevenueAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerState", ReplyAction="http://tempuri.org/IEzService/GetCustomerStateResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult GetCustomerState(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCustomerState", ReplyAction="http://tempuri.org/IEzService/GetCustomerStateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> GetCustomerStateAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalance", ReplyAction="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalanceResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult GetExperianAccountsCurrentBalance(int customerId, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalance", ReplyAction="http://tempuri.org/IEzService/GetExperianAccountsCurrentBalanceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianAccountsCurrentBalanceAsync(int customerId, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianCompanyCacheDate", ReplyAction="http://tempuri.org/IEzService/GetExperianCompanyCacheDateResponse")]
        ServiceClientProxy.EzServiceReference.DateTimeActionResult GetExperianCompanyCacheDate(int userId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianCompanyCacheDate", ReplyAction="http://tempuri.org/IEzService/GetExperianCompanyCacheDateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DateTimeActionResult> GetExperianCompanyCacheDateAsync(int userId, string refNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianConsumerScore", ReplyAction="http://tempuri.org/IEzService/GetExperianConsumerScoreResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult GetExperianConsumerScore(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetExperianConsumerScore", ReplyAction="http://tempuri.org/IEzService/GetExperianConsumerScoreResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianConsumerScoreAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPricingModelDefaultRate", ReplyAction="http://tempuri.org/IEzService/GetPricingModelDefaultRateResponse")]
        ServiceClientProxy.EzServiceReference.DecimalActionResult GetPricingModelDefaultRate(int customerId, int underwriterId, decimal companyShare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPricingModelDefaultRate", ReplyAction="http://tempuri.org/IEzService/GetPricingModelDefaultRateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecimalActionResult> GetPricingModelDefaultRateAsync(int customerId, int underwriterId, decimal companyShare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPricingModelModel", ReplyAction="http://tempuri.org/IEzService/GetPricingModelModelResponse")]
        ServiceClientProxy.EzServiceReference.PricingModelModelActionResult GetPricingModelModel(int customerId, int underwriterId, string scenarioName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPricingModelModel", ReplyAction="http://tempuri.org/IEzService/GetPricingModelModelResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> GetPricingModelModelAsync(int customerId, int underwriterId, string scenarioName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPricingModelScenarios", ReplyAction="http://tempuri.org/IEzService/GetPricingModelScenariosResponse")]
        ServiceClientProxy.EzServiceReference.StringListActionResult GetPricingModelScenarios(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPricingModelScenarios", ReplyAction="http://tempuri.org/IEzService/GetPricingModelScenariosResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> GetPricingModelScenariosAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPropertyStatuses", ReplyAction="http://tempuri.org/IEzService/GetPropertyStatusesResponse")]
        ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult GetPropertyStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetPropertyStatuses", ReplyAction="http://tempuri.org/IEzService/GetPropertyStatusesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult> GetPropertyStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetWizardConfigs", ReplyAction="http://tempuri.org/IEzService/GetWizardConfigsResponse")]
        ServiceClientProxy.EzServiceReference.WizardConfigsActionResult GetWizardConfigs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetWizardConfigs", ReplyAction="http://tempuri.org/IEzService/GetWizardConfigsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.WizardConfigsActionResult> GetWizardConfigsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetZooplaData", ReplyAction="http://tempuri.org/IEzService/GetZooplaDataResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData GetZooplaData(int customerId, bool reCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetZooplaData", ReplyAction="http://tempuri.org/IEzService/GetZooplaDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetZooplaDataAsync(int customerId, bool reCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/IovationCheck", ReplyAction="http://tempuri.org/IEzService/IovationCheckResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData IovationCheck(Ezbob.Backend.Models.IovationCheckModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/IovationCheck", ReplyAction="http://tempuri.org/IEzService/IovationCheckResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> IovationCheckAsync(Ezbob.Backend.Models.IovationCheckModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/IsBroker", ReplyAction="http://tempuri.org/IEzService/IsBrokerResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult IsBroker(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/IsBroker", ReplyAction="http://tempuri.org/IEzService/IsBrokerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> IsBrokerAsync(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LandRegistryEnquiry", ReplyAction="http://tempuri.org/IEzService/LandRegistryEnquiryResponse")]
        string LandRegistryEnquiry(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LandRegistryEnquiry", ReplyAction="http://tempuri.org/IEzService/LandRegistryEnquiryResponse")]
        System.Threading.Tasks.Task<string> LandRegistryEnquiryAsync(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LandRegistryRes", ReplyAction="http://tempuri.org/IEzService/LandRegistryResResponse")]
        string LandRegistryRes(int userId, int customerId, string titleNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LandRegistryRes", ReplyAction="http://tempuri.org/IEzService/LandRegistryResResponse")]
        System.Threading.Tasks.Task<string> LandRegistryResAsync(int userId, int customerId, string titleNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LateBy14Days", ReplyAction="http://tempuri.org/IEzService/LateBy14DaysResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LateBy14Days();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LateBy14Days", ReplyAction="http://tempuri.org/IEzService/LateBy14DaysResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LateBy14DaysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadCustomerByCreatePasswordToken", ReplyAction="http://tempuri.org/IEzService/LoadCustomerByCreatePasswordTokenResponse")]
        ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult LoadCustomerByCreatePasswordToken(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadCustomerByCreatePasswordToken", ReplyAction="http://tempuri.org/IEzService/LoadCustomerByCreatePasswordTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult> LoadCustomerByCreatePasswordTokenAsync(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadCustomerLeadFieldNames", ReplyAction="http://tempuri.org/IEzService/LoadCustomerLeadFieldNamesResponse")]
        ServiceClientProxy.EzServiceReference.StringStringMapActionResult LoadCustomerLeadFieldNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadCustomerLeadFieldNames", ReplyAction="http://tempuri.org/IEzService/LoadCustomerLeadFieldNamesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringStringMapActionResult> LoadCustomerLeadFieldNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatureFile", ReplyAction="http://tempuri.org/IEzService/LoadEsignatureFileResponse")]
        ServiceClientProxy.EzServiceReference.EsignatureFileActionResult LoadEsignatureFile(int userId, long nEsignatureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatureFile", ReplyAction="http://tempuri.org/IEzService/LoadEsignatureFileResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureFileActionResult> LoadEsignatureFileAsync(int userId, long nEsignatureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatures", ReplyAction="http://tempuri.org/IEzService/LoadEsignaturesResponse")]
        ServiceClientProxy.EzServiceReference.EsignatureListActionResult LoadEsignatures(int userId, System.Nullable<int> nCustomerID, bool bPollStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadEsignatures", ReplyAction="http://tempuri.org/IEzService/LoadEsignaturesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureListActionResult> LoadEsignaturesAsync(int userId, System.Nullable<int> nCustomerID, bool bPollStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumer", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerResponse")]
        ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult LoadExperianConsumer(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumer", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> LoadExperianConsumerAsync(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumerMortgageData", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerMortgageDataResponse")]
        ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult LoadExperianConsumerMortgageData(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianConsumerMortgageData", ReplyAction="http://tempuri.org/IEzService/LoadExperianConsumerMortgageDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult> LoadExperianConsumerMortgageDataAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianLtd", ReplyAction="http://tempuri.org/IEzService/LoadExperianLtdResponse")]
        ServiceClientProxy.EzServiceReference.ExperianLtdActionResult LoadExperianLtd(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadExperianLtd", ReplyAction="http://tempuri.org/IEzService/LoadExperianLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> LoadExperianLtdAsync(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadManualVatReturnPeriods", ReplyAction="http://tempuri.org/IEzService/LoadManualVatReturnPeriodsResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult LoadManualVatReturnPeriods(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadManualVatReturnPeriods", ReplyAction="http://tempuri.org/IEzService/LoadManualVatReturnPeriodsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult> LoadManualVatReturnPeriodsAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadVatReturnFullData", ReplyAction="http://tempuri.org/IEzService/LoadVatReturnFullDataResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnFullData(int nCustomerID, int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadVatReturnFullData", ReplyAction="http://tempuri.org/IEzService/LoadVatReturnFullDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnFullDataAsync(int nCustomerID, int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadVatReturnRawData", ReplyAction="http://tempuri.org/IEzService/LoadVatReturnRawDataResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnRawData(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadVatReturnRawData", ReplyAction="http://tempuri.org/IEzService/LoadVatReturnRawDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnRawDataAsync(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadVatReturnSummary", ReplyAction="http://tempuri.org/IEzService/LoadVatReturnSummaryResponse")]
        ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnSummary(int nCustomerID, int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoadVatReturnSummary", ReplyAction="http://tempuri.org/IEzService/LoadVatReturnSummaryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnSummaryAsync(int nCustomerID, int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanFullyPaid", ReplyAction="http://tempuri.org/IEzService/LoanFullyPaidResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData LoanFullyPaid(int customerId, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/LoanFullyPaid", ReplyAction="http://tempuri.org/IEzService/LoanFullyPaidResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LoanFullyPaidAsync(int customerId, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy1", ReplyAction="http://tempuri.org/IEzService/MainStrategy1Response")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategy1(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategy1", ReplyAction="http://tempuri.org/IEzService/MainStrategy1Response")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategy1Async(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategySync1", ReplyAction="http://tempuri.org/IEzService/MainStrategySync1Response")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategySync1(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MainStrategySync1", ReplyAction="http://tempuri.org/IEzService/MainStrategySync1Response")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategySync1Async(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MarketplaceInstantUpdate", ReplyAction="http://tempuri.org/IEzService/MarketplaceInstantUpdateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MarketplaceInstantUpdate(int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MarketplaceInstantUpdate", ReplyAction="http://tempuri.org/IEzService/MarketplaceInstantUpdateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarketplaceInstantUpdateAsync(int nMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MarkSessionEnded", ReplyAction="http://tempuri.org/IEzService/MarkSessionEndedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MarkSessionEnded(int nSessionID, string sComment, System.Nullable<int> nCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MarkSessionEnded", ReplyAction="http://tempuri.org/IEzService/MarkSessionEndedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarkSessionEndedAsync(int nSessionID, string sComment, System.Nullable<int> nCustomerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlAndBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlAndBwaInformationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlAndBwaInformation(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlAndBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlAndBwaInformationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlAndBwaInformationAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlInformationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlInformation(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreAmlInformation", ReplyAction="http://tempuri.org/IEzService/MoreAmlInformationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlInformationAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreBwaInformationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData MoreBwaInformation(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/MoreBwaInformation", ReplyAction="http://tempuri.org/IEzService/MoreBwaInformationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreBwaInformationAsync(int userId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/NotifySalesOnNewCustomer", ReplyAction="http://tempuri.org/IEzService/NotifySalesOnNewCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData NotifySalesOnNewCustomer(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/NotifySalesOnNewCustomer", ReplyAction="http://tempuri.org/IEzService/NotifySalesOnNewCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NotifySalesOnNewCustomerAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianConsumer", ReplyAction="http://tempuri.org/IEzService/ParseExperianConsumerResponse")]
        ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult ParseExperianConsumer(long nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianConsumer", ReplyAction="http://tempuri.org/IEzService/ParseExperianConsumerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> ParseExperianConsumerAsync(long nServiceLogId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianLtd", ReplyAction="http://tempuri.org/IEzService/ParseExperianLtdResponse")]
        ServiceClientProxy.EzServiceReference.ExperianLtdActionResult ParseExperianLtd(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ParseExperianLtd", ReplyAction="http://tempuri.org/IEzService/ParseExperianLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> ParseExperianLtdAsync(long nServiceLogID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordRestored", ReplyAction="http://tempuri.org/IEzService/PasswordRestoredResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PasswordRestored(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PasswordRestored", ReplyAction="http://tempuri.org/IEzService/PasswordRestoredResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PasswordRestoredAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayEarly", ReplyAction="http://tempuri.org/IEzService/PayEarlyResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayEarly(int customerId, decimal amount, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayEarly", ReplyAction="http://tempuri.org/IEzService/PayEarlyResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayEarlyAsync(int customerId, decimal amount, string loanRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedByUnderwriter", ReplyAction="http://tempuri.org/IEzService/PayPointAddedByUnderwriterResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedByUnderwriter(int customerId, string cardno, string underwriterName, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointAddedByUnderwriter", ReplyAction="http://tempuri.org/IEzService/PayPointAddedByUnderwriterResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedByUnderwriterAsync(int customerId, string cardno, string underwriterName, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointCharger", ReplyAction="http://tempuri.org/IEzService/PayPointChargerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointCharger();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointCharger", ReplyAction="http://tempuri.org/IEzService/PayPointChargerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointChargerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointNameValidationFailed", ReplyAction="http://tempuri.org/IEzService/PayPointNameValidationFailedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PayPointNameValidationFailed(int userId, int customerId, string cardHolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PayPointNameValidationFailed", ReplyAction="http://tempuri.org/IEzService/PayPointNameValidationFailedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointNameValidationFailedAsync(int userId, int customerId, string cardHolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PostcodeSaveLog", ReplyAction="http://tempuri.org/IEzService/PostcodeSaveLogResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData PostcodeSaveLog(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PostcodeSaveLog", ReplyAction="http://tempuri.org/IEzService/PostcodeSaveLogResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PostcodeSaveLogAsync(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PricingModelCalculate", ReplyAction="http://tempuri.org/IEzService/PricingModelCalculateResponse")]
        ServiceClientProxy.EzServiceReference.PricingModelModelActionResult PricingModelCalculate(int customerId, int underwriterId, ServiceClientProxy.EzServiceReference.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/PricingModelCalculate", ReplyAction="http://tempuri.org/IEzService/PricingModelCalculateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> PricingModelCalculateAsync(int customerId, int underwriterId, ServiceClientProxy.EzServiceReference.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOffer", ReplyAction="http://tempuri.org/IEzService/QuickOfferResponse")]
        ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOffer(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOffer", ReplyAction="http://tempuri.org/IEzService/QuickOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferAsync(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOfferWithPrerequisites", ReplyAction="http://tempuri.org/IEzService/QuickOfferWithPrerequisitesResponse")]
        ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOfferWithPrerequisites(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/QuickOfferWithPrerequisites", ReplyAction="http://tempuri.org/IEzService/QuickOfferWithPrerequisitesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferWithPrerequisitesAsync(int customerId, bool saveOfferToDB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RecordManualPacnetDeposit", ReplyAction="http://tempuri.org/IEzService/RecordManualPacnetDepositResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RecordManualPacnetDeposit(int underwriterId, string underwriterName, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RecordManualPacnetDeposit", ReplyAction="http://tempuri.org/IEzService/RecordManualPacnetDepositResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RecordManualPacnetDepositAsync(int underwriterId, string underwriterName, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RejectUser", ReplyAction="http://tempuri.org/IEzService/RejectUserResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RejectUser(int userId, int customerId, bool bSendToCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RejectUser", ReplyAction="http://tempuri.org/IEzService/RejectUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RejectUserAsync(int userId, int customerId, bool bSendToCustomer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RemoveManualVatReturnPeriod", ReplyAction="http://tempuri.org/IEzService/RemoveManualVatReturnPeriodResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RemoveManualVatReturnPeriod(System.Guid oPeriodID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RemoveManualVatReturnPeriod", ReplyAction="http://tempuri.org/IEzService/RemoveManualVatReturnPeriodResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RemoveManualVatReturnPeriodAsync(System.Guid oPeriodID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RenewEbayToken", ReplyAction="http://tempuri.org/IEzService/RenewEbayTokenResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RenewEbayToken(int userId, int customerId, string marketplaceName, string eBayAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RenewEbayToken", ReplyAction="http://tempuri.org/IEzService/RenewEbayTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RenewEbayTokenAsync(int userId, int customerId, string marketplaceName, string eBayAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequestCashWithoutTakenLoan", ReplyAction="http://tempuri.org/IEzService/RequestCashWithoutTakenLoanResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData RequestCashWithoutTakenLoan(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/RequestCashWithoutTakenLoan", ReplyAction="http://tempuri.org/IEzService/RequestCashWithoutTakenLoanResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequestCashWithoutTakenLoanAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ResetPassword123456", ReplyAction="http://tempuri.org/IEzService/ResetPassword123456Response")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ResetPassword123456(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ResetPassword123456", ReplyAction="http://tempuri.org/IEzService/ResetPassword123456Response")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ResetPassword123456Async(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddUpdateLeadAccount", ReplyAction="http://tempuri.org/IEzService/SalesForceAddUpdateLeadAccountResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateLeadAccount(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddUpdateLeadAccount", ReplyAction="http://tempuri.org/IEzService/SalesForceAddUpdateLeadAccountResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateLeadAccountAsync(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddUpdateContact", ReplyAction="http://tempuri.org/IEzService/SalesForceAddUpdateContactResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateContact(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddUpdateContact", ReplyAction="http://tempuri.org/IEzService/SalesForceAddUpdateContactResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateContactAsync(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddTask", ReplyAction="http://tempuri.org/IEzService/SalesForceAddTaskResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddTask(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddTask", ReplyAction="http://tempuri.org/IEzService/SalesForceAddTaskResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddTaskAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddActivity", ReplyAction="http://tempuri.org/IEzService/SalesForceAddActivityResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddActivity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddActivity", ReplyAction="http://tempuri.org/IEzService/SalesForceAddActivityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddActivityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddOpportunity", ReplyAction="http://tempuri.org/IEzService/SalesForceAddOpportunityResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceAddOpportunity", ReplyAction="http://tempuri.org/IEzService/SalesForceAddOpportunityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceUpdateOpportunity", ReplyAction="http://tempuri.org/IEzService/SalesForceUpdateOpportunityResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceUpdateOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SalesForceUpdateOpportunity", ReplyAction="http://tempuri.org/IEzService/SalesForceUpdateOpportunityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceUpdateOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveAgreement", ReplyAction="http://tempuri.org/IEzService/SaveAgreementResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SaveAgreement(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveAgreement", ReplyAction="http://tempuri.org/IEzService/SaveAgreementResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveAgreementAsync(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveConfigTable", ReplyAction="http://tempuri.org/IEzService/SaveConfigTableResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult SaveConfigTable(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveConfigTable", ReplyAction="http://tempuri.org/IEzService/SaveConfigTableResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SaveConfigTableAsync(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SavePricingModelSettings", ReplyAction="http://tempuri.org/IEzService/SavePricingModelSettingsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SavePricingModelSettings(int underwriterId, string scenarioName, ServiceClientProxy.EzServiceReference.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SavePricingModelSettings", ReplyAction="http://tempuri.org/IEzService/SavePricingModelSettingsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SavePricingModelSettingsAsync(int underwriterId, string scenarioName, ServiceClientProxy.EzServiceReference.PricingModelModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveSourceRefHistory", ReplyAction="http://tempuri.org/IEzService/SaveSourceRefHistoryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SaveSourceRefHistory(int nUserID, string sSourceRefList, string sVisitTimeList, Ezbob.Backend.ModelsWithDB.CampaignSourceRef campaignSourceRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveSourceRefHistory", ReplyAction="http://tempuri.org/IEzService/SaveSourceRefHistoryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveSourceRefHistoryAsync(int nUserID, string sSourceRefList, string sVisitTimeList, Ezbob.Backend.ModelsWithDB.CampaignSourceRef campaignSourceRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveVatReturnData", ReplyAction="http://tempuri.org/IEzService/SaveVatReturnDataResponse")]
        ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult SaveVatReturnData(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SaveVatReturnData", ReplyAction="http://tempuri.org/IEzService/SaveVatReturnDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult> SaveVatReturnDataAsync(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendPendingMails", ReplyAction="http://tempuri.org/IEzService/SendPendingMailsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SendPendingMails(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendPendingMails", ReplyAction="http://tempuri.org/IEzService/SendPendingMailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SendPendingMailsAsync(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendEverlineRefinanceMails", ReplyAction="http://tempuri.org/IEzService/SendEverlineRefinanceMailsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SendEverlineRefinanceMails(int customerId, string customerName, System.DateTime now, decimal loanAmount, decimal transferedAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendEverlineRefinanceMails", ReplyAction="http://tempuri.org/IEzService/SendEverlineRefinanceMailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SendEverlineRefinanceMailsAsync(int customerId, string customerName, System.DateTime now, decimal loanAmount, decimal transferedAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendSms", ReplyAction="http://tempuri.org/IEzService/SendSmsResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult SendSms(int userId, int underwriterId, string phone, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SendSms", ReplyAction="http://tempuri.org/IEzService/SendSmsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SendSmsAsync(int userId, int underwriterId, string phone, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenueResponse")]
        ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult SetCustomerManualAnnualizedRevenue(int nCustomerID, decimal nRevenue, string sComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenue", ReplyAction="http://tempuri.org/IEzService/SetCustomerManualAnnualizedRevenueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> SetCustomerManualAnnualizedRevenueAsync(int nCustomerID, decimal nRevenue, string sComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetCustomerPasswordByToken", ReplyAction="http://tempuri.org/IEzService/SetCustomerPasswordByTokenResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult SetCustomerPasswordByToken(string sEmail, Ezbob.Backend.Models.Password oPassword, System.Guid oToken, bool bIsBrokerLead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetCustomerPasswordByToken", ReplyAction="http://tempuri.org/IEzService/SetCustomerPasswordByTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> SetCustomerPasswordByTokenAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, System.Guid oToken, bool bIsBrokerLead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetLateLoanStatus", ReplyAction="http://tempuri.org/IEzService/SetLateLoanStatusResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData SetLateLoanStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/SetLateLoanStatus", ReplyAction="http://tempuri.org/IEzService/SetLateLoanStatusResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SetLateLoanStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Temp_BackFillMedals", ReplyAction="http://tempuri.org/IEzService/Temp_BackFillMedalsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Temp_BackFillMedals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Temp_BackFillMedals", ReplyAction="http://tempuri.org/IEzService/Temp_BackFillMedalsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> Temp_BackFillMedalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TransferCashFailed", ReplyAction="http://tempuri.org/IEzService/TransferCashFailedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData TransferCashFailed(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/TransferCashFailed", ReplyAction="http://tempuri.org/IEzService/TransferCashFailedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TransferCashFailedAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UnderwriterSignup", ReplyAction="http://tempuri.org/IEzService/UnderwriterSignupResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UnderwriterSignup(string name, Ezbob.Backend.Models.Password password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UnderwriterSignup", ReplyAction="http://tempuri.org/IEzService/UnderwriterSignupResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UnderwriterSignupAsync(string name, Ezbob.Backend.Models.Password password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateConfigurationVariables", ReplyAction="http://tempuri.org/IEzService/UpdateConfigurationVariablesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateConfigurationVariables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateConfigurationVariables", ReplyAction="http://tempuri.org/IEzService/UpdateConfigurationVariablesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateConfigurationVariablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateCurrencyRates", ReplyAction="http://tempuri.org/IEzService/UpdateCurrencyRatesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateCurrencyRates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateCurrencyRates", ReplyAction="http://tempuri.org/IEzService/UpdateCurrencyRatesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateCurrencyRatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateCustomerAnalyticsOnCompanyChange", ReplyAction="http://tempuri.org/IEzService/UpdateCustomerAnalyticsOnCompanyChangeResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateCustomerAnalyticsOnCompanyChange(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateCustomerAnalyticsOnCompanyChange", ReplyAction="http://tempuri.org/IEzService/UpdateCustomerAnalyticsOnCompanyChangeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateCustomerAnalyticsOnCompanyChangeAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateExperianDirectorDetails", ReplyAction="http://tempuri.org/IEzService/UpdateExperianDirectorDetailsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateExperianDirectorDetails(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateExperianDirectorDetails", ReplyAction="http://tempuri.org/IEzService/UpdateExperianDirectorDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateExperianDirectorDetailsAsync(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateGoogleAnalytics", ReplyAction="http://tempuri.org/IEzService/UpdateGoogleAnalyticsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData UpdateGoogleAnalytics(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/UpdateGoogleAnalytics", ReplyAction="http://tempuri.org/IEzService/UpdateGoogleAnalyticsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateGoogleAnalyticsAsync(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/AddCciHistory", ReplyAction="http://tempuri.org/IEzService/AddCciHistoryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData AddCciHistory(int nCustomerID, int nUnderwriterID, bool bCciMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/AddCciHistory", ReplyAction="http://tempuri.org/IEzService/AddCciHistoryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddCciHistoryAsync(int nCustomerID, int nUnderwriterID, bool bCciMark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/AndRecalculateVatReturnSummaryForAll", ReplyAction="http://tempuri.org/IEzService/AndRecalculateVatReturnSummaryForAllResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData AndRecalculateVatReturnSummaryForAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/AndRecalculateVatReturnSummaryForAll", ReplyAction="http://tempuri.org/IEzService/AndRecalculateVatReturnSummaryForAllResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AndRecalculateVatReturnSummaryForAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ApprovedUser", ReplyAction="http://tempuri.org/IEzService/ApprovedUserResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ApprovedUser(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ApprovedUser", ReplyAction="http://tempuri.org/IEzService/ApprovedUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ApprovedUserAsync(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillAml", ReplyAction="http://tempuri.org/IEzService/BackfillAmlResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillAml();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillAml", ReplyAction="http://tempuri.org/IEzService/BackfillAmlResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillAmlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillCustomerAnalyticsCompany", ReplyAction="http://tempuri.org/IEzService/BackfillCustomerAnalyticsCompanyResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillCustomerAnalyticsCompany();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillCustomerAnalyticsCompany", ReplyAction="http://tempuri.org/IEzService/BackfillCustomerAnalyticsCompanyResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillCustomerAnalyticsCompanyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianConsumer", ReplyAction="http://tempuri.org/IEzService/BackfillExperianConsumerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianConsumer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianConsumer", ReplyAction="http://tempuri.org/IEzService/BackfillExperianConsumerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianConsumerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianDirectors", ReplyAction="http://tempuri.org/IEzService/BackfillExperianDirectorsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianDirectors(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianDirectors", ReplyAction="http://tempuri.org/IEzService/BackfillExperianDirectorsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianDirectorsAsync(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianLtd", ReplyAction="http://tempuri.org/IEzService/BackfillExperianLtdResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianLtd();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillExperianLtd", ReplyAction="http://tempuri.org/IEzService/BackfillExperianLtdResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianLtdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevance", ReplyAction="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevanceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillHmrcBusinessRelevance();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevance", ReplyAction="http://tempuri.org/IEzService/BackfillHmrcBusinessRelevanceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillHmrcBusinessRelevanceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillLandRegistry2PropertyLink", ReplyAction="http://tempuri.org/IEzService/BackfillLandRegistry2PropertyLinkResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLandRegistry2PropertyLink();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillLandRegistry2PropertyLink", ReplyAction="http://tempuri.org/IEzService/BackfillLandRegistry2PropertyLinkResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLandRegistry2PropertyLinkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillNonLimitedCompanies", ReplyAction="http://tempuri.org/IEzService/BackfillNonLimitedCompaniesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillNonLimitedCompanies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillNonLimitedCompanies", ReplyAction="http://tempuri.org/IEzService/BackfillNonLimitedCompaniesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillNonLimitedCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillTurnover", ReplyAction="http://tempuri.org/IEzService/BackfillTurnoverResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillTurnover();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillTurnover", ReplyAction="http://tempuri.org/IEzService/BackfillTurnoverResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillTurnoverAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillZooplaValue", ReplyAction="http://tempuri.org/IEzService/BackfillZooplaValueResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BackfillZooplaValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BackfillZooplaValue", ReplyAction="http://tempuri.org/IEzService/BackfillZooplaValueResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillZooplaValueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAcceptTerms", ReplyAction="http://tempuri.org/IEzService/BrokerAcceptTermsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAcceptTerms(int nTermsID, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAcceptTerms", ReplyAction="http://tempuri.org/IEzService/BrokerAcceptTermsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAcceptTermsAsync(int nTermsID, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAddCustomerLead", ReplyAction="http://tempuri.org/IEzService/BrokerAddCustomerLeadResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddCustomerLead(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAddCustomerLead", ReplyAction="http://tempuri.org/IEzService/BrokerAddCustomerLeadResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddCustomerLeadAsync(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAddBank", ReplyAction="http://tempuri.org/IEzService/BrokerAddBankResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddBank(Ezbob.Backend.Models.BrokerAddBankModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAddBank", ReplyAction="http://tempuri.org/IEzService/BrokerAddBankResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddBankAsync(Ezbob.Backend.Models.BrokerAddBankModel model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerApproveAndResetCustomerPassword", ReplyAction="http://tempuri.org/IEzService/BrokerApproveAndResetCustomerPasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerApproveAndResetCustomerPassword(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerApproveAndResetCustomerPassword", ReplyAction="http://tempuri.org/IEzService/BrokerApproveAndResetCustomerPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerApproveAndResetCustomerPasswordAsync(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAttachCustomer", ReplyAction="http://tempuri.org/IEzService/BrokerAttachCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAttachCustomer(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerAttachCustomer", ReplyAction="http://tempuri.org/IEzService/BrokerAttachCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAttachCustomerAsync(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerBackFromCustomerWizard", ReplyAction="http://tempuri.org/IEzService/BrokerBackFromCustomerWizardResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult BrokerBackFromCustomerWizard(int nLeadID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerBackFromCustomerWizard", ReplyAction="http://tempuri.org/IEzService/BrokerBackFromCustomerWizardResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerBackFromCustomerWizardAsync(int nLeadID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerCheckCustomerRelevance", ReplyAction="http://tempuri.org/IEzService/BrokerCheckCustomerRelevanceResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCheckCustomerRelevance(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerCheckCustomerRelevance", ReplyAction="http://tempuri.org/IEzService/BrokerCheckCustomerRelevanceResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCheckCustomerRelevanceAsync(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerCustomerWizardComplete", ReplyAction="http://tempuri.org/IEzService/BrokerCustomerWizardCompleteResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCustomerWizardComplete(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerCustomerWizardComplete", ReplyAction="http://tempuri.org/IEzService/BrokerCustomerWizardCompleteResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCustomerWizardCompleteAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerDeleteCustomerFiles", ReplyAction="http://tempuri.org/IEzService/BrokerDeleteCustomerFilesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerDeleteCustomerFiles(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerDeleteCustomerFiles", ReplyAction="http://tempuri.org/IEzService/BrokerDeleteCustomerFilesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerDeleteCustomerFilesAsync(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerDownloadCustomerFile", ReplyAction="http://tempuri.org/IEzService/BrokerDownloadCustomerFileResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult BrokerDownloadCustomerFile(string sCustomerRefNum, string sContactEmail, int nFileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerDownloadCustomerFile", ReplyAction="http://tempuri.org/IEzService/BrokerDownloadCustomerFileResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult> BrokerDownloadCustomerFileAsync(string sCustomerRefNum, string sContactEmail, int nFileID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerForceResetCustomerPassword", ReplyAction="http://tempuri.org/IEzService/BrokerForceResetCustomerPasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerForceResetCustomerPassword(int nUserID, int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerForceResetCustomerPassword", ReplyAction="http://tempuri.org/IEzService/BrokerForceResetCustomerPasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerForceResetCustomerPasswordAsync(int nUserID, int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerInstantOffer", ReplyAction="http://tempuri.org/IEzService/BrokerInstantOfferResponse")]
        ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult BrokerInstantOffer(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerInstantOffer", ReplyAction="http://tempuri.org/IEzService/BrokerInstantOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult> BrokerInstantOfferAsync(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadAcquireCustomer", ReplyAction="http://tempuri.org/IEzService/BrokerLeadAcquireCustomerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadAcquireCustomer(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadAcquireCustomer", ReplyAction="http://tempuri.org/IEzService/BrokerLeadAcquireCustomerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadAcquireCustomerAsync(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadCanFillWizard", ReplyAction="http://tempuri.org/IEzService/BrokerLeadCanFillWizardResponse")]
        ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCanFillWizard(int nLeadID, string sLeadEmail, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadCanFillWizard", ReplyAction="http://tempuri.org/IEzService/BrokerLeadCanFillWizardResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCanFillWizardAsync(int nLeadID, string sLeadEmail, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadCheckToken", ReplyAction="http://tempuri.org/IEzService/BrokerLeadCheckTokenResponse")]
        ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCheckToken(string sToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadCheckToken", ReplyAction="http://tempuri.org/IEzService/BrokerLeadCheckTokenResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCheckTokenAsync(string sToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadSendInvitation", ReplyAction="http://tempuri.org/IEzService/BrokerLeadSendInvitationResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadSendInvitation(int nLeadID, string sBrokerContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLeadSendInvitation", ReplyAction="http://tempuri.org/IEzService/BrokerLeadSendInvitationResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadSendInvitationAsync(int nLeadID, string sBrokerContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomerDetails", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomerDetailsResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult BrokerLoadCustomerDetails(string sCustomerRefNum, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomerDetails", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomerDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult> BrokerLoadCustomerDetailsAsync(string sCustomerRefNum, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadLeadDetails", ReplyAction="http://tempuri.org/IEzService/BrokerLoadLeadDetailsResponse")]
        ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult BrokerLoadLeadDetails(int leadID, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadLeadDetails", ReplyAction="http://tempuri.org/IEzService/BrokerLoadLeadDetailsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult> BrokerLoadLeadDetailsAsync(int leadID, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomerFiles", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomerFilesResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult BrokerLoadCustomerFiles(string sCustomerRefNum, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomerFiles", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomerFilesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult> BrokerLoadCustomerFilesAsync(string sCustomerRefNum, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomerList", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomerListResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomerList(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomerList", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomerListResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomerListAsync(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomersByID", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomersByIDResponse")]
        ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomersByID(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadCustomersByID", ReplyAction="http://tempuri.org/IEzService/BrokerLoadCustomersByIDResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomersByIDAsync(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadOwnProperties", ReplyAction="http://tempuri.org/IEzService/BrokerLoadOwnPropertiesResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadOwnProperties(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadOwnProperties", ReplyAction="http://tempuri.org/IEzService/BrokerLoadOwnPropertiesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadOwnPropertiesAsync(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadPropertiesByID", ReplyAction="http://tempuri.org/IEzService/BrokerLoadPropertiesByIDResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadPropertiesByID(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadPropertiesByID", ReplyAction="http://tempuri.org/IEzService/BrokerLoadPropertiesByIDResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadPropertiesByIDAsync(int nBrokerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadSignedTerms", ReplyAction="http://tempuri.org/IEzService/BrokerLoadSignedTermsResponse")]
        ServiceClientProxy.EzServiceReference.StringListActionResult BrokerLoadSignedTerms(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadSignedTerms", ReplyAction="http://tempuri.org/IEzService/BrokerLoadSignedTermsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> BrokerLoadSignedTermsAsync(string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadStaticData", ReplyAction="http://tempuri.org/IEzService/BrokerLoadStaticDataResponse")]
        ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult BrokerLoadStaticData(bool bLoadFilesOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLoadStaticData", ReplyAction="http://tempuri.org/IEzService/BrokerLoadStaticDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult> BrokerLoadStaticDataAsync(bool bLoadFilesOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLogin", ReplyAction="http://tempuri.org/IEzService/BrokerLoginResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLogin(string sEmail, Ezbob.Backend.Models.Password oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerLogin", ReplyAction="http://tempuri.org/IEzService/BrokerLoginResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoginAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerRestorePassword", ReplyAction="http://tempuri.org/IEzService/BrokerRestorePasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerRestorePassword(string sMobile, string sCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerRestorePassword", ReplyAction="http://tempuri.org/IEzService/BrokerRestorePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerRestorePasswordAsync(string sMobile, string sCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerSaveCrmEntry", ReplyAction="http://tempuri.org/IEzService/BrokerSaveCrmEntryResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult BrokerSaveCrmEntry(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerSaveCrmEntry", ReplyAction="http://tempuri.org/IEzService/BrokerSaveCrmEntryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerSaveCrmEntryAsync(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerSaveUploadedCustomerFile", ReplyAction="http://tempuri.org/IEzService/BrokerSaveUploadedCustomerFileResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerSaveUploadedCustomerFile(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerSaveUploadedCustomerFile", ReplyAction="http://tempuri.org/IEzService/BrokerSaveUploadedCustomerFileResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerSaveUploadedCustomerFileAsync(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerSignup", ReplyAction="http://tempuri.org/IEzService/BrokerSignupResponse")]
        ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerSignup(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    decimal nEstimatedMonthlyClientAmount, 
                    Ezbob.Backend.Models.Password oPassword, 
                    string sFirmWebSiteUrl, 
                    int nEstimatedMonthlyApplicationCount, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerSignup", ReplyAction="http://tempuri.org/IEzService/BrokerSignupResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerSignupAsync(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    decimal nEstimatedMonthlyClientAmount, 
                    Ezbob.Backend.Models.Password oPassword, 
                    string sFirmWebSiteUrl, 
                    int nEstimatedMonthlyApplicationCount, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerTransferCommission", ReplyAction="http://tempuri.org/IEzService/BrokerTransferCommissionResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerTransferCommission();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerTransferCommission", ReplyAction="http://tempuri.org/IEzService/BrokerTransferCommissionResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerTransferCommissionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerUpdatePassword", ReplyAction="http://tempuri.org/IEzService/BrokerUpdatePasswordResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData BrokerUpdatePassword(string sContactEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/BrokerUpdatePassword", ReplyAction="http://tempuri.org/IEzService/BrokerUpdatePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerUpdatePasswordAsync(string sContactEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisGenerate", ReplyAction="http://tempuri.org/IEzService/CaisGenerateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CaisGenerate(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisGenerate", ReplyAction="http://tempuri.org/IEzService/CaisGenerateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisGenerateAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisUpdate", ReplyAction="http://tempuri.org/IEzService/CaisUpdateResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CaisUpdate(int userId, int caisId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CaisUpdate", ReplyAction="http://tempuri.org/IEzService/CaisUpdateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisUpdateAsync(int userId, int caisId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateMedal", ReplyAction="http://tempuri.org/IEzService/CalculateMedalResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CalculateMedal(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateMedal", ReplyAction="http://tempuri.org/IEzService/CalculateMedalResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateMedalAsync(int underwriterId, int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateModelsAndAffordability", ReplyAction="http://tempuri.org/IEzService/CalculateModelsAndAffordabilityResponse")]
        ServiceClientProxy.EzServiceReference.MarketplacesActionResult CalculateModelsAndAffordability(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateModelsAndAffordability", ReplyAction="http://tempuri.org/IEzService/CalculateModelsAndAffordabilityResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MarketplacesActionResult> CalculateModelsAndAffordabilityAsync(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateOffer", ReplyAction="http://tempuri.org/IEzService/CalculateOfferResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CalculateOffer(int underwriterId, int customerId, int amount, bool hasLoans, ServiceClientProxy.EzServiceReference.Medal medalClassification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateOffer", ReplyAction="http://tempuri.org/IEzService/CalculateOfferResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateOfferAsync(int underwriterId, int customerId, int amount, bool hasLoans, ServiceClientProxy.EzServiceReference.Medal medalClassification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateVatReturnSummary", ReplyAction="http://tempuri.org/IEzService/CalculateVatReturnSummaryResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CalculateVatReturnSummary(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CalculateVatReturnSummary", ReplyAction="http://tempuri.org/IEzService/CalculateVatReturnSummaryResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateVatReturnSummaryAsync(int nCustomerMarketplaceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CashTransferred", ReplyAction="http://tempuri.org/IEzService/CashTransferredResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CashTransferred(int customerId, decimal amount, string loanRefNum, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CashTransferred", ReplyAction="http://tempuri.org/IEzService/CashTransferredResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CashTransferredAsync(int customerId, decimal amount, string loanRefNum, bool isFirst);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ChangeBrokerEmail", ReplyAction="http://tempuri.org/IEzService/ChangeBrokerEmailResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ChangeBrokerEmail(string oldEmail, string newEmail, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ChangeBrokerEmail", ReplyAction="http://tempuri.org/IEzService/ChangeBrokerEmailResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ChangeBrokerEmailAsync(string oldEmail, string newEmail, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAml", ReplyAction="http://tempuri.org/IEzService/CheckAmlResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckAml(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAml", ReplyAction="http://tempuri.org/IEzService/CheckAmlResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlAsync(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAmlCustom", ReplyAction="http://tempuri.org/IEzService/CheckAmlCustomResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckAmlCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckAmlCustom", ReplyAction="http://tempuri.org/IEzService/CheckAmlCustomResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwa", ReplyAction="http://tempuri.org/IEzService/CheckBwaResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwa(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwa", ReplyAction="http://tempuri.org/IEzService/CheckBwaResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaAsync(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwaCustom", ReplyAction="http://tempuri.org/IEzService/CheckBwaCustomResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwaCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckBwaCustom", ReplyAction="http://tempuri.org/IEzService/CheckBwaCustomResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckLtdCompanyCache", ReplyAction="http://tempuri.org/IEzService/CheckLtdCompanyCacheResponse")]
        ServiceClientProxy.EzServiceReference.ExperianLtdActionResult CheckLtdCompanyCache(int userId, string sCompanyRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CheckLtdCompanyCache", ReplyAction="http://tempuri.org/IEzService/CheckLtdCompanyCacheResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> CheckLtdCompanyCacheAsync(int userId, string sCompanyRefNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CompanyFilesUpload", ReplyAction="http://tempuri.org/IEzService/CompanyFilesUploadResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData CompanyFilesUpload(int customerId, string fileName, byte[] fileContent, string fileContentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CompanyFilesUpload", ReplyAction="http://tempuri.org/IEzService/CompanyFilesUploadResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CompanyFilesUploadAsync(int customerId, string fileName, byte[] fileContent, string fileContentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CrmLoadLookups", ReplyAction="http://tempuri.org/IEzService/CrmLoadLookupsResponse")]
        ServiceClientProxy.EzServiceReference.CrmLookupsActionResult CrmLoadLookups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CrmLoadLookups", ReplyAction="http://tempuri.org/IEzService/CrmLoadLookupsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CrmLookupsActionResult> CrmLoadLookupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerChangePassword", ReplyAction="http://tempuri.org/IEzService/CustomerChangePasswordResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult CustomerChangePassword(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerChangePassword", ReplyAction="http://tempuri.org/IEzService/CustomerChangePasswordResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> CustomerChangePasswordAsync(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerSignup", ReplyAction="http://tempuri.org/IEzService/CustomerSignupResponse")]
        ServiceClientProxy.EzServiceReference.UserLoginActionResult CustomerSignup(string sEmail, Ezbob.Backend.Models.Password oPassword, int nPasswordQuestion, string sPasswordAnswer, string sRemoteIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/CustomerSignup", ReplyAction="http://tempuri.org/IEzService/CustomerSignupResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> CustomerSignupAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, int nPasswordQuestion, string sPasswordAnswer, string sRemoteIp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DeleteExperianDirector", ReplyAction="http://tempuri.org/IEzService/DeleteExperianDirectorResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DeleteExperianDirector(int nDirectorID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DeleteExperianDirector", ReplyAction="http://tempuri.org/IEzService/DeleteExperianDirectorResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DeleteExperianDirectorAsync(int nDirectorID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisableCurrentManualPacnetDeposits", ReplyAction="http://tempuri.org/IEzService/DisableCurrentManualPacnetDepositsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DisableCurrentManualPacnetDeposits(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisableCurrentManualPacnetDeposits", ReplyAction="http://tempuri.org/IEzService/DisableCurrentManualPacnetDepositsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisableCurrentManualPacnetDepositsAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisplayMarketplaceSecurityData", ReplyAction="http://tempuri.org/IEzService/DisplayMarketplaceSecurityDataResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData DisplayMarketplaceSecurityData(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/DisplayMarketplaceSecurityData", ReplyAction="http://tempuri.org/IEzService/DisplayMarketplaceSecurityDataResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisplayMarketplaceSecurityDataAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationCheckOne", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationCheckOneResponse")]
        ServiceClientProxy.EzServiceReference.IntActionResult EmailConfirmationCheckOne(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationCheckOne", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationCheckOneResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> EmailConfirmationCheckOneAsync(System.Guid oToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationConfirmUser", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationConfirmUserResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationConfirmUser(int nUserID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationConfirmUser", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationConfirmUserResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationConfirmUserAsync(int nUserID, int nUnderwriterID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationGenerate", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationGenerateResponse")]
        ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult EmailConfirmationGenerate(int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationGenerate", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationGenerateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult> EmailConfirmationGenerateAsync(int nUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationGenerateAndSend", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationGenerateAndSendResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationGenerateAndSend(int nUserID, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailConfirmationGenerateAndSend", ReplyAction="http://tempuri.org/IEzService/EmailConfirmationGenerateAndSendResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationGenerateAndSendAsync(int nUserID, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailHmrcParsingErrors", ReplyAction="http://tempuri.org/IEzService/EmailHmrcParsingErrorsResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailHmrcParsingErrors(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailHmrcParsingErrors", ReplyAction="http://tempuri.org/IEzService/EmailHmrcParsingErrorsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailHmrcParsingErrorsAsync(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailRolloverAdded", ReplyAction="http://tempuri.org/IEzService/EmailRolloverAddedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailRolloverAdded(int userId, int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailRolloverAdded", ReplyAction="http://tempuri.org/IEzService/EmailRolloverAddedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailRolloverAddedAsync(int userId, int customerId, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailUnderReview", ReplyAction="http://tempuri.org/IEzService/EmailUnderReviewResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EmailUnderReview(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EmailUnderReview", ReplyAction="http://tempuri.org/IEzService/EmailUnderReviewResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailUnderReviewAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplaces", ReplyAction="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplacesResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EncryptChannelGrabberMarketplaces();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplaces", ReplyAction="http://tempuri.org/IEzService/EncryptChannelGrabberMarketplacesResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EncryptChannelGrabberMarketplacesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Escalated", ReplyAction="http://tempuri.org/IEzService/EscalatedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData Escalated(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/Escalated", ReplyAction="http://tempuri.org/IEzService/EscalatedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EscalatedAsync(int customerId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignProcessPending", ReplyAction="http://tempuri.org/IEzService/EsignProcessPendingResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData EsignProcessPending(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignProcessPending", ReplyAction="http://tempuri.org/IEzService/EsignProcessPendingResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EsignProcessPendingAsync(System.Nullable<int> nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignSend", ReplyAction="http://tempuri.org/IEzService/EsignSendResponse")]
        ServiceClientProxy.EzServiceReference.StringActionResult EsignSend(int userId, EchoSignLib.EchoSignEnvelope[] oPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/EsignSend", ReplyAction="http://tempuri.org/IEzService/EsignSendResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> EsignSendAsync(int userId, EchoSignLib.EchoSignEnvelope[] oPackage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianCompanyCheck", ReplyAction="http://tempuri.org/IEzService/ExperianCompanyCheckResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ExperianCompanyCheck(int userId, int customerId, bool forceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianCompanyCheck", ReplyAction="http://tempuri.org/IEzService/ExperianCompanyCheckResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianCompanyCheckAsync(int userId, int customerId, bool forceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianConsumerCheck", ReplyAction="http://tempuri.org/IEzService/ExperianConsumerCheckResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData ExperianConsumerCheck(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/ExperianConsumerCheck", ReplyAction="http://tempuri.org/IEzService/ExperianConsumerCheckResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianConsumerCheckAsync(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FindAccountsToUpdate", ReplyAction="http://tempuri.org/IEzService/FindAccountsToUpdateResponse")]
        ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult FindAccountsToUpdate(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FindAccountsToUpdate", ReplyAction="http://tempuri.org/IEzService/FindAccountsToUpdateResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult> FindAccountsToUpdateAsync(int nCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FinishWizard", ReplyAction="http://tempuri.org/IEzService/FinishWizardResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData FinishWizard(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FinishWizard", ReplyAction="http://tempuri.org/IEzService/FinishWizardResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FinishWizardAsync(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FirstOfMonthStatusNotifier", ReplyAction="http://tempuri.org/IEzService/FirstOfMonthStatusNotifierResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData FirstOfMonthStatusNotifier();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FirstOfMonthStatusNotifier", ReplyAction="http://tempuri.org/IEzService/FirstOfMonthStatusNotifierResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FirstOfMonthStatusNotifierAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FraudChecker", ReplyAction="http://tempuri.org/IEzService/FraudCheckerResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData FraudChecker(int customerId, Ezbob.Backend.Models.FraudMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/FraudChecker", ReplyAction="http://tempuri.org/IEzService/FraudCheckerResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FraudCheckerAsync(int customerId, Ezbob.Backend.Models.FraudMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GenerateMobileCode", ReplyAction="http://tempuri.org/IEzService/GenerateMobileCodeResponse")]
        ServiceClientProxy.EzServiceReference.BoolActionResult GenerateMobileCode(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GenerateMobileCode", ReplyAction="http://tempuri.org/IEzService/GenerateMobileCodeResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> GenerateMobileCodeAsync(string phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetAvailableFunds", ReplyAction="http://tempuri.org/IEzService/GetAvailableFundsResponse")]
        ServiceClientProxy.EzServiceReference.AvailableFundsActionResult GetAvailableFunds(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetAvailableFunds", ReplyAction="http://tempuri.org/IEzService/GetAvailableFundsResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AvailableFundsActionResult> GetAvailableFundsAsync(int underwriterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCashFailed", ReplyAction="http://tempuri.org/IEzService/GetCashFailedResponse")]
        ServiceClientProxy.EzServiceReference.ActionMetaData GetCashFailed(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEzService/GetCashFailed", ReplyAction="http://tempuri.org/IEzService/GetCashFailedResponse")]
        System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetCashFailedAsync(int customerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEzServiceChannel : ServiceClientProxy.EzServiceReference.IEzService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EzServiceClient : System.ServiceModel.ClientBase<ServiceClientProxy.EzServiceReference.IEzService>, ServiceClientProxy.EzServiceReference.IEzService {
        
        public EzServiceClient() {
        }
        
        public EzServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EzServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EzServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword, string sHash) {
            return base.Channel.UpdateLinkedHmrcPassword(sCustomerID, sDisplayName, sPassword, sHash);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword, string sHash) {
            return base.Channel.UpdateLinkedHmrcPasswordAsync(sCustomerID, sDisplayName, sPassword, sHash);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateMarketplace(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId) {
            return base.Channel.UpdateMarketplace(customerId, marketplaceId, doUpdateWizardStep, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateMarketplaceAsync(int customerId, int marketplaceId, bool doUpdateWizardStep, int userId) {
            return base.Channel.UpdateMarketplaceAsync(customerId, marketplaceId, doUpdateWizardStep, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateTransactionStatus() {
            return base.Channel.UpdateTransactionStatus();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateTransactionStatusAsync() {
            return base.Channel.UpdateTransactionStatusAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserChangeEmail(int underwriterId, int nUserID, string sNewEmail) {
            return base.Channel.UserChangeEmail(underwriterId, nUserID, sNewEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserChangeEmailAsync(int underwriterId, int nUserID, string sNewEmail) {
            return base.Channel.UserChangeEmailAsync(underwriterId, nUserID, sNewEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserChangePassword(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword, bool bForceChangePassword) {
            return base.Channel.UserChangePassword(sEmail, oOldPassword, oNewPassword, bForceChangePassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserChangePasswordAsync(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword, bool bForceChangePassword) {
            return base.Channel.UserChangePasswordAsync(sEmail, oOldPassword, oNewPassword, bForceChangePassword);
        }
        
        public ServiceClientProxy.EzServiceReference.UserLoginActionResult UserLogin(string sEmail, Ezbob.Backend.Models.Password sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime) {
            return base.Channel.UserLogin(sEmail, sPassword, sRemoteIp, promotionName, promotionPageVisitTime);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> UserLoginAsync(string sEmail, Ezbob.Backend.Models.Password sPassword, string sRemoteIp, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime) {
            return base.Channel.UserLoginAsync(sEmail, sPassword, sRemoteIp, promotionName, promotionPageVisitTime);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserDisable(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail) {
            return base.Channel.UserDisable(userID, customerID, email, unsubscribeFromMailChimp, changeEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserDisableAsync(int userID, int customerID, string email, bool unsubscribeFromMailChimp, bool changeEmail) {
            return base.Channel.UserDisableAsync(userID, customerID, email, unsubscribeFromMailChimp, changeEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserResetPassword(string sEmail) {
            return base.Channel.UserResetPassword(sEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserResetPasswordAsync(string sEmail) {
            return base.Channel.UserResetPasswordAsync(sEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult UserUpdateSecurityQuestion(string sEmail, Ezbob.Backend.Models.Password oPassword, int nQuestionID, string sAnswer) {
            return base.Channel.UserUpdateSecurityQuestion(sEmail, oPassword, nQuestionID, sAnswer);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> UserUpdateSecurityQuestionAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, int nQuestionID, string sAnswer) {
            return base.Channel.UserUpdateSecurityQuestionAsync(sEmail, oPassword, nQuestionID, sAnswer);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult ValidateAndUpdateLinkedHmrcPassword(string sCustomerID, string sDisplayName, string sPassword, string sHash) {
            return base.Channel.ValidateAndUpdateLinkedHmrcPassword(sCustomerID, sDisplayName, sPassword, sHash);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> ValidateAndUpdateLinkedHmrcPasswordAsync(string sCustomerID, string sDisplayName, string sPassword, string sHash) {
            return base.Channel.ValidateAndUpdateLinkedHmrcPasswordAsync(sCustomerID, sDisplayName, sPassword, sHash);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult ValidateMobileCode(string phone, string code) {
            return base.Channel.ValidateMobileCode(phone, code);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> ValidateMobileCodeAsync(string phone, string code) {
            return base.Channel.ValidateMobileCodeAsync(phone, code);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MaamMedalAndPricing(int nCustomerCount, int nLastCheckedCashRequestID) {
            return base.Channel.MaamMedalAndPricing(nCustomerCount, nLastCheckedCashRequestID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MaamMedalAndPricingAsync(int nCustomerCount, int nLastCheckedCashRequestID) {
            return base.Channel.MaamMedalAndPricingAsync(nCustomerCount, nLastCheckedCashRequestID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyMedal(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime) {
            return base.Channel.VerifyMedal(topCount, lastCheckedID, includeTest, calculationTime);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyMedalAsync(int topCount, int lastCheckedID, bool includeTest, System.Nullable<System.DateTime> calculationTime) {
            return base.Channel.VerifyMedalAsync(topCount, lastCheckedID, includeTest, calculationTime);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyApproval(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyApproval(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyApprovalAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyApprovalAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyEnoughAvailableFunds(int underwriterId, decimal deductAmount) {
            return base.Channel.VerifyEnoughAvailableFunds(underwriterId, deductAmount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyEnoughAvailableFundsAsync(int underwriterId, decimal deductAmount) {
            return base.Channel.VerifyEnoughAvailableFundsAsync(underwriterId, deductAmount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReapproval(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyReapproval(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyReapprovalAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyReapprovalAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyReject(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyReject(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRejectAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyRejectAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VerifyRerejection(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyRerejection(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VerifyRerejectionAsync(int nCustomerCount, int nLastCheckedCustomerID) {
            return base.Channel.VerifyRerejectionAsync(nCustomerCount, nLastCheckedCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData VipRequest(int customerId, string fullname, string email, string phone) {
            return base.Channel.VipRequest(customerId, fullname, email, phone);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> VipRequestAsync(int customerId, string fullname, string email, string phone) {
            return base.Channel.VipRequestAsync(customerId, fullname, email, phone);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData XDaysDue() {
            return base.Channel.XDaysDue();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> XDaysDueAsync() {
            return base.Channel.XDaysDueAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ChangeLotteryPlayerStatus(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus) {
            return base.Channel.ChangeLotteryPlayerStatus(customerID, playerID, newStatus);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ChangeLotteryPlayerStatusAsync(int customerID, System.Guid playerID, Ezbob.Backend.Models.LotteryPlayerStatus newStatus) {
            return base.Channel.ChangeLotteryPlayerStatusAsync(customerID, playerID, newStatus);
        }
        
        public ServiceClientProxy.EzServiceReference.LotteryActionResult PlayLottery(int customerID, System.Guid playerID) {
            return base.Channel.PlayLottery(customerID, playerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.LotteryActionResult> PlayLotteryAsync(int customerID, System.Guid playerID) {
            return base.Channel.PlayLotteryAsync(customerID, playerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EnlistLottery(int customerID) {
            return base.Channel.EnlistLottery(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EnlistLotteryAsync(int customerID) {
            return base.Channel.EnlistLotteryAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult CustomerAvaliableCredit(int customerID, long aliMemberID) {
            return base.Channel.CustomerAvaliableCredit(customerID, aliMemberID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AlibabaAvailableCreditActionResult> CustomerAvaliableCreditAsync(int customerID, long aliMemberID) {
            return base.Channel.CustomerAvaliableCreditAsync(customerID, aliMemberID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RequalifyCustomer(int customerID, long aliMemberID) {
            return base.Channel.RequalifyCustomer(customerID, aliMemberID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequalifyCustomerAsync(int customerID, long aliMemberID) {
            return base.Channel.RequalifyCustomerAsync(customerID, aliMemberID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DataSharing(int customerID, ServiceClientProxy.EzServiceReference.AlibabaBusinessType businessType, System.Nullable<int> uwID) {
            return base.Channel.DataSharing(customerID, businessType, uwID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DataSharingAsync(int customerID, ServiceClientProxy.EzServiceReference.AlibabaBusinessType businessType, System.Nullable<int> uwID) {
            return base.Channel.DataSharingAsync(customerID, businessType, uwID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SaveApiCall(Ezbob.Backend.Models.ExternalAPI.ApiCallData data) {
            return base.Channel.SaveApiCall(data);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveApiCallAsync(Ezbob.Backend.Models.ExternalAPI.ApiCallData data) {
            return base.Channel.SaveApiCallAsync(data);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SilentAutomation(int customerID, int underwriterID) {
            return base.Channel.SilentAutomation(customerID, underwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SilentAutomationAsync(int customerID, int underwriterID) {
            return base.Channel.SilentAutomationAsync(customerID, underwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData TotalMaamMedalAndPricing(bool testMode) {
            return base.Channel.TotalMaamMedalAndPricing(testMode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TotalMaamMedalAndPricingAsync(bool testMode) {
            return base.Channel.TotalMaamMedalAndPricingAsync(testMode);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeLtd(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeLtd(customerID, userID, serviceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeLtdAsync(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeLtdAsync(customerID, userID, serviceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ParseCreditSafeNonLtd(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeNonLtd(customerID, userID, serviceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ParseCreditSafeNonLtdAsync(int customerID, int userID, long serviceLogID) {
            return base.Channel.ParseCreditSafeNonLtdAsync(customerID, userID, serviceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult ExperianTarget(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request) {
            return base.Channel.ExperianTarget(customerID, userID, request);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianTargetingActionResult> ExperianTargetAsync(int customerID, int userID, Ezbob.Backend.Models.ExperianTargetingRequest request) {
            return base.Channel.ExperianTargetAsync(customerID, userID, request);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData WriteToServiceLog(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData) {
            return base.Channel.WriteToServiceLog(customerID, userID, packageInputData);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> WriteToServiceLogAsync(int customerID, int userID, Ezbob.Backend.ModelsWithDB.WriteToLogPackage.InputData packageInputData) {
            return base.Channel.WriteToServiceLogAsync(customerID, userID, packageInputData);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedWithoutOpenLoan(int customerID, int userID, decimal amount, string paypointTransactionID) {
            return base.Channel.PayPointAddedWithoutOpenLoan(customerID, userID, amount, paypointTransactionID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedWithoutOpenLoanAsync(int customerID, int userID, decimal amount, string paypointTransactionID) {
            return base.Channel.PayPointAddedWithoutOpenLoanAsync(customerID, userID, amount, paypointTransactionID);
        }
        
        public ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult GetCompanyCaisDataForAlerts(int underwriterId, int customerId) {
            return base.Channel.GetCompanyCaisDataForAlerts(underwriterId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyCaisDataActionResult> GetCompanyCaisDataForAlertsAsync(int underwriterId, int customerId) {
            return base.Channel.GetCompanyCaisDataForAlertsAsync(underwriterId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult GetCompanyDataForCompanyScore(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCompanyScore(underwriterId, refNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCompanyScoreActionResult> GetCompanyDataForCompanyScoreAsync(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCompanyScoreAsync(underwriterId, refNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult GetCompanyDataForCreditBureau(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCreditBureau(underwriterId, refNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CompanyDataForCreditBureauActionResult> GetCompanyDataForCreditBureauAsync(int underwriterId, string refNumber) {
            return base.Channel.GetCompanyDataForCreditBureauAsync(underwriterId, refNumber);
        }
        
        public byte[] GetCompanyFile(int userId, int companyFileId) {
            return base.Channel.GetCompanyFile(userId, companyFileId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetCompanyFileAsync(int userId, int companyFileId) {
            return base.Channel.GetCompanyFileAsync(userId, companyFileId);
        }
        
        public ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult GetCompanySeniority(int customerId, bool isLimited, int underwriterId) {
            return base.Channel.GetCompanySeniority(customerId, isLimited, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.NullableDateTimeActionResult> GetCompanySeniorityAsync(int customerId, bool isLimited, int underwriterId) {
            return base.Channel.GetCompanySeniorityAsync(customerId, isLimited, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ConfigTableActionResult GetConfigTable(int nUnderwriterID, string sTableName) {
            return base.Channel.GetConfigTable(nUnderwriterID, sTableName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ConfigTableActionResult> GetConfigTableAsync(int nUnderwriterID, string sTableName) {
            return base.Channel.GetConfigTableAsync(nUnderwriterID, sTableName);
        }
        
        public ServiceClientProxy.EzServiceReference.DecimalActionResult GetCurrentCustomerAnnualTurnover(int customerID) {
            return base.Channel.GetCurrentCustomerAnnualTurnover(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecimalActionResult> GetCurrentCustomerAnnualTurnoverAsync(int customerID) {
            return base.Channel.GetCurrentCustomerAnnualTurnoverAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult GetCustomerManualAnnualizedRevenue(int nCustomerID) {
            return base.Channel.GetCustomerManualAnnualizedRevenue(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> GetCustomerManualAnnualizedRevenueAsync(int nCustomerID) {
            return base.Channel.GetCustomerManualAnnualizedRevenueAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult GetCustomerState(int customerId) {
            return base.Channel.GetCustomerState(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> GetCustomerStateAsync(int customerId) {
            return base.Channel.GetCustomerStateAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult GetExperianAccountsCurrentBalance(int customerId, int underwriterId) {
            return base.Channel.GetExperianAccountsCurrentBalance(customerId, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianAccountsCurrentBalanceAsync(int customerId, int underwriterId) {
            return base.Channel.GetExperianAccountsCurrentBalanceAsync(customerId, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.DateTimeActionResult GetExperianCompanyCacheDate(int userId, string refNumber) {
            return base.Channel.GetExperianCompanyCacheDate(userId, refNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DateTimeActionResult> GetExperianCompanyCacheDateAsync(int userId, string refNumber) {
            return base.Channel.GetExperianCompanyCacheDateAsync(userId, refNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult GetExperianConsumerScore(int customerId) {
            return base.Channel.GetExperianConsumerScore(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> GetExperianConsumerScoreAsync(int customerId) {
            return base.Channel.GetExperianConsumerScoreAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.DecimalActionResult GetPricingModelDefaultRate(int customerId, int underwriterId, decimal companyShare) {
            return base.Channel.GetPricingModelDefaultRate(customerId, underwriterId, companyShare);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.DecimalActionResult> GetPricingModelDefaultRateAsync(int customerId, int underwriterId, decimal companyShare) {
            return base.Channel.GetPricingModelDefaultRateAsync(customerId, underwriterId, companyShare);
        }
        
        public ServiceClientProxy.EzServiceReference.PricingModelModelActionResult GetPricingModelModel(int customerId, int underwriterId, string scenarioName) {
            return base.Channel.GetPricingModelModel(customerId, underwriterId, scenarioName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> GetPricingModelModelAsync(int customerId, int underwriterId, string scenarioName) {
            return base.Channel.GetPricingModelModelAsync(customerId, underwriterId, scenarioName);
        }
        
        public ServiceClientProxy.EzServiceReference.StringListActionResult GetPricingModelScenarios(int underwriterId) {
            return base.Channel.GetPricingModelScenarios(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> GetPricingModelScenariosAsync(int underwriterId) {
            return base.Channel.GetPricingModelScenariosAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult GetPropertyStatuses() {
            return base.Channel.GetPropertyStatuses();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PropertyStatusesActionResult> GetPropertyStatusesAsync() {
            return base.Channel.GetPropertyStatusesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.WizardConfigsActionResult GetWizardConfigs() {
            return base.Channel.GetWizardConfigs();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.WizardConfigsActionResult> GetWizardConfigsAsync() {
            return base.Channel.GetWizardConfigsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData GetZooplaData(int customerId, bool reCheck) {
            return base.Channel.GetZooplaData(customerId, reCheck);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetZooplaDataAsync(int customerId, bool reCheck) {
            return base.Channel.GetZooplaDataAsync(customerId, reCheck);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData IovationCheck(Ezbob.Backend.Models.IovationCheckModel model) {
            return base.Channel.IovationCheck(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> IovationCheckAsync(Ezbob.Backend.Models.IovationCheckModel model) {
            return base.Channel.IovationCheckAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult IsBroker(string sContactEmail) {
            return base.Channel.IsBroker(sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> IsBrokerAsync(string sContactEmail) {
            return base.Channel.IsBrokerAsync(sContactEmail);
        }
        
        public string LandRegistryEnquiry(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode) {
            return base.Channel.LandRegistryEnquiry(userId, customerId, buildingNumber, buildingName, streetName, cityName, postCode);
        }
        
        public System.Threading.Tasks.Task<string> LandRegistryEnquiryAsync(int userId, int customerId, string buildingNumber, string buildingName, string streetName, string cityName, string postCode) {
            return base.Channel.LandRegistryEnquiryAsync(userId, customerId, buildingNumber, buildingName, streetName, cityName, postCode);
        }
        
        public string LandRegistryRes(int userId, int customerId, string titleNumber) {
            return base.Channel.LandRegistryRes(userId, customerId, titleNumber);
        }
        
        public System.Threading.Tasks.Task<string> LandRegistryResAsync(int userId, int customerId, string titleNumber) {
            return base.Channel.LandRegistryResAsync(userId, customerId, titleNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LateBy14Days() {
            return base.Channel.LateBy14Days();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LateBy14DaysAsync() {
            return base.Channel.LateBy14DaysAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult LoadCustomerByCreatePasswordToken(System.Guid oToken) {
            return base.Channel.LoadCustomerByCreatePasswordToken(oToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerDetailsActionResult> LoadCustomerByCreatePasswordTokenAsync(System.Guid oToken) {
            return base.Channel.LoadCustomerByCreatePasswordTokenAsync(oToken);
        }
        
        public ServiceClientProxy.EzServiceReference.StringStringMapActionResult LoadCustomerLeadFieldNames() {
            return base.Channel.LoadCustomerLeadFieldNames();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringStringMapActionResult> LoadCustomerLeadFieldNamesAsync() {
            return base.Channel.LoadCustomerLeadFieldNamesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.EsignatureFileActionResult LoadEsignatureFile(int userId, long nEsignatureID) {
            return base.Channel.LoadEsignatureFile(userId, nEsignatureID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureFileActionResult> LoadEsignatureFileAsync(int userId, long nEsignatureID) {
            return base.Channel.LoadEsignatureFileAsync(userId, nEsignatureID);
        }
        
        public ServiceClientProxy.EzServiceReference.EsignatureListActionResult LoadEsignatures(int userId, System.Nullable<int> nCustomerID, bool bPollStatus) {
            return base.Channel.LoadEsignatures(userId, nCustomerID, bPollStatus);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EsignatureListActionResult> LoadEsignaturesAsync(int userId, System.Nullable<int> nCustomerID, bool bPollStatus) {
            return base.Channel.LoadEsignaturesAsync(userId, nCustomerID, bPollStatus);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult LoadExperianConsumer(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId) {
            return base.Channel.LoadExperianConsumer(userId, customerId, directorId, nServiceLogId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> LoadExperianConsumerAsync(int userId, int customerId, System.Nullable<int> directorId, System.Nullable<long> nServiceLogId) {
            return base.Channel.LoadExperianConsumerAsync(userId, customerId, directorId, nServiceLogId);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult LoadExperianConsumerMortgageData(int userId, int customerId) {
            return base.Channel.LoadExperianConsumerMortgageData(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerMortgageActionResult> LoadExperianConsumerMortgageDataAsync(int userId, int customerId) {
            return base.Channel.LoadExperianConsumerMortgageDataAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianLtdActionResult LoadExperianLtd(long nServiceLogID) {
            return base.Channel.LoadExperianLtd(nServiceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> LoadExperianLtdAsync(long nServiceLogID) {
            return base.Channel.LoadExperianLtdAsync(nServiceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult LoadManualVatReturnPeriods(int nCustomerID) {
            return base.Channel.LoadManualVatReturnPeriods(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnPeriodsActionResult> LoadManualVatReturnPeriodsAsync(int nCustomerID) {
            return base.Channel.LoadManualVatReturnPeriodsAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnFullData(int nCustomerID, int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnFullData(nCustomerID, nCustomerMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnFullDataAsync(int nCustomerID, int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnFullDataAsync(nCustomerID, nCustomerMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnRawData(int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnRawData(nCustomerMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnRawDataAsync(int nCustomerMarketplaceID) {
            return base.Channel.LoadVatReturnRawDataAsync(nCustomerMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.VatReturnDataActionResult LoadVatReturnSummary(int nCustomerID, int nMarketplaceID) {
            return base.Channel.LoadVatReturnSummary(nCustomerID, nMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.VatReturnDataActionResult> LoadVatReturnSummaryAsync(int nCustomerID, int nMarketplaceID) {
            return base.Channel.LoadVatReturnSummaryAsync(nCustomerID, nMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData LoanFullyPaid(int customerId, string loanRefNum) {
            return base.Channel.LoanFullyPaid(customerId, loanRefNum);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> LoanFullyPaidAsync(int customerId, string loanRefNum) {
            return base.Channel.LoanFullyPaidAsync(customerId, loanRefNum);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategy1(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest) {
            return base.Channel.MainStrategy1(uderwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, createCashRequest, updateCashRequest);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategy1Async(int uderwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest) {
            return base.Channel.MainStrategy1Async(uderwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, createCashRequest, updateCashRequest);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MainStrategySync1(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest) {
            return base.Channel.MainStrategySync1(underwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, createCashRequest, updateCashRequest);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MainStrategySync1Async(int underwriterId, int customerId, Ezbob.Backend.Models.NewCreditLineOption newCreditLine, int avoidAutoDescison, System.Nullable<long> cashRequestID, ServiceClientProxy.EzServiceReference.MainStrategyDoAction createCashRequest, ServiceClientProxy.EzServiceReference.MainStrategyDoAction updateCashRequest) {
            return base.Channel.MainStrategySync1Async(underwriterId, customerId, newCreditLine, avoidAutoDescison, cashRequestID, createCashRequest, updateCashRequest);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MarketplaceInstantUpdate(int nMarketplaceID) {
            return base.Channel.MarketplaceInstantUpdate(nMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarketplaceInstantUpdateAsync(int nMarketplaceID) {
            return base.Channel.MarketplaceInstantUpdateAsync(nMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MarkSessionEnded(int nSessionID, string sComment, System.Nullable<int> nCustomerId) {
            return base.Channel.MarkSessionEnded(nSessionID, sComment, nCustomerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MarkSessionEndedAsync(int nSessionID, string sComment, System.Nullable<int> nCustomerId) {
            return base.Channel.MarkSessionEndedAsync(nSessionID, sComment, nCustomerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlAndBwaInformation(int userId, int customerId) {
            return base.Channel.MoreAmlAndBwaInformation(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlAndBwaInformationAsync(int userId, int customerId) {
            return base.Channel.MoreAmlAndBwaInformationAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MoreAmlInformation(int userId, int customerId) {
            return base.Channel.MoreAmlInformation(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreAmlInformationAsync(int userId, int customerId) {
            return base.Channel.MoreAmlInformationAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData MoreBwaInformation(int userId, int customerId) {
            return base.Channel.MoreBwaInformation(userId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> MoreBwaInformationAsync(int userId, int customerId) {
            return base.Channel.MoreBwaInformationAsync(userId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData NotifySalesOnNewCustomer(int nCustomerID) {
            return base.Channel.NotifySalesOnNewCustomer(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> NotifySalesOnNewCustomerAsync(int nCustomerID) {
            return base.Channel.NotifySalesOnNewCustomerAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult ParseExperianConsumer(long nServiceLogId) {
            return base.Channel.ParseExperianConsumer(nServiceLogId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianConsumerActionResult> ParseExperianConsumerAsync(long nServiceLogId) {
            return base.Channel.ParseExperianConsumerAsync(nServiceLogId);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianLtdActionResult ParseExperianLtd(long nServiceLogID) {
            return base.Channel.ParseExperianLtd(nServiceLogID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> ParseExperianLtdAsync(long nServiceLogID) {
            return base.Channel.ParseExperianLtdAsync(nServiceLogID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PasswordRestored(int customerId) {
            return base.Channel.PasswordRestored(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PasswordRestoredAsync(int customerId) {
            return base.Channel.PasswordRestoredAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayEarly(int customerId, decimal amount, string loanRefNum) {
            return base.Channel.PayEarly(customerId, amount, loanRefNum);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayEarlyAsync(int customerId, decimal amount, string loanRefNum) {
            return base.Channel.PayEarlyAsync(customerId, amount, loanRefNum);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointAddedByUnderwriter(int customerId, string cardno, string underwriterName, int underwriterId) {
            return base.Channel.PayPointAddedByUnderwriter(customerId, cardno, underwriterName, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointAddedByUnderwriterAsync(int customerId, string cardno, string underwriterName, int underwriterId) {
            return base.Channel.PayPointAddedByUnderwriterAsync(customerId, cardno, underwriterName, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointCharger() {
            return base.Channel.PayPointCharger();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointChargerAsync() {
            return base.Channel.PayPointChargerAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PayPointNameValidationFailed(int userId, int customerId, string cardHolderName) {
            return base.Channel.PayPointNameValidationFailed(userId, customerId, cardHolderName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PayPointNameValidationFailedAsync(int userId, int customerId, string cardHolderName) {
            return base.Channel.PayPointNameValidationFailedAsync(userId, customerId, cardHolderName);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData PostcodeSaveLog(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID) {
            return base.Channel.PostcodeSaveLog(sRequestType, sUrl, sStatus, sResponseData, sErrorMessage, nUserID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> PostcodeSaveLogAsync(string sRequestType, string sUrl, string sStatus, string sResponseData, string sErrorMessage, int nUserID) {
            return base.Channel.PostcodeSaveLogAsync(sRequestType, sUrl, sStatus, sResponseData, sErrorMessage, nUserID);
        }
        
        public ServiceClientProxy.EzServiceReference.PricingModelModelActionResult PricingModelCalculate(int customerId, int underwriterId, ServiceClientProxy.EzServiceReference.PricingModelModel model) {
            return base.Channel.PricingModelCalculate(customerId, underwriterId, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.PricingModelModelActionResult> PricingModelCalculateAsync(int customerId, int underwriterId, ServiceClientProxy.EzServiceReference.PricingModelModel model) {
            return base.Channel.PricingModelCalculateAsync(customerId, underwriterId, model);
        }
        
        public ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOffer(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOffer(customerId, saveOfferToDB);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferAsync(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOfferAsync(customerId, saveOfferToDB);
        }
        
        public ServiceClientProxy.EzServiceReference.QuickOfferActionResult QuickOfferWithPrerequisites(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOfferWithPrerequisites(customerId, saveOfferToDB);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.QuickOfferActionResult> QuickOfferWithPrerequisitesAsync(int customerId, bool saveOfferToDB) {
            return base.Channel.QuickOfferWithPrerequisitesAsync(customerId, saveOfferToDB);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RecordManualPacnetDeposit(int underwriterId, string underwriterName, int amount) {
            return base.Channel.RecordManualPacnetDeposit(underwriterId, underwriterName, amount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RecordManualPacnetDepositAsync(int underwriterId, string underwriterName, int amount) {
            return base.Channel.RecordManualPacnetDepositAsync(underwriterId, underwriterName, amount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RejectUser(int userId, int customerId, bool bSendToCustomer) {
            return base.Channel.RejectUser(userId, customerId, bSendToCustomer);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RejectUserAsync(int userId, int customerId, bool bSendToCustomer) {
            return base.Channel.RejectUserAsync(userId, customerId, bSendToCustomer);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RemoveManualVatReturnPeriod(System.Guid oPeriodID) {
            return base.Channel.RemoveManualVatReturnPeriod(oPeriodID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RemoveManualVatReturnPeriodAsync(System.Guid oPeriodID) {
            return base.Channel.RemoveManualVatReturnPeriodAsync(oPeriodID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RenewEbayToken(int userId, int customerId, string marketplaceName, string eBayAddress) {
            return base.Channel.RenewEbayToken(userId, customerId, marketplaceName, eBayAddress);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RenewEbayTokenAsync(int userId, int customerId, string marketplaceName, string eBayAddress) {
            return base.Channel.RenewEbayTokenAsync(userId, customerId, marketplaceName, eBayAddress);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData RequestCashWithoutTakenLoan(int customerId) {
            return base.Channel.RequestCashWithoutTakenLoan(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> RequestCashWithoutTakenLoanAsync(int customerId) {
            return base.Channel.RequestCashWithoutTakenLoanAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ResetPassword123456(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget) {
            return base.Channel.ResetPassword123456(nUnderwriterID, nTargetID, nTarget);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ResetPassword123456Async(int nUnderwriterID, int nTargetID, ServiceClientProxy.EzServiceReference.PasswordResetTarget nTarget) {
            return base.Channel.ResetPassword123456Async(nUnderwriterID, nTargetID, nTarget);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateLeadAccount(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead) {
            return base.Channel.SalesForceAddUpdateLeadAccount(userID, email, customerID, isBrokerLead, isVipLead);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateLeadAccountAsync(System.Nullable<int> userID, string email, System.Nullable<int> customerID, bool isBrokerLead, bool isVipLead) {
            return base.Channel.SalesForceAddUpdateLeadAccountAsync(userID, email, customerID, isBrokerLead, isVipLead);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddUpdateContact(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail) {
            return base.Channel.SalesForceAddUpdateContact(userID, customerID, directorID, directorEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddUpdateContactAsync(System.Nullable<int> userID, int customerID, System.Nullable<int> directorID, string directorEmail) {
            return base.Channel.SalesForceAddUpdateContactAsync(userID, customerID, directorID, directorEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddTask(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model) {
            return base.Channel.SalesForceAddTask(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddTaskAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.TaskModel model) {
            return base.Channel.SalesForceAddTaskAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddActivity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model) {
            return base.Channel.SalesForceAddActivity(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddActivityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.ActivityModel model) {
            return base.Channel.SalesForceAddActivityAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceAddOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceAddOpportunity(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceAddOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceAddOpportunityAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SalesForceUpdateOpportunity(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceUpdateOpportunity(userID, customerID, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SalesForceUpdateOpportunityAsync(System.Nullable<int> userID, int customerID, ServiceClientProxy.EzServiceReference.OpportunityModel model) {
            return base.Channel.SalesForceUpdateOpportunityAsync(userID, customerID, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SaveAgreement(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2) {
            return base.Channel.SaveAgreement(customerId, model, refNumber, name, template, path1, path2);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveAgreementAsync(int customerId, EzBob.Backend.Models.AgreementModel model, string refNumber, string name, Ezbob.Backend.Models.TemplateModel template, string path1, string path2) {
            return base.Channel.SaveAgreementAsync(customerId, model, refNumber, name, template, path1, path2);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult SaveConfigTable(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType) {
            return base.Channel.SaveConfigTable(configTableEntries, configTableType);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SaveConfigTableAsync(EzBob.Backend.Models.ConfigTable[] configTableEntries, Ezbob.Backend.Models.ConfigTableType configTableType) {
            return base.Channel.SaveConfigTableAsync(configTableEntries, configTableType);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SavePricingModelSettings(int underwriterId, string scenarioName, ServiceClientProxy.EzServiceReference.PricingModelModel model) {
            return base.Channel.SavePricingModelSettings(underwriterId, scenarioName, model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SavePricingModelSettingsAsync(int underwriterId, string scenarioName, ServiceClientProxy.EzServiceReference.PricingModelModel model) {
            return base.Channel.SavePricingModelSettingsAsync(underwriterId, scenarioName, model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SaveSourceRefHistory(int nUserID, string sSourceRefList, string sVisitTimeList, Ezbob.Backend.ModelsWithDB.CampaignSourceRef campaignSourceRef) {
            return base.Channel.SaveSourceRefHistory(nUserID, sSourceRefList, sVisitTimeList, campaignSourceRef);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SaveSourceRefHistoryAsync(int nUserID, string sSourceRefList, string sVisitTimeList, Ezbob.Backend.ModelsWithDB.CampaignSourceRef campaignSourceRef) {
            return base.Channel.SaveSourceRefHistoryAsync(nUserID, sSourceRefList, sVisitTimeList, campaignSourceRef);
        }
        
        public ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult SaveVatReturnData(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths) {
            return base.Channel.SaveVatReturnData(nCustomerMarketplaceID, nHistoryRecordID, nSourceID, oVatReturn, oRtiMonths);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ElapsedTimeInfoActionResult> SaveVatReturnDataAsync(int nCustomerMarketplaceID, int nHistoryRecordID, int nSourceID, Ezbob.Backend.Models.VatReturnRawData[] oVatReturn, Ezbob.Backend.Models.RtiTaxMonthRawData[] oRtiMonths) {
            return base.Channel.SaveVatReturnDataAsync(nCustomerMarketplaceID, nHistoryRecordID, nSourceID, oVatReturn, oRtiMonths);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SendPendingMails(int underwriterId, int customerId) {
            return base.Channel.SendPendingMails(underwriterId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SendPendingMailsAsync(int underwriterId, int customerId) {
            return base.Channel.SendPendingMailsAsync(underwriterId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SendEverlineRefinanceMails(int customerId, string customerName, System.DateTime now, decimal loanAmount, decimal transferedAmount) {
            return base.Channel.SendEverlineRefinanceMails(customerId, customerName, now, loanAmount, transferedAmount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SendEverlineRefinanceMailsAsync(int customerId, string customerName, System.DateTime now, decimal loanAmount, decimal transferedAmount) {
            return base.Channel.SendEverlineRefinanceMailsAsync(customerId, customerName, now, loanAmount, transferedAmount);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult SendSms(int userId, int underwriterId, string phone, string content) {
            return base.Channel.SendSms(userId, underwriterId, phone, content);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> SendSmsAsync(int userId, int underwriterId, string phone, string content) {
            return base.Channel.SendSmsAsync(userId, underwriterId, phone, content);
        }
        
        public ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult SetCustomerManualAnnualizedRevenue(int nCustomerID, decimal nRevenue, string sComment) {
            return base.Channel.SetCustomerManualAnnualizedRevenue(nCustomerID, nRevenue, sComment);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CustomerManualAnnualizedRevenueActionResult> SetCustomerManualAnnualizedRevenueAsync(int nCustomerID, decimal nRevenue, string sComment) {
            return base.Channel.SetCustomerManualAnnualizedRevenueAsync(nCustomerID, nRevenue, sComment);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult SetCustomerPasswordByToken(string sEmail, Ezbob.Backend.Models.Password oPassword, System.Guid oToken, bool bIsBrokerLead) {
            return base.Channel.SetCustomerPasswordByToken(sEmail, oPassword, oToken, bIsBrokerLead);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> SetCustomerPasswordByTokenAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, System.Guid oToken, bool bIsBrokerLead) {
            return base.Channel.SetCustomerPasswordByTokenAsync(sEmail, oPassword, oToken, bIsBrokerLead);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData SetLateLoanStatus() {
            return base.Channel.SetLateLoanStatus();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> SetLateLoanStatusAsync() {
            return base.Channel.SetLateLoanStatusAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Temp_BackFillMedals() {
            return base.Channel.Temp_BackFillMedals();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> Temp_BackFillMedalsAsync() {
            return base.Channel.Temp_BackFillMedalsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData TransferCashFailed(int customerId) {
            return base.Channel.TransferCashFailed(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> TransferCashFailedAsync(int customerId) {
            return base.Channel.TransferCashFailedAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UnderwriterSignup(string name, Ezbob.Backend.Models.Password password, string role) {
            return base.Channel.UnderwriterSignup(name, password, role);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UnderwriterSignupAsync(string name, Ezbob.Backend.Models.Password password, string role) {
            return base.Channel.UnderwriterSignupAsync(name, password, role);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateConfigurationVariables(int userId) {
            return base.Channel.UpdateConfigurationVariables(userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateConfigurationVariablesAsync(int userId) {
            return base.Channel.UpdateConfigurationVariablesAsync(userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateCurrencyRates() {
            return base.Channel.UpdateCurrencyRates();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateCurrencyRatesAsync() {
            return base.Channel.UpdateCurrencyRatesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateCustomerAnalyticsOnCompanyChange(int customerID) {
            return base.Channel.UpdateCustomerAnalyticsOnCompanyChange(customerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateCustomerAnalyticsOnCompanyChangeAsync(int customerID) {
            return base.Channel.UpdateCustomerAnalyticsOnCompanyChangeAsync(customerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateExperianDirectorDetails(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails) {
            return base.Channel.UpdateExperianDirectorDetails(nCustomerID, nUnderwriterID, oDetails);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateExperianDirectorDetailsAsync(System.Nullable<int> nCustomerID, System.Nullable<int> nUnderwriterID, Ezbob.Backend.Models.Esigner oDetails) {
            return base.Channel.UpdateExperianDirectorDetailsAsync(nCustomerID, nUnderwriterID, oDetails);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData UpdateGoogleAnalytics(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate) {
            return base.Channel.UpdateGoogleAnalytics(oBackfillStartDate, oBackfillEndDate);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> UpdateGoogleAnalyticsAsync(System.Nullable<System.DateTime> oBackfillStartDate, System.Nullable<System.DateTime> oBackfillEndDate) {
            return base.Channel.UpdateGoogleAnalyticsAsync(oBackfillStartDate, oBackfillEndDate);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData AddCciHistory(int nCustomerID, int nUnderwriterID, bool bCciMark) {
            return base.Channel.AddCciHistory(nCustomerID, nUnderwriterID, bCciMark);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AddCciHistoryAsync(int nCustomerID, int nUnderwriterID, bool bCciMark) {
            return base.Channel.AddCciHistoryAsync(nCustomerID, nUnderwriterID, bCciMark);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData AndRecalculateVatReturnSummaryForAll() {
            return base.Channel.AndRecalculateVatReturnSummaryForAll();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> AndRecalculateVatReturnSummaryForAllAsync() {
            return base.Channel.AndRecalculateVatReturnSummaryForAllAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ApprovedUser(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst) {
            return base.Channel.ApprovedUser(userId, customerId, loanAmount, nValidHours, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ApprovedUserAsync(int userId, int customerId, decimal loanAmount, int nValidHours, bool isFirst) {
            return base.Channel.ApprovedUserAsync(userId, customerId, loanAmount, nValidHours, isFirst);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillAml() {
            return base.Channel.BackfillAml();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillAmlAsync() {
            return base.Channel.BackfillAmlAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillCustomerAnalyticsCompany() {
            return base.Channel.BackfillCustomerAnalyticsCompany();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillCustomerAnalyticsCompanyAsync() {
            return base.Channel.BackfillCustomerAnalyticsCompanyAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianConsumer() {
            return base.Channel.BackfillExperianConsumer();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianConsumerAsync() {
            return base.Channel.BackfillExperianConsumerAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianDirectors(System.Nullable<int> nCustomerID) {
            return base.Channel.BackfillExperianDirectors(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianDirectorsAsync(System.Nullable<int> nCustomerID) {
            return base.Channel.BackfillExperianDirectorsAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillExperianLtd() {
            return base.Channel.BackfillExperianLtd();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillExperianLtdAsync() {
            return base.Channel.BackfillExperianLtdAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillHmrcBusinessRelevance() {
            return base.Channel.BackfillHmrcBusinessRelevance();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillHmrcBusinessRelevanceAsync() {
            return base.Channel.BackfillHmrcBusinessRelevanceAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillLandRegistry2PropertyLink() {
            return base.Channel.BackfillLandRegistry2PropertyLink();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillLandRegistry2PropertyLinkAsync() {
            return base.Channel.BackfillLandRegistry2PropertyLinkAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillNonLimitedCompanies() {
            return base.Channel.BackfillNonLimitedCompanies();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillNonLimitedCompaniesAsync() {
            return base.Channel.BackfillNonLimitedCompaniesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillTurnover() {
            return base.Channel.BackfillTurnover();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillTurnoverAsync() {
            return base.Channel.BackfillTurnoverAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BackfillZooplaValue() {
            return base.Channel.BackfillZooplaValue();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BackfillZooplaValueAsync() {
            return base.Channel.BackfillZooplaValueAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAcceptTerms(int nTermsID, string sContactEmail) {
            return base.Channel.BrokerAcceptTerms(nTermsID, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAcceptTermsAsync(int nTermsID, string sContactEmail) {
            return base.Channel.BrokerAcceptTermsAsync(nTermsID, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddCustomerLead(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail) {
            return base.Channel.BrokerAddCustomerLead(sLeadFirstName, sLeadLastName, sLeadEmail, sLeadAddMode, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddCustomerLeadAsync(string sLeadFirstName, string sLeadLastName, string sLeadEmail, string sLeadAddMode, string sContactEmail) {
            return base.Channel.BrokerAddCustomerLeadAsync(sLeadFirstName, sLeadLastName, sLeadEmail, sLeadAddMode, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAddBank(Ezbob.Backend.Models.BrokerAddBankModel model) {
            return base.Channel.BrokerAddBank(model);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAddBankAsync(Ezbob.Backend.Models.BrokerAddBankModel model) {
            return base.Channel.BrokerAddBankAsync(model);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerApproveAndResetCustomerPassword(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst) {
            return base.Channel.BrokerApproveAndResetCustomerPassword(nUnderwriterID, nCustomerID, nLoanAmount, nValidHours, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerApproveAndResetCustomerPasswordAsync(int nUnderwriterID, int nCustomerID, decimal nLoanAmount, int nValidHours, bool isFirst) {
            return base.Channel.BrokerApproveAndResetCustomerPasswordAsync(nUnderwriterID, nCustomerID, nLoanAmount, nValidHours, isFirst);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerAttachCustomer(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID) {
            return base.Channel.BrokerAttachCustomer(nCustomerID, nBrokerID, nUnderwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerAttachCustomerAsync(int nCustomerID, System.Nullable<int> nBrokerID, int nUnderwriterID) {
            return base.Channel.BrokerAttachCustomerAsync(nCustomerID, nBrokerID, nUnderwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult BrokerBackFromCustomerWizard(int nLeadID) {
            return base.Channel.BrokerBackFromCustomerWizard(nLeadID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerBackFromCustomerWizardAsync(int nLeadID) {
            return base.Channel.BrokerBackFromCustomerWizardAsync(nLeadID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCheckCustomerRelevance(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken) {
            return base.Channel.BrokerCheckCustomerRelevance(nCustomerID, sCustomerEmail, isAlibaba, sSourceRef, sConfirmationToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCheckCustomerRelevanceAsync(int nCustomerID, string sCustomerEmail, bool isAlibaba, string sSourceRef, string sConfirmationToken) {
            return base.Channel.BrokerCheckCustomerRelevanceAsync(nCustomerID, sCustomerEmail, isAlibaba, sSourceRef, sConfirmationToken);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerCustomerWizardComplete(int nCustomerID) {
            return base.Channel.BrokerCustomerWizardComplete(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerCustomerWizardCompleteAsync(int nCustomerID) {
            return base.Channel.BrokerCustomerWizardCompleteAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerDeleteCustomerFiles(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs) {
            return base.Channel.BrokerDeleteCustomerFiles(sCustomerRefNum, sContactEmail, aryFileIDs);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerDeleteCustomerFilesAsync(string sCustomerRefNum, string sContactEmail, int[] aryFileIDs) {
            return base.Channel.BrokerDeleteCustomerFilesAsync(sCustomerRefNum, sContactEmail, aryFileIDs);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult BrokerDownloadCustomerFile(string sCustomerRefNum, string sContactEmail, int nFileID) {
            return base.Channel.BrokerDownloadCustomerFile(sCustomerRefNum, sContactEmail, nFileID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFileContentsActionResult> BrokerDownloadCustomerFileAsync(string sCustomerRefNum, string sContactEmail, int nFileID) {
            return base.Channel.BrokerDownloadCustomerFileAsync(sCustomerRefNum, sContactEmail, nFileID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerForceResetCustomerPassword(int nUserID, int nCustomerID) {
            return base.Channel.BrokerForceResetCustomerPassword(nUserID, nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerForceResetCustomerPasswordAsync(int nUserID, int nCustomerID) {
            return base.Channel.BrokerForceResetCustomerPasswordAsync(nUserID, nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult BrokerInstantOffer(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request) {
            return base.Channel.BrokerInstantOffer(request);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerInstantOfferResponseActionResult> BrokerInstantOfferAsync(Ezbob.Backend.ModelsWithDB.BrokerInstantOfferRequest request) {
            return base.Channel.BrokerInstantOfferAsync(request);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadAcquireCustomer(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken) {
            return base.Channel.BrokerLeadAcquireCustomer(nCustomerID, nLeadID, sFirstName, bBrokerFillsForCustomer, sConfirmationToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadAcquireCustomerAsync(int nCustomerID, int nLeadID, string sFirstName, bool bBrokerFillsForCustomer, string sConfirmationToken) {
            return base.Channel.BrokerLeadAcquireCustomerAsync(nCustomerID, nLeadID, sFirstName, bBrokerFillsForCustomer, sConfirmationToken);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCanFillWizard(int nLeadID, string sLeadEmail, string sContactEmail) {
            return base.Channel.BrokerLeadCanFillWizard(nLeadID, sLeadEmail, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCanFillWizardAsync(int nLeadID, string sLeadEmail, string sContactEmail) {
            return base.Channel.BrokerLeadCanFillWizardAsync(nLeadID, sLeadEmail, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult BrokerLeadCheckToken(string sToken) {
            return base.Channel.BrokerLeadCheckToken(sToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsActionResult> BrokerLeadCheckTokenAsync(string sToken) {
            return base.Channel.BrokerLeadCheckTokenAsync(sToken);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerLeadSendInvitation(int nLeadID, string sBrokerContactEmail) {
            return base.Channel.BrokerLeadSendInvitation(nLeadID, sBrokerContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerLeadSendInvitationAsync(int nLeadID, string sBrokerContactEmail) {
            return base.Channel.BrokerLeadSendInvitationAsync(nLeadID, sBrokerContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult BrokerLoadCustomerDetails(string sCustomerRefNum, string sContactEmail) {
            return base.Channel.BrokerLoadCustomerDetails(sCustomerRefNum, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerDetailsActionResult> BrokerLoadCustomerDetailsAsync(string sCustomerRefNum, string sContactEmail) {
            return base.Channel.BrokerLoadCustomerDetailsAsync(sCustomerRefNum, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult BrokerLoadLeadDetails(int leadID, string sContactEmail) {
            return base.Channel.BrokerLoadLeadDetails(leadID, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerLeadDetailsDataActionResult> BrokerLoadLeadDetailsAsync(int leadID, string sContactEmail) {
            return base.Channel.BrokerLoadLeadDetailsAsync(leadID, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult BrokerLoadCustomerFiles(string sCustomerRefNum, string sContactEmail) {
            return base.Channel.BrokerLoadCustomerFiles(sCustomerRefNum, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomerFilesActionResult> BrokerLoadCustomerFilesAsync(string sCustomerRefNum, string sContactEmail) {
            return base.Channel.BrokerLoadCustomerFilesAsync(sCustomerRefNum, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomerList(string sContactEmail) {
            return base.Channel.BrokerLoadCustomerList(sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomerListAsync(string sContactEmail) {
            return base.Channel.BrokerLoadCustomerListAsync(sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult BrokerLoadCustomersByID(int nBrokerID) {
            return base.Channel.BrokerLoadCustomersByID(nBrokerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerCustomersActionResult> BrokerLoadCustomersByIDAsync(int nBrokerID) {
            return base.Channel.BrokerLoadCustomersByIDAsync(nBrokerID);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadOwnProperties(string sContactEmail) {
            return base.Channel.BrokerLoadOwnProperties(sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadOwnPropertiesAsync(string sContactEmail) {
            return base.Channel.BrokerLoadOwnPropertiesAsync(sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLoadPropertiesByID(int nBrokerID) {
            return base.Channel.BrokerLoadPropertiesByID(nBrokerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoadPropertiesByIDAsync(int nBrokerID) {
            return base.Channel.BrokerLoadPropertiesByIDAsync(nBrokerID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringListActionResult BrokerLoadSignedTerms(string sContactEmail) {
            return base.Channel.BrokerLoadSignedTerms(sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringListActionResult> BrokerLoadSignedTermsAsync(string sContactEmail) {
            return base.Channel.BrokerLoadSignedTermsAsync(sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult BrokerLoadStaticData(bool bLoadFilesOnly) {
            return base.Channel.BrokerLoadStaticData(bLoadFilesOnly);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerStaticDataActionResult> BrokerLoadStaticDataAsync(bool bLoadFilesOnly) {
            return base.Channel.BrokerLoadStaticDataAsync(bLoadFilesOnly);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerLogin(string sEmail, Ezbob.Backend.Models.Password oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime) {
            return base.Channel.BrokerLogin(sEmail, oPassword, promotionName, promotionPageVisitTime);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerLoginAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, string promotionName, System.Nullable<System.DateTime> promotionPageVisitTime) {
            return base.Channel.BrokerLoginAsync(sEmail, oPassword, promotionName, promotionPageVisitTime);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerRestorePassword(string sMobile, string sCode) {
            return base.Channel.BrokerRestorePassword(sMobile, sCode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerRestorePasswordAsync(string sMobile, string sCode) {
            return base.Channel.BrokerRestorePasswordAsync(sMobile, sCode);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult BrokerSaveCrmEntry(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail) {
            return base.Channel.BrokerSaveCrmEntry(sType, nActionID, nStatusID, sComment, sCustomerRefNum, sContactEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> BrokerSaveCrmEntryAsync(string sType, int nActionID, int nStatusID, string sComment, string sCustomerRefNum, string sContactEmail) {
            return base.Channel.BrokerSaveCrmEntryAsync(sType, nActionID, nStatusID, sComment, sCustomerRefNum, sContactEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerSaveUploadedCustomerFile(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName) {
            return base.Channel.BrokerSaveUploadedCustomerFile(sCustomerRefNum, sContactEmail, oFileContents, sFileName);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerSaveUploadedCustomerFileAsync(string sCustomerRefNum, string sContactEmail, byte[] oFileContents, string sFileName) {
            return base.Channel.BrokerSaveUploadedCustomerFileAsync(sCustomerRefNum, sContactEmail, oFileContents, sFileName);
        }
        
        public ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult BrokerSignup(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    decimal nEstimatedMonthlyClientAmount, 
                    Ezbob.Backend.Models.Password oPassword, 
                    string sFirmWebSiteUrl, 
                    int nEstimatedMonthlyApplicationCount, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber) {
            return base.Channel.BrokerSignup(sFirmName, sFirmRegNum, sContactName, sContactEmail, sContactMobile, sMobileCode, sContactOtherPhone, nEstimatedMonthlyClientAmount, oPassword, sFirmWebSiteUrl, nEstimatedMonthlyApplicationCount, bIsCaptchEnabled, nBrokerTermsID, sReferredBy, bFCARegistered, sLicenseNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BrokerPropertiesActionResult> BrokerSignupAsync(
                    string sFirmName, 
                    string sFirmRegNum, 
                    string sContactName, 
                    string sContactEmail, 
                    string sContactMobile, 
                    string sMobileCode, 
                    string sContactOtherPhone, 
                    decimal nEstimatedMonthlyClientAmount, 
                    Ezbob.Backend.Models.Password oPassword, 
                    string sFirmWebSiteUrl, 
                    int nEstimatedMonthlyApplicationCount, 
                    bool bIsCaptchEnabled, 
                    int nBrokerTermsID, 
                    string sReferredBy, 
                    bool bFCARegistered, 
                    string sLicenseNumber) {
            return base.Channel.BrokerSignupAsync(sFirmName, sFirmRegNum, sContactName, sContactEmail, sContactMobile, sMobileCode, sContactOtherPhone, nEstimatedMonthlyClientAmount, oPassword, sFirmWebSiteUrl, nEstimatedMonthlyApplicationCount, bIsCaptchEnabled, nBrokerTermsID, sReferredBy, bFCARegistered, sLicenseNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerTransferCommission() {
            return base.Channel.BrokerTransferCommission();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerTransferCommissionAsync() {
            return base.Channel.BrokerTransferCommissionAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData BrokerUpdatePassword(string sContactEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword) {
            return base.Channel.BrokerUpdatePassword(sContactEmail, oOldPassword, oNewPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> BrokerUpdatePasswordAsync(string sContactEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword) {
            return base.Channel.BrokerUpdatePasswordAsync(sContactEmail, oOldPassword, oNewPassword);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CaisGenerate(int underwriterId) {
            return base.Channel.CaisGenerate(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisGenerateAsync(int underwriterId) {
            return base.Channel.CaisGenerateAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CaisUpdate(int userId, int caisId) {
            return base.Channel.CaisUpdate(userId, caisId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CaisUpdateAsync(int userId, int caisId) {
            return base.Channel.CaisUpdateAsync(userId, caisId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CalculateMedal(int underwriterId, int customerId) {
            return base.Channel.CalculateMedal(underwriterId, customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateMedalAsync(int underwriterId, int customerId) {
            return base.Channel.CalculateMedalAsync(underwriterId, customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.MarketplacesActionResult CalculateModelsAndAffordability(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory) {
            return base.Channel.CalculateModelsAndAffordability(userId, nCustomerID, oHistory);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.MarketplacesActionResult> CalculateModelsAndAffordabilityAsync(int userId, int nCustomerID, System.Nullable<System.DateTime> oHistory) {
            return base.Channel.CalculateModelsAndAffordabilityAsync(userId, nCustomerID, oHistory);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CalculateOffer(int underwriterId, int customerId, int amount, bool hasLoans, ServiceClientProxy.EzServiceReference.Medal medalClassification) {
            return base.Channel.CalculateOffer(underwriterId, customerId, amount, hasLoans, medalClassification);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateOfferAsync(int underwriterId, int customerId, int amount, bool hasLoans, ServiceClientProxy.EzServiceReference.Medal medalClassification) {
            return base.Channel.CalculateOfferAsync(underwriterId, customerId, amount, hasLoans, medalClassification);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CalculateVatReturnSummary(int nCustomerMarketplaceID) {
            return base.Channel.CalculateVatReturnSummary(nCustomerMarketplaceID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CalculateVatReturnSummaryAsync(int nCustomerMarketplaceID) {
            return base.Channel.CalculateVatReturnSummaryAsync(nCustomerMarketplaceID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CashTransferred(int customerId, decimal amount, string loanRefNum, bool isFirst) {
            return base.Channel.CashTransferred(customerId, amount, loanRefNum, isFirst);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CashTransferredAsync(int customerId, decimal amount, string loanRefNum, bool isFirst) {
            return base.Channel.CashTransferredAsync(customerId, amount, loanRefNum, isFirst);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ChangeBrokerEmail(string oldEmail, string newEmail, string newPassword) {
            return base.Channel.ChangeBrokerEmail(oldEmail, newEmail, newPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ChangeBrokerEmailAsync(string oldEmail, string newEmail, string newPassword) {
            return base.Channel.ChangeBrokerEmailAsync(oldEmail, newEmail, newPassword);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckAml(int customerId, int userId) {
            return base.Channel.CheckAml(customerId, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlAsync(int customerId, int userId) {
            return base.Channel.CheckAmlAsync(customerId, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckAmlCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode) {
            return base.Channel.CheckAmlCustom(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckAmlCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode) {
            return base.Channel.CheckAmlCustomAsync(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwa(int customerId, int userId) {
            return base.Channel.CheckBwa(customerId, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaAsync(int customerId, int userId) {
            return base.Channel.CheckBwaAsync(customerId, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CheckBwaCustom(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber) {
            return base.Channel.CheckBwaCustom(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode, idhubBranchCode, idhubAccountNumber);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CheckBwaCustomAsync(int userId, int customerId, string idhubHouseNumber, string idhubHouseName, string idhubStreet, string idhubDistrict, string idhubTown, string idhubCounty, string idhubPostCode, string idhubBranchCode, string idhubAccountNumber) {
            return base.Channel.CheckBwaCustomAsync(userId, customerId, idhubHouseNumber, idhubHouseName, idhubStreet, idhubDistrict, idhubTown, idhubCounty, idhubPostCode, idhubBranchCode, idhubAccountNumber);
        }
        
        public ServiceClientProxy.EzServiceReference.ExperianLtdActionResult CheckLtdCompanyCache(int userId, string sCompanyRefNum) {
            return base.Channel.CheckLtdCompanyCache(userId, sCompanyRefNum);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ExperianLtdActionResult> CheckLtdCompanyCacheAsync(int userId, string sCompanyRefNum) {
            return base.Channel.CheckLtdCompanyCacheAsync(userId, sCompanyRefNum);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData CompanyFilesUpload(int customerId, string fileName, byte[] fileContent, string fileContentType) {
            return base.Channel.CompanyFilesUpload(customerId, fileName, fileContent, fileContentType);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> CompanyFilesUploadAsync(int customerId, string fileName, byte[] fileContent, string fileContentType) {
            return base.Channel.CompanyFilesUploadAsync(customerId, fileName, fileContent, fileContentType);
        }
        
        public ServiceClientProxy.EzServiceReference.CrmLookupsActionResult CrmLoadLookups() {
            return base.Channel.CrmLoadLookups();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.CrmLookupsActionResult> CrmLoadLookupsAsync() {
            return base.Channel.CrmLoadLookupsAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult CustomerChangePassword(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword) {
            return base.Channel.CustomerChangePassword(sEmail, oOldPassword, oNewPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> CustomerChangePasswordAsync(string sEmail, Ezbob.Backend.Models.Password oOldPassword, Ezbob.Backend.Models.Password oNewPassword) {
            return base.Channel.CustomerChangePasswordAsync(sEmail, oOldPassword, oNewPassword);
        }
        
        public ServiceClientProxy.EzServiceReference.UserLoginActionResult CustomerSignup(string sEmail, Ezbob.Backend.Models.Password oPassword, int nPasswordQuestion, string sPasswordAnswer, string sRemoteIp) {
            return base.Channel.CustomerSignup(sEmail, oPassword, nPasswordQuestion, sPasswordAnswer, sRemoteIp);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.UserLoginActionResult> CustomerSignupAsync(string sEmail, Ezbob.Backend.Models.Password oPassword, int nPasswordQuestion, string sPasswordAnswer, string sRemoteIp) {
            return base.Channel.CustomerSignupAsync(sEmail, oPassword, nPasswordQuestion, sPasswordAnswer, sRemoteIp);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DeleteExperianDirector(int nDirectorID, int nUnderwriterID) {
            return base.Channel.DeleteExperianDirector(nDirectorID, nUnderwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DeleteExperianDirectorAsync(int nDirectorID, int nUnderwriterID) {
            return base.Channel.DeleteExperianDirectorAsync(nDirectorID, nUnderwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DisableCurrentManualPacnetDeposits(int underwriterId) {
            return base.Channel.DisableCurrentManualPacnetDeposits(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisableCurrentManualPacnetDepositsAsync(int underwriterId) {
            return base.Channel.DisableCurrentManualPacnetDepositsAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData DisplayMarketplaceSecurityData(int nCustomerID) {
            return base.Channel.DisplayMarketplaceSecurityData(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> DisplayMarketplaceSecurityDataAsync(int nCustomerID) {
            return base.Channel.DisplayMarketplaceSecurityDataAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.IntActionResult EmailConfirmationCheckOne(System.Guid oToken) {
            return base.Channel.EmailConfirmationCheckOne(oToken);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.IntActionResult> EmailConfirmationCheckOneAsync(System.Guid oToken) {
            return base.Channel.EmailConfirmationCheckOneAsync(oToken);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationConfirmUser(int nUserID, int nUnderwriterID) {
            return base.Channel.EmailConfirmationConfirmUser(nUserID, nUnderwriterID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationConfirmUserAsync(int nUserID, int nUnderwriterID) {
            return base.Channel.EmailConfirmationConfirmUserAsync(nUserID, nUnderwriterID);
        }
        
        public ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult EmailConfirmationGenerate(int nUserID) {
            return base.Channel.EmailConfirmationGenerate(nUserID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.EmailConfirmationTokenActionResult> EmailConfirmationGenerateAsync(int nUserID) {
            return base.Channel.EmailConfirmationGenerateAsync(nUserID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailConfirmationGenerateAndSend(int nUserID, int underwriterId) {
            return base.Channel.EmailConfirmationGenerateAndSend(nUserID, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailConfirmationGenerateAndSendAsync(int nUserID, int underwriterId) {
            return base.Channel.EmailConfirmationGenerateAndSendAsync(nUserID, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailHmrcParsingErrors(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail) {
            return base.Channel.EmailHmrcParsingErrors(nCustomerID, nCustomerMarketplaceID, oErrorsToEmail);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailHmrcParsingErrorsAsync(int nCustomerID, int nCustomerMarketplaceID, System.Collections.Generic.Dictionary<string, string> oErrorsToEmail) {
            return base.Channel.EmailHmrcParsingErrorsAsync(nCustomerID, nCustomerMarketplaceID, oErrorsToEmail);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailRolloverAdded(int userId, int customerId, decimal amount) {
            return base.Channel.EmailRolloverAdded(userId, customerId, amount);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailRolloverAddedAsync(int userId, int customerId, decimal amount) {
            return base.Channel.EmailRolloverAddedAsync(userId, customerId, amount);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EmailUnderReview(int customerId) {
            return base.Channel.EmailUnderReview(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EmailUnderReviewAsync(int customerId) {
            return base.Channel.EmailUnderReviewAsync(customerId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EncryptChannelGrabberMarketplaces() {
            return base.Channel.EncryptChannelGrabberMarketplaces();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EncryptChannelGrabberMarketplacesAsync() {
            return base.Channel.EncryptChannelGrabberMarketplacesAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData Escalated(int customerId, int userId) {
            return base.Channel.Escalated(customerId, userId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EscalatedAsync(int customerId, int userId) {
            return base.Channel.EscalatedAsync(customerId, userId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData EsignProcessPending(System.Nullable<int> nCustomerID) {
            return base.Channel.EsignProcessPending(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> EsignProcessPendingAsync(System.Nullable<int> nCustomerID) {
            return base.Channel.EsignProcessPendingAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.StringActionResult EsignSend(int userId, EchoSignLib.EchoSignEnvelope[] oPackage) {
            return base.Channel.EsignSend(userId, oPackage);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.StringActionResult> EsignSendAsync(int userId, EchoSignLib.EchoSignEnvelope[] oPackage) {
            return base.Channel.EsignSendAsync(userId, oPackage);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ExperianCompanyCheck(int userId, int customerId, bool forceCheck) {
            return base.Channel.ExperianCompanyCheck(userId, customerId, forceCheck);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianCompanyCheckAsync(int userId, int customerId, bool forceCheck) {
            return base.Channel.ExperianCompanyCheckAsync(userId, customerId, forceCheck);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData ExperianConsumerCheck(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck) {
            return base.Channel.ExperianConsumerCheck(userId, nCustomerID, nDirectorID, bForceCheck);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> ExperianConsumerCheckAsync(int userId, int nCustomerID, System.Nullable<int> nDirectorID, bool bForceCheck) {
            return base.Channel.ExperianConsumerCheckAsync(userId, nCustomerID, nDirectorID, bForceCheck);
        }
        
        public ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult FindAccountsToUpdate(int nCustomerID) {
            return base.Channel.FindAccountsToUpdate(nCustomerID);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AccountsToUpdateActionResult> FindAccountsToUpdateAsync(int nCustomerID) {
            return base.Channel.FindAccountsToUpdateAsync(nCustomerID);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData FinishWizard(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId) {
            return base.Channel.FinishWizard(oArgs, underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FinishWizardAsync(Ezbob.Backend.Models.FinishWizardArgs oArgs, int underwriterId) {
            return base.Channel.FinishWizardAsync(oArgs, underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData FirstOfMonthStatusNotifier() {
            return base.Channel.FirstOfMonthStatusNotifier();
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FirstOfMonthStatusNotifierAsync() {
            return base.Channel.FirstOfMonthStatusNotifierAsync();
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData FraudChecker(int customerId, Ezbob.Backend.Models.FraudMode mode) {
            return base.Channel.FraudChecker(customerId, mode);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> FraudCheckerAsync(int customerId, Ezbob.Backend.Models.FraudMode mode) {
            return base.Channel.FraudCheckerAsync(customerId, mode);
        }
        
        public ServiceClientProxy.EzServiceReference.BoolActionResult GenerateMobileCode(string phone) {
            return base.Channel.GenerateMobileCode(phone);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.BoolActionResult> GenerateMobileCodeAsync(string phone) {
            return base.Channel.GenerateMobileCodeAsync(phone);
        }
        
        public ServiceClientProxy.EzServiceReference.AvailableFundsActionResult GetAvailableFunds(int underwriterId) {
            return base.Channel.GetAvailableFunds(underwriterId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.AvailableFundsActionResult> GetAvailableFundsAsync(int underwriterId) {
            return base.Channel.GetAvailableFundsAsync(underwriterId);
        }
        
        public ServiceClientProxy.EzServiceReference.ActionMetaData GetCashFailed(int customerId) {
            return base.Channel.GetCashFailed(customerId);
        }
        
        public System.Threading.Tasks.Task<ServiceClientProxy.EzServiceReference.ActionMetaData> GetCashFailedAsync(int customerId) {
            return base.Channel.GetCashFailedAsync(customerId);
        }
    }
}
