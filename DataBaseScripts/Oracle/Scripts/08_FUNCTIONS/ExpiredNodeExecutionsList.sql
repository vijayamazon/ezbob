CREATE OR REPLACE function ExpiredNodeExecutionsList return sys_refcursor
is
 p_ret_cur sys_refcursor;
begin
 begin
 open p_ret_cur for '
SELECT
    STRATEGYENGINE_EXECUTIONSTATE.ID,
    STRATEGY_NODE.NODEID,
    STRATEGYENGINE_EXECUTIONSTATE.APPLICATIONID,
    APPLICATION_APPLICATION.CREATORUSERID,
    APPLICATION_APPLICATION.VERSION,
    STRATEGY_NODE.ISHARDREACTION,
    S.ID as SignalId,
    STRATEGYENGINE_EXECUTIONSTATE.STARTTIME as StartTime,
    STRATEGY_NODE.EXECUTIONDURATION as ExecutionDuration,
    APPLICATION_APPLICATION.AppCounter as OwnerApplicationId
FROM
    STRATEGY_NODE
    INNER JOIN STRATEGYENGINE_EXECUTIONSTATE
        ON STRATEGY_NODE.NODEID = STRATEGYENGINE_EXECUTIONSTATE.CURRENTNODEID
    INNER JOIN APPLICATION_APPLICATION
        ON STRATEGYENGINE_EXECUTIONSTATE.APPLICATIONID = APPLICATION_APPLICATION.APPLICATIONID
    LEFT OUTER JOIN Application_NodeSetting
        ON STRATEGYENGINE_EXECUTIONSTATE.APPLICATIONID = Application_NodeSetting.APPLICATIONID 
           AND STRATEGYENGINE_EXECUTIONSTATE.CURRENTNODEID = Application_NodeSetting.NODEID
           AND STRATEGYENGINE_EXECUTIONSTATE.CURRENTNODEPOSTFIX = Application_NodeSetting.NODEPOSTFIX
           AND Application_NodeSetting.Name=:SettingName1
    INNER JOIN Signal S
        ON S.APPLICATIONID = APPLICATION_APPLICATION.APPLICATIONID
WHERE
    ((NOT(Application_NodeSetting.VALUE IS NULL)
      AND ((CURRENT_DATE - STRATEGYENGINE_EXECUTIONSTATE.STARTTIME) * 24 * 60 * 60 > Application_NodeSetting.VALUE))
     OR
     ((Application_NodeSetting.VALUE IS NULL)
      AND NOT(STRATEGY_NODE.ExecutionDURATION IS NULL OR STRATEGY_NODE.ExecutionDURATION = -1)
      AND ((CURRENT_DATE - STRATEGYENGINE_EXECUTIONSTATE.STARTTIME) * 24 * 60 * 60 > STRATEGY_NODE.ExecutionDURATION)))
    AND STRATEGYENGINE_EXECUTIONSTATE.ISTIMEOUTREPORTED IS NULL

union 

SELECT
    STRATEGYENGINE_EXECUTIONSTATE.ID,
    null NODEID,
    STRATEGYENGINE_EXECUTIONSTATE.APPLICATIONID,
    APPLICATION_APPLICATION.CREATORUSERID,
    APPLICATION_APPLICATION.VERSION,
    1 as ISHARDREACTION,
    S.ID as SignalId,
    STRATEGYENGINE_EXECUTIONSTATE.STARTTIME as StartTime,
    NULL as ExecutionDuration,
    APPLICATION_APPLICATION.AppCounter as OwnerApplicationId
FROM STRATEGYENGINE_EXECUTIONSTATE
    INNER JOIN APPLICATION_APPLICATION
        ON STRATEGYENGINE_EXECUTIONSTATE.APPLICATIONID = APPLICATION_APPLICATION.APPLICATIONID
    INNER JOIN Application_NodeSetting
        ON STRATEGYENGINE_EXECUTIONSTATE.APPLICATIONID = Application_NodeSetting.APPLICATIONID 
           AND STRATEGYENGINE_EXECUTIONSTATE.CURRENTNODEID is null
           AND Application_NodeSetting.NODEID is null
           AND STRATEGYENGINE_EXECUTIONSTATE.CURRENTNODEPOSTFIX = Application_NodeSetting.NODEPOSTFIX
           AND Application_NodeSetting.Name=:SettingName2
    INNER JOIN Signal S
        ON S.APPLICATIONID = APPLICATION_APPLICATION.APPLICATIONID
WHERE
    (NOT(Application_NodeSetting.VALUE IS NULL)
      AND ((CURRENT_DATE - STRATEGYENGINE_EXECUTIONSTATE.STARTTIME) * 24 * 60 * 60 > Application_NodeSetting.VALUE))
    AND STRATEGYENGINE_EXECUTIONSTATE.ISTIMEOUTREPORTED IS NULL' using 'timelimit', 'timelimit';
 return p_ret_cur;
 close p_ret_cur;

 end;


end ExpiredNodeExecutionsList;
/